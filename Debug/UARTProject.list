
UARTProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba8  08006ba8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb0  08006bb0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb0  08006bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08006bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000100  08006cb8  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08006cb8  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196b7  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003416  00000000  00000000  0003982a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003cc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cd  00000000  00000000  0003e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028971  00000000  00000000  0003f515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b207  00000000  00000000  00067e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f51c8  00000000  00000000  0008308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067fc  00000000  00000000  00178258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0017ea54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006af8 	.word	0x08006af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08006af8 	.word	0x08006af8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b970 	b.w	8000930 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	460f      	mov	r7, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14a      	bne.n	800070e <__udivmoddi4+0xa6>
 8000678:	428a      	cmp	r2, r1
 800067a:	4694      	mov	ip, r2
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0xe2>
 800067e:	fab2 f382 	clz	r3, r2
 8000682:	b143      	cbz	r3, 8000696 <__udivmoddi4+0x2e>
 8000684:	fa02 fc03 	lsl.w	ip, r2, r3
 8000688:	f1c3 0220 	rsb	r2, r3, #32
 800068c:	409f      	lsls	r7, r3
 800068e:	fa20 f202 	lsr.w	r2, r0, r2
 8000692:	4317      	orrs	r7, r2
 8000694:	409c      	lsls	r4, r3
 8000696:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800069a:	fa1f f58c 	uxth.w	r5, ip
 800069e:	fbb7 f1fe 	udiv	r1, r7, lr
 80006a2:	0c22      	lsrs	r2, r4, #16
 80006a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006ac:	fb01 f005 	mul.w	r0, r1, r5
 80006b0:	4290      	cmp	r0, r2
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x62>
 80006b4:	eb1c 0202 	adds.w	r2, ip, r2
 80006b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006bc:	f080 811c 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006c0:	4290      	cmp	r0, r2
 80006c2:	f240 8119 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006c6:	3902      	subs	r1, #2
 80006c8:	4462      	add	r2, ip
 80006ca:	1a12      	subs	r2, r2, r0
 80006cc:	b2a4      	uxth	r4, r4
 80006ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80006d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006da:	fb00 f505 	mul.w	r5, r0, r5
 80006de:	42a5      	cmp	r5, r4
 80006e0:	d90a      	bls.n	80006f8 <__udivmoddi4+0x90>
 80006e2:	eb1c 0404 	adds.w	r4, ip, r4
 80006e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006ea:	f080 8107 	bcs.w	80008fc <__udivmoddi4+0x294>
 80006ee:	42a5      	cmp	r5, r4
 80006f0:	f240 8104 	bls.w	80008fc <__udivmoddi4+0x294>
 80006f4:	4464      	add	r4, ip
 80006f6:	3802      	subs	r0, #2
 80006f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	2100      	movs	r1, #0
 8000700:	b11e      	cbz	r6, 800070a <__udivmoddi4+0xa2>
 8000702:	40dc      	lsrs	r4, r3
 8000704:	2300      	movs	r3, #0
 8000706:	e9c6 4300 	strd	r4, r3, [r6]
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0xbc>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80ed 	beq.w	80008f2 <__udivmoddi4+0x28a>
 8000718:	2100      	movs	r1, #0
 800071a:	e9c6 0500 	strd	r0, r5, [r6]
 800071e:	4608      	mov	r0, r1
 8000720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000724:	fab3 f183 	clz	r1, r3
 8000728:	2900      	cmp	r1, #0
 800072a:	d149      	bne.n	80007c0 <__udivmoddi4+0x158>
 800072c:	42ab      	cmp	r3, r5
 800072e:	d302      	bcc.n	8000736 <__udivmoddi4+0xce>
 8000730:	4282      	cmp	r2, r0
 8000732:	f200 80f8 	bhi.w	8000926 <__udivmoddi4+0x2be>
 8000736:	1a84      	subs	r4, r0, r2
 8000738:	eb65 0203 	sbc.w	r2, r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	4617      	mov	r7, r2
 8000740:	2e00      	cmp	r6, #0
 8000742:	d0e2      	beq.n	800070a <__udivmoddi4+0xa2>
 8000744:	e9c6 4700 	strd	r4, r7, [r6]
 8000748:	e7df      	b.n	800070a <__udivmoddi4+0xa2>
 800074a:	b902      	cbnz	r2, 800074e <__udivmoddi4+0xe6>
 800074c:	deff      	udf	#255	; 0xff
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8090 	bne.w	8000878 <__udivmoddi4+0x210>
 8000758:	1a8a      	subs	r2, r1, r2
 800075a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075e:	fa1f fe8c 	uxth.w	lr, ip
 8000762:	2101      	movs	r1, #1
 8000764:	fbb2 f5f7 	udiv	r5, r2, r7
 8000768:	fb07 2015 	mls	r0, r7, r5, r2
 800076c:	0c22      	lsrs	r2, r4, #16
 800076e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000772:	fb0e f005 	mul.w	r0, lr, r5
 8000776:	4290      	cmp	r0, r2
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x124>
 800077a:	eb1c 0202 	adds.w	r2, ip, r2
 800077e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4290      	cmp	r0, r2
 8000786:	f200 80cb 	bhi.w	8000920 <__udivmoddi4+0x2b8>
 800078a:	4645      	mov	r5, r8
 800078c:	1a12      	subs	r2, r2, r0
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb2 f0f7 	udiv	r0, r2, r7
 8000794:	fb07 2210 	mls	r2, r7, r0, r2
 8000798:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079c:	fb0e fe00 	mul.w	lr, lr, r0
 80007a0:	45a6      	cmp	lr, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x14e>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ac:	d202      	bcs.n	80007b4 <__udivmoddi4+0x14c>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f200 80bb 	bhi.w	800092a <__udivmoddi4+0x2c2>
 80007b4:	4610      	mov	r0, r2
 80007b6:	eba4 040e 	sub.w	r4, r4, lr
 80007ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007be:	e79f      	b.n	8000700 <__udivmoddi4+0x98>
 80007c0:	f1c1 0720 	rsb	r7, r1, #32
 80007c4:	408b      	lsls	r3, r1
 80007c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ce:	fa05 f401 	lsl.w	r4, r5, r1
 80007d2:	fa20 f307 	lsr.w	r3, r0, r7
 80007d6:	40fd      	lsrs	r5, r7
 80007d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007dc:	4323      	orrs	r3, r4
 80007de:	fbb5 f8f9 	udiv	r8, r5, r9
 80007e2:	fa1f fe8c 	uxth.w	lr, ip
 80007e6:	fb09 5518 	mls	r5, r9, r8, r5
 80007ea:	0c1c      	lsrs	r4, r3, #16
 80007ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007f0:	fb08 f50e 	mul.w	r5, r8, lr
 80007f4:	42a5      	cmp	r5, r4
 80007f6:	fa02 f201 	lsl.w	r2, r2, r1
 80007fa:	fa00 f001 	lsl.w	r0, r0, r1
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1c 0404 	adds.w	r4, ip, r4
 8000804:	f108 3aff 	add.w	sl, r8, #4294967295
 8000808:	f080 8088 	bcs.w	800091c <__udivmoddi4+0x2b4>
 800080c:	42a5      	cmp	r5, r4
 800080e:	f240 8085 	bls.w	800091c <__udivmoddi4+0x2b4>
 8000812:	f1a8 0802 	sub.w	r8, r8, #2
 8000816:	4464      	add	r4, ip
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	b29d      	uxth	r5, r3
 800081c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000820:	fb09 4413 	mls	r4, r9, r3, r4
 8000824:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000828:	fb03 fe0e 	mul.w	lr, r3, lr
 800082c:	45a6      	cmp	lr, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1c 0404 	adds.w	r4, ip, r4
 8000834:	f103 35ff 	add.w	r5, r3, #4294967295
 8000838:	d26c      	bcs.n	8000914 <__udivmoddi4+0x2ac>
 800083a:	45a6      	cmp	lr, r4
 800083c:	d96a      	bls.n	8000914 <__udivmoddi4+0x2ac>
 800083e:	3b02      	subs	r3, #2
 8000840:	4464      	add	r4, ip
 8000842:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000846:	fba3 9502 	umull	r9, r5, r3, r2
 800084a:	eba4 040e 	sub.w	r4, r4, lr
 800084e:	42ac      	cmp	r4, r5
 8000850:	46c8      	mov	r8, r9
 8000852:	46ae      	mov	lr, r5
 8000854:	d356      	bcc.n	8000904 <__udivmoddi4+0x29c>
 8000856:	d053      	beq.n	8000900 <__udivmoddi4+0x298>
 8000858:	b156      	cbz	r6, 8000870 <__udivmoddi4+0x208>
 800085a:	ebb0 0208 	subs.w	r2, r0, r8
 800085e:	eb64 040e 	sbc.w	r4, r4, lr
 8000862:	fa04 f707 	lsl.w	r7, r4, r7
 8000866:	40ca      	lsrs	r2, r1
 8000868:	40cc      	lsrs	r4, r1
 800086a:	4317      	orrs	r7, r2
 800086c:	e9c6 7400 	strd	r7, r4, [r6]
 8000870:	4618      	mov	r0, r3
 8000872:	2100      	movs	r1, #0
 8000874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000878:	f1c3 0120 	rsb	r1, r3, #32
 800087c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000880:	fa20 f201 	lsr.w	r2, r0, r1
 8000884:	fa25 f101 	lsr.w	r1, r5, r1
 8000888:	409d      	lsls	r5, r3
 800088a:	432a      	orrs	r2, r5
 800088c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fbb1 f0f7 	udiv	r0, r1, r7
 8000898:	fb07 1510 	mls	r5, r7, r0, r1
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008a2:	fb00 f50e 	mul.w	r5, r0, lr
 80008a6:	428d      	cmp	r5, r1
 80008a8:	fa04 f403 	lsl.w	r4, r4, r3
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x258>
 80008ae:	eb1c 0101 	adds.w	r1, ip, r1
 80008b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008b6:	d22f      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008b8:	428d      	cmp	r5, r1
 80008ba:	d92d      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008bc:	3802      	subs	r0, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1b49      	subs	r1, r1, r5
 80008c2:	b292      	uxth	r2, r2
 80008c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008c8:	fb07 1115 	mls	r1, r7, r5, r1
 80008cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d0:	fb05 f10e 	mul.w	r1, r5, lr
 80008d4:	4291      	cmp	r1, r2
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x282>
 80008d8:	eb1c 0202 	adds.w	r2, ip, r2
 80008dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e0:	d216      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 80008e2:	4291      	cmp	r1, r2
 80008e4:	d914      	bls.n	8000910 <__udivmoddi4+0x2a8>
 80008e6:	3d02      	subs	r5, #2
 80008e8:	4462      	add	r2, ip
 80008ea:	1a52      	subs	r2, r2, r1
 80008ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008f0:	e738      	b.n	8000764 <__udivmoddi4+0xfc>
 80008f2:	4631      	mov	r1, r6
 80008f4:	4630      	mov	r0, r6
 80008f6:	e708      	b.n	800070a <__udivmoddi4+0xa2>
 80008f8:	4639      	mov	r1, r7
 80008fa:	e6e6      	b.n	80006ca <__udivmoddi4+0x62>
 80008fc:	4610      	mov	r0, r2
 80008fe:	e6fb      	b.n	80006f8 <__udivmoddi4+0x90>
 8000900:	4548      	cmp	r0, r9
 8000902:	d2a9      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000904:	ebb9 0802 	subs.w	r8, r9, r2
 8000908:	eb65 0e0c 	sbc.w	lr, r5, ip
 800090c:	3b01      	subs	r3, #1
 800090e:	e7a3      	b.n	8000858 <__udivmoddi4+0x1f0>
 8000910:	4645      	mov	r5, r8
 8000912:	e7ea      	b.n	80008ea <__udivmoddi4+0x282>
 8000914:	462b      	mov	r3, r5
 8000916:	e794      	b.n	8000842 <__udivmoddi4+0x1da>
 8000918:	4640      	mov	r0, r8
 800091a:	e7d1      	b.n	80008c0 <__udivmoddi4+0x258>
 800091c:	46d0      	mov	r8, sl
 800091e:	e77b      	b.n	8000818 <__udivmoddi4+0x1b0>
 8000920:	3d02      	subs	r5, #2
 8000922:	4462      	add	r2, ip
 8000924:	e732      	b.n	800078c <__udivmoddi4+0x124>
 8000926:	4608      	mov	r0, r1
 8000928:	e70a      	b.n	8000740 <__udivmoddi4+0xd8>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	e742      	b.n	80007b6 <__udivmoddi4+0x14e>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f001 f9cb 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f87f 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 fa49 	bl	8000dd8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000946:	f000 f8dd 	bl	8000b04 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800094a:	f000 f913 	bl	8000b74 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800094e:	f000 f951 	bl	8000bf4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000952:	f000 f975 	bl	8000c40 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000956:	f000 f9b1 	bl	8000cbc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800095a:	f000 f9df 	bl	8000d1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800095e:	f000 fa0d 	bl	8000d7c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	492d      	ldr	r1, [pc, #180]	; (8000a20 <main+0xec>)
 800096a:	482e      	ldr	r0, [pc, #184]	; (8000a24 <main+0xf0>)
 800096c:	f004 fbcf 	bl	800510e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	222f      	movs	r2, #47	; 0x2f
 8000976:	492c      	ldr	r1, [pc, #176]	; (8000a28 <main+0xf4>)
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0xf0>)
 800097a:	f004 fbc8 	bl	800510e <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 800097e:	f001 f8cb 	bl	8001b18 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	2231      	movs	r2, #49	; 0x31
 8000988:	4928      	ldr	r1, [pc, #160]	; (8000a2c <main+0xf8>)
 800098a:	4826      	ldr	r0, [pc, #152]	; (8000a24 <main+0xf0>)
 800098c:	f004 fbbf 	bl	800510e <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */
	  /*uint8_t Test[] = "Hello World !  \r\n You are Welcome to my LinkedIn : Souhaila Houissa \r\n  "; //Data to send
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
	  HAL_Delay(1000);*/
	  temp_value = BSP_TSENSOR_ReadTemp();
 8000990:	f001 f8de 	bl	8001b50 <BSP_TSENSOR_ReadTemp>
 8000994:	eef0 7a40 	vmov.f32	s15, s0
 8000998:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <main+0xfc>)
 800099a:	edc3 7a00 	vstr	s15, [r3]
	  int tmpInt1 = temp_value;
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <main+0xfc>)
 80009a0:	edd3 7a00 	vldr	s15, [r3]
 80009a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009a8:	ee17 3a90 	vmov	r3, s15
 80009ac:	60fb      	str	r3, [r7, #12]
	  float tmpFrac = temp_value - tmpInt1;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <main+0xfc>)
 80009b0:	ed93 7a00 	vldr	s14, [r3]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c2:	edc7 7a02 	vstr	s15, [r7, #8]
	  int tmpInt2 = trunc(tmpFrac * 100);
 80009c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80009ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000a34 <main+0x100>
 80009ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d2:	ee17 0a90 	vmov	r0, s15
 80009d6:	f7ff fdaf 	bl	8000538 <__aeabi_f2d>
 80009da:	4602      	mov	r2, r0
 80009dc:	460b      	mov	r3, r1
 80009de:	ec43 2b10 	vmov	d0, r2, r3
 80009e2:	f006 f84f 	bl	8006a84 <trunc>
 80009e6:	ec53 2b10 	vmov	r2, r3, d0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff fdfb 	bl	80005e8 <__aeabi_d2iz>
 80009f2:	4603      	mov	r3, r0
 80009f4:	607b      	str	r3, [r7, #4]
	  snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <main+0x104>)
 80009fe:	2164      	movs	r1, #100	; 0x64
 8000a00:	480e      	ldr	r0, [pc, #56]	; (8000a3c <main+0x108>)
 8000a02:	f005 fb87 	bl	8006114 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	490b      	ldr	r1, [pc, #44]	; (8000a3c <main+0x108>)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <main+0xf0>)
 8000a10:	f004 fb7d 	bl	800510e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a18:	f001 f9d0 	bl	8001dbc <HAL_Delay>
  {
 8000a1c:	e7b8      	b.n	8000990 <main+0x5c>
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000250 	.word	0x20000250
 8000a28:	20000030 	.word	0x20000030
 8000a2c:	20000060 	.word	0x20000060
 8000a30:	2000086c 	.word	0x2000086c
 8000a34:	42c80000 	.word	0x42c80000
 8000a38:	08006b10 	.word	0x08006b10
 8000a3c:	20000870 	.word	0x20000870

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b096      	sub	sp, #88	; 0x58
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2244      	movs	r2, #68	; 0x44
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f005 fb94 	bl	800617c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a66:	f002 fe73 	bl	8003750 <HAL_PWREx_ControlVoltageScaling>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a70:	f000 fb64 	bl	800113c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a74:	f002 fe4e 	bl	8003714 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <SystemClock_Config+0xc0>)
 8000a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a7e:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <SystemClock_Config+0xc0>)
 8000a80:	f023 0318 	bic.w	r3, r3, #24
 8000a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a88:	2314      	movs	r3, #20
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a98:	2360      	movs	r3, #96	; 0x60
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000aa8:	2328      	movs	r3, #40	; 0x28
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aac:	2307      	movs	r3, #7
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 ff69 	bl	8003994 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fb38 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fb31 	bl	800414c <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000af0:	f000 fb24 	bl	800113c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000af4:	f004 f838 	bl	8004b68 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000af8:	bf00      	nop
 8000afa:	3758      	adds	r7, #88	; 0x58
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b0a:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <MX_DFSDM1_Init+0x6c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b32:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_DFSDM1_Init+0x68>)
 8000b5a:	f001 fa65 	bl	8002028 <HAL_DFSDM_ChannelInit>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000b64:	f000 faea 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000011c 	.word	0x2000011c
 8000b70:	40016020 	.word	0x40016020

08000b74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <MX_I2C2_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <MX_I2C2_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bb0:	f001 fe1f 	bl	80027f2 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fabf 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bc2:	f002 fbc7 	bl	8003354 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 fab6 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_I2C2_Init+0x74>)
 8000bd4:	f002 fc09 	bl	80033ea <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 faad 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000154 	.word	0x20000154
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	10909cec 	.word	0x10909cec

08000bf4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <MX_QUADSPI_Init+0x48>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c00:	2202      	movs	r2, #2
 8000c02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c12:	2217      	movs	r2, #23
 8000c14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_QUADSPI_Init+0x44>)
 8000c24:	f002 fdfa 	bl	800381c <HAL_QSPI_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000c2e:	f000 fa85 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001a8 	.word	0x200001a8
 8000c3c:	a0001000 	.word	0xa0001000

08000c40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <MX_SPI3_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c8e:	2207      	movs	r2, #7
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_SPI3_Init+0x74>)
 8000ca0:	f004 f944 	bl	8004f2c <HAL_SPI_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 fa47 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001ec 	.word	0x200001ec
 8000cb8:	40003c00 	.word	0x40003c00

08000cbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cc2:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <MX_USART1_UART_Init+0x5c>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART1_UART_Init+0x58>)
 8000d00:	f004 f9b7 	bl	8005072 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d0a:	f000 fa17 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000250 	.word	0x20000250
 8000d18:	40013800 	.word	0x40013800

08000d1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_USART3_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d60:	f004 f987 	bl	8005072 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f000 f9e7 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002d8 	.word	0x200002d8
 8000d78:	40004800 	.word	0x40004800

08000d7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d96:	2202      	movs	r2, #2
 8000d98:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc0:	f002 fb5f 	bl	8003482 <HAL_PCD_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dca:	f000 f9b7 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000360 	.word	0x20000360

08000dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	4bbd      	ldr	r3, [pc, #756]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4abc      	ldr	r2, [pc, #752]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4bba      	ldr	r3, [pc, #744]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4bb7      	ldr	r3, [pc, #732]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4ab6      	ldr	r2, [pc, #728]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4bb4      	ldr	r3, [pc, #720]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4bb1      	ldr	r3, [pc, #708]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4ab0      	ldr	r2, [pc, #704]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4bae      	ldr	r3, [pc, #696]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4bab      	ldr	r3, [pc, #684]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4aaa      	ldr	r2, [pc, #680]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4ba8      	ldr	r3, [pc, #672]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	4ba5      	ldr	r3, [pc, #660]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4aa4      	ldr	r2, [pc, #656]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4ba2      	ldr	r3, [pc, #648]	; (80010e4 <MX_GPIO_Init+0x30c>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e6c:	489e      	ldr	r0, [pc, #632]	; (80010e8 <MX_GPIO_Init+0x310>)
 8000e6e:	f001 fc85 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f001 fc7e 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e80:	2200      	movs	r2, #0
 8000e82:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e86:	4899      	ldr	r0, [pc, #612]	; (80010ec <MX_GPIO_Init+0x314>)
 8000e88:	f001 fc78 	bl	800277c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e92:	4897      	ldr	r0, [pc, #604]	; (80010f0 <MX_GPIO_Init+0x318>)
 8000e94:	f001 fc72 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	4894      	ldr	r0, [pc, #592]	; (80010f0 <MX_GPIO_Init+0x318>)
 8000ea0:	f001 fc6c 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000eaa:	4892      	ldr	r0, [pc, #584]	; (80010f4 <MX_GPIO_Init+0x31c>)
 8000eac:	f001 fc66 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	488d      	ldr	r0, [pc, #564]	; (80010ec <MX_GPIO_Init+0x314>)
 8000eb6:	f001 fc61 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	488a      	ldr	r0, [pc, #552]	; (80010e8 <MX_GPIO_Init+0x310>)
 8000ec0:	f001 fc5c 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ec4:	f240 1315 	movw	r3, #277	; 0x115
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4882      	ldr	r0, [pc, #520]	; (80010e8 <MX_GPIO_Init+0x310>)
 8000ede:	f001 f9af 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ee2:	236a      	movs	r3, #106	; 0x6a
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	487c      	ldr	r0, [pc, #496]	; (80010e8 <MX_GPIO_Init+0x310>)
 8000ef8:	f001 f9a2 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4878      	ldr	r0, [pc, #480]	; (80010f4 <MX_GPIO_Init+0x31c>)
 8000f14:	f001 f994 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f18:	233f      	movs	r3, #63	; 0x3f
 8000f1a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f1c:	230b      	movs	r3, #11
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4872      	ldr	r0, [pc, #456]	; (80010f4 <MX_GPIO_Init+0x31c>)
 8000f2c:	f001 f988 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000f30:	2303      	movs	r3, #3
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f40:	2308      	movs	r3, #8
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f001 f977 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f52:	f248 1304 	movw	r3, #33028	; 0x8104
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f001 f967 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f72:	2308      	movs	r3, #8
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f001 f956 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f94:	2310      	movs	r3, #16
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000faa:	f001 f949 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000fae:	23e0      	movs	r3, #224	; 0xe0
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f001 f938 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4841      	ldr	r0, [pc, #260]	; (80010ec <MX_GPIO_Init+0x314>)
 8000fe6:	f001 f92b 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	483b      	ldr	r0, [pc, #236]	; (80010ec <MX_GPIO_Init+0x314>)
 8000ffe:	f001 f91f 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001002:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001006:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4834      	ldr	r0, [pc, #208]	; (80010ec <MX_GPIO_Init+0x314>)
 800101c:	f001 f910 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001020:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001024:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001026:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	482e      	ldr	r0, [pc, #184]	; (80010f0 <MX_GPIO_Init+0x318>)
 8001038:	f001 f902 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800103c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4826      	ldr	r0, [pc, #152]	; (80010f0 <MX_GPIO_Init+0x318>)
 8001056:	f001 f8f3 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800105a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4820      	ldr	r0, [pc, #128]	; (80010f4 <MX_GPIO_Init+0x31c>)
 8001074:	f001 f8e4 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001078:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4819      	ldr	r0, [pc, #100]	; (80010f4 <MX_GPIO_Init+0x31c>)
 8001090:	f001 f8d6 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001094:	2302      	movs	r3, #2
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a4:	2305      	movs	r3, #5
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_GPIO_Init+0x318>)
 80010b0:	f001 f8c6 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80010b4:	2378      	movs	r3, #120	; 0x78
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c4:	2307      	movs	r3, #7
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4808      	ldr	r0, [pc, #32]	; (80010f0 <MX_GPIO_Init+0x318>)
 80010d0:	f001 f8b6 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80010d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010da:	2312      	movs	r3, #18
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	e00a      	b.n	80010f8 <MX_GPIO_Init+0x320>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48001000 	.word	0x48001000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000c00 	.word	0x48000c00
 80010f4:	48000800 	.word	0x48000800
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fe:	2304      	movs	r3, #4
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_GPIO_Init+0x360>)
 800110a:	f001 f899 	bl	8002240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2017      	movs	r0, #23
 8001114:	f000 ff51 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001118:	2017      	movs	r0, #23
 800111a:	f000 ff6a 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2028      	movs	r0, #40	; 0x28
 8001124:	f000 ff49 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001128:	2028      	movs	r0, #40	; 0x28
 800112a:	f000 ff62 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	48000400 	.word	0x48000400

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_MspInit+0x44>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_MspInit+0x44>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_MspInit+0x44>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_MspInit+0x44>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_MspInit+0x44>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6593      	str	r3, [r2, #88]	; 0x58
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_MspInit+0x44>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0ac      	sub	sp, #176	; 0xb0
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2288      	movs	r2, #136	; 0x88
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 ffe3 	bl	800617c <memset>
  if(DFSDM1_Init == 0)
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d142      	bne.n	8001244 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 f9e0 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80011da:	f7ff ffaf 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800120e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001228:	2306      	movs	r3, #6
 800122a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001236:	f001 f803 	bl	8002240 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a02      	ldr	r2, [pc, #8]	; (800124c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001242:	6013      	str	r3, [r2, #0]
  }

}
 8001244:	bf00      	nop
 8001246:	37b0      	adds	r7, #176	; 0xb0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200008d4 	.word	0x200008d4
 8001250:	40021000 	.word	0x40021000
 8001254:	48001000 	.word	0x48001000

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0ac      	sub	sp, #176	; 0xb0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2288      	movs	r2, #136	; 0x88
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f004 ff7f 	bl	800617c <memset>
  if(hi2c->Instance==I2C2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a21      	ldr	r2, [pc, #132]	; (8001308 <HAL_I2C_MspInit+0xb0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d13b      	bne.n	8001300 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4618      	mov	r0, r3
 8001296:	f003 f97d 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012a0:	f7ff ff4c 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_I2C_MspInit+0xb4>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_I2C_MspInit+0xb4>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_I2C_MspInit+0xb4>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012d6:	2304      	movs	r3, #4
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e0:	4619      	mov	r1, r3
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <HAL_I2C_MspInit+0xb8>)
 80012e4:	f000 ffac 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_I2C_MspInit+0xb4>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_I2C_MspInit+0xb4>)
 80012ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f2:	6593      	str	r3, [r2, #88]	; 0x58
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_I2C_MspInit+0xb4>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001300:	bf00      	nop
 8001302:	37b0      	adds	r7, #176	; 0xb0
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40005800 	.word	0x40005800
 800130c:	40021000 	.word	0x40021000
 8001310:	48000400 	.word	0x48000400

08001314 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_I2C_MspDeInit+0x3c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10f      	bne.n	8001346 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_I2C_MspDeInit+0x40>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_I2C_MspDeInit+0x40>)
 800132c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001330:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <HAL_I2C_MspDeInit+0x44>)
 8001338:	f001 f92c 	bl	8002594 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_I2C_MspDeInit+0x44>)
 8001342:	f001 f927 	bl	8002594 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40005800 	.word	0x40005800
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400

0800135c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_QSPI_MspInit+0x7c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d128      	bne.n	80013d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_QSPI_MspInit+0x80>)
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <HAL_QSPI_MspInit+0x80>)
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6513      	str	r3, [r2, #80]	; 0x50
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_QSPI_MspInit+0x80>)
 800138c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_QSPI_MspInit+0x80>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_QSPI_MspInit+0x80>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_QSPI_MspInit+0x80>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013b2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013c0:	230a      	movs	r3, #10
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_QSPI_MspInit+0x84>)
 80013cc:	f000 ff38 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	; 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	a0001000 	.word	0xa0001000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48001000 	.word	0x48001000

080013e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_SPI_MspInit+0x7c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d128      	bne.n	8001458 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_SPI_MspInit+0x80>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_SPI_MspInit+0x80>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	6593      	str	r3, [r2, #88]	; 0x58
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_SPI_MspInit+0x80>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_SPI_MspInit+0x80>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_SPI_MspInit+0x80>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_SPI_MspInit+0x80>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001436:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001448:	2306      	movs	r3, #6
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_SPI_MspInit+0x84>)
 8001454:	f000 fef4 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40003c00 	.word	0x40003c00
 8001464:	40021000 	.word	0x40021000
 8001468:	48000800 	.word	0x48000800

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ae      	sub	sp, #184	; 0xb8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2288      	movs	r2, #136	; 0x88
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f004 fe75 	bl	800617c <memset>
  if(huart->Instance==USART1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_UART_MspInit+0x134>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d13b      	bne.n	8001514 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a0:	2300      	movs	r3, #0
 80014a2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 f873 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b4:	f7ff fe42 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014bc:	4a39      	ldr	r2, [pc, #228]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c2:	6613      	str	r3, [r2, #96]	; 0x60
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_UART_MspInit+0x138>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014e8:	23c0      	movs	r3, #192	; 0xc0
 80014ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001500:	2307      	movs	r3, #7
 8001502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800150a:	4619      	mov	r1, r3
 800150c:	4826      	ldr	r0, [pc, #152]	; (80015a8 <HAL_UART_MspInit+0x13c>)
 800150e:	f000 fe97 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001512:	e040      	b.n	8001596 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a24      	ldr	r2, [pc, #144]	; (80015ac <HAL_UART_MspInit+0x140>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d13b      	bne.n	8001596 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800151e:	2304      	movs	r3, #4
 8001520:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001522:	2300      	movs	r3, #0
 8001524:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4618      	mov	r0, r3
 800152c:	f003 f832 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001536:	f7ff fe01 	bl	800113c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_UART_MspInit+0x138>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x138>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800156a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800156e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001584:	2307      	movs	r3, #7
 8001586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158e:	4619      	mov	r1, r3
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <HAL_UART_MspInit+0x144>)
 8001592:	f000 fe55 	bl	8002240 <HAL_GPIO_Init>
}
 8001596:	bf00      	nop
 8001598:	37b8      	adds	r7, #184	; 0xb8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	40004800 	.word	0x40004800
 80015b0:	48000c00 	.word	0x48000c00

080015b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0ac      	sub	sp, #176	; 0xb0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2288      	movs	r2, #136	; 0x88
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 fdd1 	bl	800617c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e2:	d17c      	bne.n	80016de <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80015ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80015fa:	2318      	movs	r3, #24
 80015fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015fe:	2307      	movs	r3, #7
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001606:	2302      	movs	r3, #2
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800160a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4618      	mov	r0, r3
 8001616:	f002 ffbd 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001620:	f7ff fd8c 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800163c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f000 fdf1 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800165e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001678:	230a      	movs	r3, #10
 800167a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f000 fdda 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 8001692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d114      	bne.n	80016da <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6593      	str	r3, [r2, #88]	; 0x58
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80016c8:	f002 f898 	bl	80037fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 80016ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_PCD_MspInit+0x134>)
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016d8:	e001      	b.n	80016de <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80016da:	f002 f88f 	bl	80037fc <HAL_PWREx_EnableVddUSB>
}
 80016de:	bf00      	nop
 80016e0:	37b0      	adds	r7, #176	; 0xb0
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <NMI_Handler+0x4>

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <MemManage_Handler+0x4>

080016fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler+0x4>

0800170a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001738:	f000 fb20 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001744:	2020      	movs	r0, #32
 8001746:	f001 f831 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800174a:	2040      	movs	r0, #64	; 0x40
 800174c:	f001 f82e 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001750:	2080      	movs	r0, #128	; 0x80
 8001752:	f001 f82b 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001756:	f44f 7080 	mov.w	r0, #256	; 0x100
 800175a:	f001 f827 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001766:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800176a:	f001 f81f 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800176e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001772:	f001 f81b 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001776:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800177a:	f001 f817 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800177e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001782:	f001 f813 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001786:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800178a:	f001 f80f 	bl	80027ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f004 fce2 	bl	800618c <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20018000 	.word	0x20018000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	200008d8 	.word	0x200008d8
 80017fc:	20000aa8 	.word	0x20000aa8

08001800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001828:	f7ff ffea 	bl	8001800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopForever+0x6>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopForever+0xe>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopForever+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001852:	f004 fca1 	bl	8006198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001856:	f7ff f86d 	bl	8000934 <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800185c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001868:	08006bb8 	.word	0x08006bb8
  ldr r2, =_sbss
 800186c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001870:	20000aa4 	.word	0x20000aa4

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>
	...

08001878 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <I2Cx_MspInit+0xa8>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a26      	ldr	r2, [pc, #152]	; (8001920 <I2Cx_MspInit+0xa8>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <I2Cx_MspInit+0xa8>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001898:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800189c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80018aa:	2304      	movs	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	481b      	ldr	r0, [pc, #108]	; (8001924 <I2Cx_MspInit+0xac>)
 80018b6:	f000 fcc3 	bl	8002240 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4818      	ldr	r0, [pc, #96]	; (8001924 <I2Cx_MspInit+0xac>)
 80018c2:	f000 fcbd 	bl	8002240 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ee:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <I2Cx_MspInit+0xa8>)
 80018f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	210f      	movs	r1, #15
 80018fa:	2021      	movs	r0, #33	; 0x21
 80018fc:	f000 fb5d 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001900:	2021      	movs	r0, #33	; 0x21
 8001902:	f000 fb76 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210f      	movs	r1, #15
 800190a:	2022      	movs	r0, #34	; 0x22
 800190c:	f000 fb55 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001910:	2022      	movs	r0, #34	; 0x22
 8001912:	f000 fb6e 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	48000400 	.word	0x48000400

08001928 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <I2Cx_Init+0x54>)
 8001934:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <I2Cx_Init+0x58>)
 800193a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff89 	bl	8001878 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 ff43 	bl	80027f2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800196c:	2100      	movs	r1, #0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f001 fcf0 	bl	8003354 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40005800 	.word	0x40005800
 8001980:	00702681 	.word	0x00702681

08001984 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af04      	add	r7, sp, #16
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4603      	mov	r3, r0
 8001994:	72fb      	strb	r3, [r7, #11]
 8001996:	460b      	mov	r3, r1
 8001998:	813b      	strh	r3, [r7, #8]
 800199a:	4613      	mov	r3, r2
 800199c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	b299      	uxth	r1, r3
 80019a6:	88f8      	ldrh	r0, [r7, #6]
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4603      	mov	r3, r0
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f001 f8f8 	bl	8002bb0 <HAL_I2C_Mem_Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	4619      	mov	r1, r3
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f832 	bl	8001a38 <I2Cx_Error>
  }
  return status;
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b08a      	sub	sp, #40	; 0x28
 80019e2:	af04      	add	r7, sp, #16
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	4608      	mov	r0, r1
 80019e8:	4611      	mov	r1, r2
 80019ea:	461a      	mov	r2, r3
 80019ec:	4603      	mov	r3, r0
 80019ee:	72fb      	strb	r3, [r7, #11]
 80019f0:	460b      	mov	r3, r1
 80019f2:	813b      	strh	r3, [r7, #8]
 80019f4:	4613      	mov	r3, r2
 80019f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	b299      	uxth	r1, r3
 8001a00:	88f8      	ldrh	r0, [r7, #6]
 8001a02:	893a      	ldrh	r2, [r7, #8]
 8001a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	4603      	mov	r3, r0
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 ffb7 	bl	8002988 <HAL_I2C_Mem_Write>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	4619      	mov	r1, r3
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f805 	bl	8001a38 <I2Cx_Error>
  }
  return status;
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 ff6f 	bl	8002928 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ff6c 	bl	8001928 <I2Cx_Init>
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <SENSOR_IO_Init+0x10>)
 8001a5e:	f7ff ff63 	bl	8001928 <I2Cx_Init>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200008dc 	.word	0x200008dc

08001a6c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	460b      	mov	r3, r1
 8001a78:	71bb      	strb	r3, [r7, #6]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	79f9      	ldrb	r1, [r7, #7]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	1d7b      	adds	r3, r7, #5
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	4803      	ldr	r0, [pc, #12]	; (8001a9c <SENSOR_IO_Write+0x30>)
 8001a90:	f7ff ffa5 	bl	80019de <I2Cx_WriteMultiple>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200008dc 	.word	0x200008dc

08001aa0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	460a      	mov	r2, r1
 8001aaa:	71fb      	strb	r3, [r7, #7]
 8001aac:	4613      	mov	r3, r2
 8001aae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	79f9      	ldrb	r1, [r7, #7]
 8001aba:	2301      	movs	r3, #1
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f107 030f 	add.w	r3, r7, #15
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <SENSOR_IO_Read+0x38>)
 8001ac8:	f7ff ff5c 	bl	8001984 <I2Cx_ReadMultiple>

  return read_value;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200008dc 	.word	0x200008dc

08001adc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	603a      	str	r2, [r7, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	460b      	mov	r3, r1
 8001aec:	71bb      	strb	r3, [r7, #6]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	79f9      	ldrb	r1, [r7, #7]
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2301      	movs	r3, #1
 8001b02:	4804      	ldr	r0, [pc, #16]	; (8001b14 <SENSOR_IO_ReadMultiple+0x38>)
 8001b04:	f7ff ff3e 	bl	8001984 <I2Cx_ReadMultiple>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b29b      	uxth	r3, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200008dc 	.word	0x200008dc

08001b18 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <BSP_TSENSOR_Init+0x30>)
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <BSP_TSENSOR_Init+0x34>)
 8001b26:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001b28:	f7ff ff96 	bl	8001a58 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <BSP_TSENSOR_Init+0x30>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2100      	movs	r1, #0
 8001b34:	20be      	movs	r0, #190	; 0xbe
 8001b36:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000930 	.word	0x20000930
 8001b4c:	20000098 	.word	0x20000098

08001b50 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <BSP_TSENSOR_ReadTemp+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	20be      	movs	r0, #190	; 0xbe
 8001b5c:	4798      	blx	r3
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000930 	.word	0x20000930

08001b6c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff8e 	bl	8001aa0 <SENSOR_IO_Read>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	f023 0304 	bic.w	r3, r3, #4
 8001b8e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	2120      	movs	r1, #32
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff57 	bl	8001a6c <SENSOR_IO_Write>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b088      	sub	sp, #32
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	b2d8      	uxtb	r0, r3
 8001bd4:	f107 0208 	add.w	r2, r7, #8
 8001bd8:	2302      	movs	r3, #2
 8001bda:	21b2      	movs	r1, #178	; 0xb2
 8001bdc:	f7ff ff7e 	bl	8001adc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2135      	movs	r1, #53	; 0x35
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff5a 	bl	8001aa0 <SENSOR_IO_Read>
 8001bec:	4603      	mov	r3, r0
 8001bee:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001bf0:	7ffb      	ldrb	r3, [r7, #31]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	7a3b      	ldrb	r3, [r7, #8]
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	019b      	lsls	r3, r3, #6
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	7a7b      	ldrb	r3, [r7, #9]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001c18:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c1c:	10db      	asrs	r3, r3, #3
 8001c1e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001c20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c24:	10db      	asrs	r3, r3, #3
 8001c26:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	b2d8      	uxtb	r0, r3
 8001c2c:	f107 0208 	add.w	r2, r7, #8
 8001c30:	2304      	movs	r3, #4
 8001c32:	21bc      	movs	r1, #188	; 0xbc
 8001c34:	f7ff ff52 	bl	8001adc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c38:	7a7b      	ldrb	r3, [r7, #9]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	7a3b      	ldrb	r3, [r7, #8]
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	7abb      	ldrb	r3, [r7, #10]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	b2d8      	uxtb	r0, r3
 8001c58:	f107 0208 	add.w	r2, r7, #8
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	21aa      	movs	r1, #170	; 0xaa
 8001c60:	f7ff ff3c 	bl	8001adc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c64:	7a7b      	ldrb	r3, [r7, #9]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	7a3b      	ldrb	r3, [r7, #8]
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001c72:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	ee07 3a90 	vmov	s15, r3
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cb0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	ee07 3a90 	vmov	s15, r3
}
 8001cca:	eeb0 0a67 	vmov.f32	s0, s15
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f000 f960 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f000 f80d 	bl	8001d04 <HAL_InitTick>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	e001      	b.n	8001cfa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf6:	f7ff fa27 	bl	8001148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_InitTick+0x6c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_InitTick+0x70>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_InitTick+0x6c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f96d 	bl	800200e <HAL_SYSTICK_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d809      	bhi.n	8001d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 f937 	bl	8001fba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_InitTick+0x74>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e007      	b.n	8001d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e004      	b.n	8001d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e001      	b.n	8001d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000ac 	.word	0x200000ac
 8001d74:	20000094 	.word	0x20000094
 8001d78:	200000a8 	.word	0x200000a8

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	200000ac 	.word	0x200000ac
 8001da0:	20000934 	.word	0x20000934

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000934 	.word	0x20000934

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000ac 	.word	0x200000ac

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0ac      	b.n	8002194 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f8b2 	bl	80021a8 <DFSDM_GetChannelFromInstance>
 8002044:	4603      	mov	r3, r0
 8002046:	4a55      	ldr	r2, [pc, #340]	; (800219c <HAL_DFSDM_ChannelInit+0x174>)
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e09f      	b.n	8002194 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff f89b 	bl	8001190 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_DFSDM_ChannelInit+0x178>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	4a4f      	ldr	r2, [pc, #316]	; (80021a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002062:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002064:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d125      	bne.n	80020b8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4c      	ldr	r2, [pc, #304]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002072:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002076:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4948      	ldr	r1, [pc, #288]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800208c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002090:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d108      	bne.n	80020ac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800209a:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	493f      	ldr	r1, [pc, #252]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020b6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80020c6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020d6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80020dc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 020f 	bic.w	r2, r2, #15
 80020f4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6819      	ldr	r1, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800211c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f002 0207 	and.w	r2, r2, #7
 8002148:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002174:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f810 	bl	80021a8 <DFSDM_GetChannelFromInstance>
 8002188:	4602      	mov	r2, r0
 800218a:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_DFSDM_ChannelInit+0x174>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000093c 	.word	0x2000093c
 80021a0:	20000938 	.word	0x20000938
 80021a4:	40016000 	.word	0x40016000

080021a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <DFSDM_GetChannelFromInstance+0x7c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d102      	bne.n	80021be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e02b      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a19      	ldr	r2, [pc, #100]	; (8002228 <DFSDM_GetChannelFromInstance+0x80>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d102      	bne.n	80021cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80021c6:	2301      	movs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e024      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a17      	ldr	r2, [pc, #92]	; (800222c <DFSDM_GetChannelFromInstance+0x84>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d102      	bne.n	80021da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e01d      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <DFSDM_GetChannelFromInstance+0x88>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d102      	bne.n	80021e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80021e2:	2304      	movs	r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e016      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <DFSDM_GetChannelFromInstance+0x8c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d102      	bne.n	80021f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80021f0:	2305      	movs	r3, #5
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e00f      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0f      	ldr	r2, [pc, #60]	; (8002238 <DFSDM_GetChannelFromInstance+0x90>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d102      	bne.n	8002204 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80021fe:	2306      	movs	r3, #6
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e008      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a0d      	ldr	r2, [pc, #52]	; (800223c <DFSDM_GetChannelFromInstance+0x94>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800220c:	2307      	movs	r3, #7
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e001      	b.n	8002216 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002212:	2303      	movs	r3, #3
 8002214:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40016000 	.word	0x40016000
 8002228:	40016020 	.word	0x40016020
 800222c:	40016040 	.word	0x40016040
 8002230:	40016080 	.word	0x40016080
 8002234:	400160a0 	.word	0x400160a0
 8002238:	400160c0 	.word	0x400160c0
 800223c:	400160e0 	.word	0x400160e0

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e17f      	b.n	8002550 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8171 	beq.w	800254a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d118      	bne.n	8002320 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	6939      	ldr	r1, [r7, #16]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80ac 	beq.w	800254a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_GPIO_Init+0x330>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_GPIO_Init+0x330>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6613      	str	r3, [r2, #96]	; 0x60
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_GPIO_Init+0x330>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800240a:	4a5a      	ldr	r2, [pc, #360]	; (8002574 <HAL_GPIO_Init+0x334>)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002434:	d025      	beq.n	8002482 <HAL_GPIO_Init+0x242>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4f      	ldr	r2, [pc, #316]	; (8002578 <HAL_GPIO_Init+0x338>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <HAL_GPIO_Init+0x23e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4e      	ldr	r2, [pc, #312]	; (800257c <HAL_GPIO_Init+0x33c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d019      	beq.n	800247a <HAL_GPIO_Init+0x23a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4d      	ldr	r2, [pc, #308]	; (8002580 <HAL_GPIO_Init+0x340>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d013      	beq.n	8002476 <HAL_GPIO_Init+0x236>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <HAL_GPIO_Init+0x344>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00d      	beq.n	8002472 <HAL_GPIO_Init+0x232>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <HAL_GPIO_Init+0x348>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <HAL_GPIO_Init+0x22e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <HAL_GPIO_Init+0x34c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_GPIO_Init+0x22a>
 8002466:	2306      	movs	r3, #6
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800246a:	2307      	movs	r3, #7
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x244>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x244>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x244>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x244>
 8002482:	2300      	movs	r3, #0
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002494:	4937      	ldr	r1, [pc, #220]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_GPIO_Init+0x350>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c6:	4a32      	ldr	r2, [pc, #200]	; (8002590 <HAL_GPIO_Init+0x350>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_GPIO_Init+0x350>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_GPIO_Init+0x350>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_GPIO_Init+0x350>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <HAL_GPIO_Init+0x350>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_GPIO_Init+0x350>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002544:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_GPIO_Init+0x350>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f ae78 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000
 8002578:	48000400 	.word	0x48000400
 800257c:	48000800 	.word	0x48000800
 8002580:	48000c00 	.word	0x48000c00
 8002584:	48001000 	.word	0x48001000
 8002588:	48001400 	.word	0x48001400
 800258c:	48001800 	.word	0x48001800
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80025a2:	e0cd      	b.n	8002740 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025a4:	2201      	movs	r2, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80c0 	beq.w	800273a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80025ba:	4a68      	ldr	r2, [pc, #416]	; (800275c <HAL_GPIO_DeInit+0x1c8>)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025e2:	d025      	beq.n	8002630 <HAL_GPIO_DeInit+0x9c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <HAL_GPIO_DeInit+0x1cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01f      	beq.n	800262c <HAL_GPIO_DeInit+0x98>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a5d      	ldr	r2, [pc, #372]	; (8002764 <HAL_GPIO_DeInit+0x1d0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d019      	beq.n	8002628 <HAL_GPIO_DeInit+0x94>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_GPIO_DeInit+0x1d4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_GPIO_DeInit+0x90>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a5b      	ldr	r2, [pc, #364]	; (800276c <HAL_GPIO_DeInit+0x1d8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_DeInit+0x8c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <HAL_GPIO_DeInit+0x1dc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_DeInit+0x88>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a59      	ldr	r2, [pc, #356]	; (8002774 <HAL_GPIO_DeInit+0x1e0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_DeInit+0x84>
 8002614:	2306      	movs	r3, #6
 8002616:	e00c      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 8002618:	2307      	movs	r3, #7
 800261a:	e00a      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 800261c:	2305      	movs	r3, #5
 800261e:	e008      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 8002620:	2304      	movs	r3, #4
 8002622:	e006      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 8002624:	2303      	movs	r3, #3
 8002626:	e004      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 8002628:	2302      	movs	r3, #2
 800262a:	e002      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_GPIO_DeInit+0x9e>
 8002630:	2300      	movs	r3, #0
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	4093      	lsls	r3, r2
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	429a      	cmp	r2, r3
 8002640:	d132      	bne.n	80026a8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002642:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	494b      	ldr	r1, [pc, #300]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 800264c:	4013      	ands	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	4947      	ldr	r1, [pc, #284]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 800265a:	4013      	ands	r3, r2
 800265c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	4944      	ldr	r1, [pc, #272]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 8002668:	4013      	ands	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800266c:	4b42      	ldr	r3, [pc, #264]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	4940      	ldr	r1, [pc, #256]	; (8002778 <HAL_GPIO_DeInit+0x1e4>)
 8002676:	4013      	ands	r3, r2
 8002678:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800268a:	4a34      	ldr	r2, [pc, #208]	; (800275c <HAL_GPIO_DeInit+0x1c8>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	43da      	mvns	r2, r3
 800269a:	4830      	ldr	r0, [pc, #192]	; (800275c <HAL_GPIO_DeInit+0x1c8>)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	400a      	ands	r2, r1
 80026a2:	3302      	adds	r3, #2
 80026a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2103      	movs	r1, #3
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	08d2      	lsrs	r2, r2, #3
 80026dc:	4019      	ands	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3208      	adds	r2, #8
 80026e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2103      	movs	r1, #3
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	2101      	movs	r1, #1
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2103      	movs	r1, #3
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	401a      	ands	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	2101      	movs	r1, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f af2b 	bne.w	80025a4 <HAL_GPIO_DeInit+0x10>
  }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	48000c00 	.word	0x48000c00
 800276c:	48001000 	.word	0x48001000
 8002770:	48001400 	.word	0x48001400
 8002774:	48001800 	.word	0x48001800
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f806 	bl	80027dc <HAL_GPIO_EXTI_Callback>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40010400 	.word	0x40010400

080027dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e08d      	b.n	8002920 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fe fd1d 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2224      	movs	r2, #36	; 0x24
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002842:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002852:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	e006      	b.n	800287a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002878:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d108      	bne.n	8002894 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e007      	b.n	80028a4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69d9      	ldr	r1, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1a      	ldr	r2, [r3, #32]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e021      	b.n	800297e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2224      	movs	r2, #36	; 0x24
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fe fcde 	bl	8001314 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f040 80f9 	bne.w	8002ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_I2C_Mem_Write+0x34>
 80029b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0ed      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Mem_Write+0x4e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e0e6      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029de:	f7ff f9e1 	bl	8001da4 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2319      	movs	r3, #25
 80029ea:	2201      	movs	r2, #1
 80029ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fac3 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0d1      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2221      	movs	r2, #33	; 0x21
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2240      	movs	r2, #64	; 0x40
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a28:	88f8      	ldrh	r0, [r7, #6]
 8002a2a:	893a      	ldrh	r2, [r7, #8]
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4603      	mov	r3, r0
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f9d3 	bl	8002de4 <I2C_RequestMemoryWrite>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0a9      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d90e      	bls.n	8002a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fc3d 	bl	80032f0 <I2C_TransferConfig>
 8002a76:	e00f      	b.n	8002a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fc2c 	bl	80032f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fabc 	bl	800301a <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e07b      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d034      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x1c8>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d130      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa3f 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04d      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	d90e      	bls.n	8002b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	2300      	movs	r3, #0
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fbe1 	bl	80032f0 <I2C_TransferConfig>
 8002b2e:	e00f      	b.n	8002b50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fbd0 	bl	80032f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d19e      	bne.n	8002a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 faa2 	bl	80030a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e01a      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_I2C_Mem_Write+0x224>)
 8002b82:	400b      	ands	r3, r1
 8002b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	fe00e800 	.word	0xfe00e800

08002bb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	f040 80fd 	bne.w	8002dd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x34>
 8002bde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0f1      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x4e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e0ea      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c06:	f7ff f8cd 	bl	8001da4 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f9af 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d5      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2222      	movs	r2, #34	; 0x22
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c50:	88f8      	ldrh	r0, [r7, #6]
 8002c52:	893a      	ldrh	r2, [r7, #8]
 8002c54:	8979      	ldrh	r1, [r7, #10]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f913 	bl	8002e8c <I2C_RequestMemoryRead>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0ad      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2bff      	cmp	r3, #255	; 0xff
 8002c80:	d90e      	bls.n	8002ca0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	4b52      	ldr	r3, [pc, #328]	; (8002ddc <HAL_I2C_Mem_Read+0x22c>)
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fb29 	bl	80032f0 <I2C_TransferConfig>
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	8979      	ldrh	r1, [r7, #10]
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_I2C_Mem_Read+0x22c>)
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fb18 	bl	80032f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2104      	movs	r1, #4
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f956 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07c      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d034      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x1d0>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d130      	bne.n	8002d80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f927 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e04d      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2bff      	cmp	r3, #255	; 0xff
 8002d40:	d90e      	bls.n	8002d60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fac9 	bl	80032f0 <I2C_TransferConfig>
 8002d5e:	e00f      	b.n	8002d80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fab8 	bl	80032f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d19a      	bne.n	8002cc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f98a 	bl	80030a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e01a      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2220      	movs	r2, #32
 8002da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_I2C_Mem_Read+0x230>)
 8002db2:	400b      	ands	r3, r1
 8002db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	80002400 	.word	0x80002400
 8002de0:	fe00e800 	.word	0xfe00e800

08002de4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <I2C_RequestMemoryWrite+0xa4>)
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fa6f 	bl	80032f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	69b9      	ldr	r1, [r7, #24]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8ff 	bl	800301a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e02c      	b.n	8002e80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
 8002e36:	e015      	b.n	8002e64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	69b9      	ldr	r1, [r7, #24]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f8e5 	bl	800301a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e012      	b.n	8002e80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5a:	893b      	ldrh	r3, [r7, #8]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f884 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	80002000 	.word	0x80002000

08002e8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <I2C_RequestMemoryRead+0xa4>)
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fa1c 	bl	80032f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f8ac 	bl	800301a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e02c      	b.n	8002f26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed2:	893b      	ldrh	r3, [r7, #8]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
 8002edc:	e015      	b.n	8002f0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ede:	893b      	ldrh	r3, [r7, #8]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f892 	bl	800301a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e012      	b.n	8002f26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f831 	bl	8002f7c <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	80002000 	.word	0x80002000

08002f34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d103      	bne.n	8002f52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d007      	beq.n	8002f70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	619a      	str	r2, [r3, #24]
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8c:	e031      	b.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d02d      	beq.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe ff05 	bl	8001da4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d122      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d113      	bne.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e00f      	b.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d0be      	beq.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003026:	e033      	b.n	8003090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f87f 	bl	8003130 <I2C_IsErrorOccurred>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e031      	b.n	80030a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003042:	d025      	beq.n	8003090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7fe feae 	bl	8001da4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	429a      	cmp	r2, r3
 8003052:	d302      	bcc.n	800305a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11a      	bne.n	8003090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d013      	beq.n	8003090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e007      	b.n	80030a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d1c4      	bne.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b4:	e02f      	b.n	8003116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f838 	bl	8003130 <I2C_IsErrorOccurred>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e02d      	b.n	8003126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ca:	f7fe fe6b 	bl	8001da4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d302      	bcc.n	80030e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11a      	bne.n	8003116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d013      	beq.n	8003116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e007      	b.n	8003126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b20      	cmp	r3, #32
 8003122:	d1c8      	bne.n	80030b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d068      	beq.n	800322e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003164:	e049      	b.n	80031fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d045      	beq.n	80031fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7fe fe19 	bl	8001da4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d302      	bcc.n	8003184 <I2C_IsErrorOccurred+0x54>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d13a      	bne.n	80031fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003196:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	d121      	bne.n	80031ec <I2C_IsErrorOccurred+0xbc>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ae:	d01d      	beq.n	80031ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d01a      	beq.n	80031ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031c6:	f7fe fded 	bl	8001da4 <HAL_GetTick>
 80031ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031cc:	e00e      	b.n	80031ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031ce:	f7fe fde9 	bl	8001da4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b19      	cmp	r3, #25
 80031da:	d907      	bls.n	80031ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	f043 0320 	orr.w	r3, r3, #32
 80031e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80031ea:	e006      	b.n	80031fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d1e9      	bne.n	80031ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b20      	cmp	r3, #32
 8003206:	d003      	beq.n	8003210 <I2C_IsErrorOccurred+0xe0>
 8003208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0aa      	beq.n	8003166 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2220      	movs	r2, #32
 800321e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800329c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01c      	beq.n	80032de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff fe45 	bl	8002f34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <I2C_IsErrorOccurred+0x1bc>)
 80032b6:	400b      	ands	r3, r1
 80032b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80032de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3728      	adds	r7, #40	; 0x28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	fe00e800 	.word	0xfe00e800

080032f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	817b      	strh	r3, [r7, #10]
 80032fe:	4613      	mov	r3, r2
 8003300:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003308:	7a7b      	ldrb	r3, [r7, #9]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003310:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	4313      	orrs	r3, r2
 800331a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800331e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800332e:	4b08      	ldr	r3, [pc, #32]	; (8003350 <I2C_TransferConfig+0x60>)
 8003330:	430b      	orrs	r3, r1
 8003332:	43db      	mvns	r3, r3
 8003334:	ea02 0103 	and.w	r1, r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	03ff63ff 	.word	0x03ff63ff

08003354 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b20      	cmp	r3, #32
 8003368:	d138      	bne.n	80033dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003374:	2302      	movs	r3, #2
 8003376:	e032      	b.n	80033de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d139      	bne.n	8003474 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800340a:	2302      	movs	r3, #2
 800340c:	e033      	b.n	8003476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2224      	movs	r2, #36	; 0x24
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800343c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	e000      	b.n	8003476 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
  }
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003484:	b08f      	sub	sp, #60	; 0x3c
 8003486:	af0a      	add	r7, sp, #40	; 0x28
 8003488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e116      	b.n	80036c2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe f880 	bl	80015b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2203      	movs	r2, #3
 80034b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 fb9f 	bl	8005c16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	687e      	ldr	r6, [r7, #4]
 80034e0:	466d      	mov	r5, sp
 80034e2:	f106 0410 	add.w	r4, r6, #16
 80034e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80034f6:	1d33      	adds	r3, r6, #4
 80034f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fa:	6838      	ldr	r0, [r7, #0]
 80034fc:	f002 fb5f 	bl	8005bbe <USB_CoreInit>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0d7      	b.n	80036c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f002 fb8d 	bl	8005c38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	e04a      	b.n	80035ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	333d      	adds	r3, #61	; 0x3d
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	333c      	adds	r3, #60	; 0x3c
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	b298      	uxth	r0, r3
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3356      	adds	r3, #86	; 0x56
 8003560:	4602      	mov	r2, r0
 8003562:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3340      	adds	r3, #64	; 0x40
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3344      	adds	r3, #68	; 0x44
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3348      	adds	r3, #72	; 0x48
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	334c      	adds	r3, #76	; 0x4c
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	3301      	adds	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d3af      	bcc.n	8003524 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e044      	b.n	8003654 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	3301      	adds	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d3b5      	bcc.n	80035ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	687e      	ldr	r6, [r7, #4]
 8003666:	466d      	mov	r5, sp
 8003668:	f106 0410 	add.w	r4, r6, #16
 800366c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003674:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003678:	e885 0003 	stmia.w	r5, {r0, r1}
 800367c:	1d33      	adds	r3, r6, #4
 800367e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	f002 fb25 	bl	8005cd0 <USB_DevInit>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e014      	b.n	80036c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d102      	bne.n	80036b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f80a 	bl	80036ca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f002 fcc7 	bl	800604e <USB_DevDisconnect>

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	f043 0303 	orr.w	r3, r3, #3
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40007000 	.word	0x40007000

08003734 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <HAL_PWREx_GetVoltageRange+0x18>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40007000 	.word	0x40007000

08003750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375e:	d130      	bne.n	80037c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003760:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376c:	d038      	beq.n	80037e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2232      	movs	r2, #50	; 0x32
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	0c9b      	lsrs	r3, r3, #18
 8003790:	3301      	adds	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003794:	e002      	b.n	800379c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3b01      	subs	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d102      	bne.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f2      	bne.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037bc:	d110      	bne.n	80037e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e00f      	b.n	80037e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ce:	d007      	beq.n	80037e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037d8:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40007000 	.word	0x40007000
 80037f4:	20000094 	.word	0x20000094
 80037f8:	431bde83 	.word	0x431bde83

080037fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	6053      	str	r3, [r2, #4]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40007000 	.word	0x40007000

0800381c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af02      	add	r7, sp, #8
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003824:	f7fe fabe 	bl	8001da4 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e063      	b.n	80038fc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10b      	bne.n	8003858 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7fd fd87 	bl	800135c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800384e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f858 	bl	8003908 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	3b01      	subs	r3, #1
 8003868:	021a      	lsls	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	2120      	movs	r1, #32
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f850 	bl	8003924 <QSPI_WaitFlagStateUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003888:	7afb      	ldrb	r3, [r7, #11]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d131      	bne.n	80038f2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003898:	f023 0310 	bic.w	r3, r3, #16
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	0611      	lsls	r1, r2, #24
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	4311      	orrs	r1, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_QSPI_Init+0xe8>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6912      	ldr	r2, [r2, #16]
 80038be:	0411      	lsls	r1, r2, #16
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6952      	ldr	r2, [r2, #20]
 80038c4:	4311      	orrs	r1, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6992      	ldr	r2, [r2, #24]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	ffe0f8fe 	.word	0xffe0f8fe

08003908 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003934:	e01a      	b.n	800396c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d016      	beq.n	800396c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393e:	f7fe fa31 	bl	8001da4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2204      	movs	r2, #4
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e00e      	b.n	800398a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	bf14      	ite	ne
 800397a:	2301      	movne	r3, #1
 800397c:	2300      	moveq	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	429a      	cmp	r2, r3
 8003986:	d1d6      	bne.n	8003936 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e3ca      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a6:	4b97      	ldr	r3, [pc, #604]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b0:	4b94      	ldr	r3, [pc, #592]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80e4 	beq.w	8003b90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_RCC_OscConfig+0x4a>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	f040 808b 	bne.w	8003aec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	f040 8087 	bne.w	8003aec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039de:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e3a2      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_RCC_OscConfig+0x7c>
 8003a06:	4b7f      	ldr	r3, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a0e:	e005      	b.n	8003a1c <HAL_RCC_OscConfig+0x88>
 8003a10:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d223      	bcs.n	8003a68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fd55 	bl	80044d4 <RCC_SetFlashLatencyFromMSIRange>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e383      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a34:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	496d      	ldr	r1, [pc, #436]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	4968      	ldr	r1, [pc, #416]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
 8003a66:	e025      	b.n	8003ab4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a68:	4b66      	ldr	r3, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	6013      	str	r3, [r2, #0]
 8003a74:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4960      	ldr	r1, [pc, #384]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	495b      	ldr	r1, [pc, #364]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fd15 	bl	80044d4 <RCC_SetFlashLatencyFromMSIRange>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e343      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab4:	f000 fc4a 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	4950      	ldr	r1, [pc, #320]	; (8003c08 <HAL_RCC_OscConfig+0x274>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad0:	4a4e      	ldr	r2, [pc, #312]	; (8003c0c <HAL_RCC_OscConfig+0x278>)
 8003ad2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ad4:	4b4e      	ldr	r3, [pc, #312]	; (8003c10 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe f913 	bl	8001d04 <HAL_InitTick>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d052      	beq.n	8003b8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	e327      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d032      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003af4:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a42      	ldr	r2, [pc, #264]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b00:	f7fe f950 	bl	8001da4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b08:	f7fe f94c 	bl	8001da4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e310      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b1a:	4b3a      	ldr	r3, [pc, #232]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b26:	4b37      	ldr	r3, [pc, #220]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a36      	ldr	r2, [pc, #216]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b34      	ldr	r3, [pc, #208]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4931      	ldr	r1, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b44:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	492c      	ldr	r1, [pc, #176]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
 8003b58:	e01a      	b.n	8003b90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b66:	f7fe f91d 	bl	8001da4 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b6e:	f7fe f919 	bl	8001da4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e2dd      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b80:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x1da>
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d074      	beq.n	8003c86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d005      	beq.n	8003bae <HAL_RCC_OscConfig+0x21a>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d10b      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d064      	beq.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d160      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e2ba      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x24a>
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e026      	b.n	8003c2c <HAL_RCC_OscConfig+0x298>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be6:	d115      	bne.n	8003c14 <HAL_RCC_OscConfig+0x280>
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a02      	ldr	r2, [pc, #8]	; (8003c04 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x298>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08006b2c 	.word	0x08006b2c
 8003c0c:	20000094 	.word	0x20000094
 8003c10:	200000a8 	.word	0x200000a8
 8003c14:	4ba0      	ldr	r3, [pc, #640]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a9f      	ldr	r2, [pc, #636]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b9d      	ldr	r3, [pc, #628]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a9c      	ldr	r2, [pc, #624]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fe f8b6 	bl	8001da4 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe f8b2 	bl	8001da4 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e276      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	4b92      	ldr	r3, [pc, #584]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x2a8>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe f8a2 	bl	8001da4 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fe f89e 	bl	8001da4 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e262      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	4b88      	ldr	r3, [pc, #544]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x2d0>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d060      	beq.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x310>
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d116      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca4:	4b7c      	ldr	r3, [pc, #496]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_OscConfig+0x328>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e23f      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	4973      	ldr	r1, [pc, #460]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	e040      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d023      	beq.n	8003d22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cda:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6e      	ldr	r2, [pc, #440]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fe f85d 	bl	8001da4 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fe f859 	bl	8001da4 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e21d      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d00:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	495f      	ldr	r1, [pc, #380]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	e018      	b.n	8003d54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b5d      	ldr	r3, [pc, #372]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe f839 	bl	8001da4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fe f835 	bl	8001da4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1f9      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03c      	beq.n	8003dda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d68:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6e:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe f814 	bl	8001da4 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d80:	f7fe f810 	bl	8001da4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e1d4      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d92:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ef      	beq.n	8003d80 <HAL_RCC_OscConfig+0x3ec>
 8003da0:	e01b      	b.n	8003dda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da8:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fd fff7 	bl	8001da4 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fd fff3 	bl	8001da4 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1b7      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dcc:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ef      	bne.n	8003dba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a6 	beq.w	8003f34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dec:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d118      	bne.n	8003e52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2c:	f7fd ffba 	bl	8001da4 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e34:	f7fd ffb6 	bl	8001da4 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e17a      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <HAL_RCC_OscConfig+0x508>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d108      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4d8>
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	4a0d      	ldr	r2, [pc, #52]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6a:	e029      	b.n	8003ec0 <HAL_RCC_OscConfig+0x52c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d115      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x50c>
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <HAL_RCC_OscConfig+0x504>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x52c>
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40007000 	.word	0x40007000
 8003ea0:	4b9c      	ldr	r3, [pc, #624]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	4a9b      	ldr	r2, [pc, #620]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb0:	4b98      	ldr	r3, [pc, #608]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	4a97      	ldr	r2, [pc, #604]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d016      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd ff6c 	bl	8001da4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fd ff68 	bl	8001da4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e12a      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	4b8b      	ldr	r3, [pc, #556]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ed      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x53c>
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fd ff55 	bl	8001da4 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fd ff51 	bl	8001da4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e113      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f14:	4b7f      	ldr	r3, [pc, #508]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1ed      	bne.n	8003efe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b7a      	ldr	r3, [pc, #488]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	4a79      	ldr	r2, [pc, #484]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80fe 	beq.w	800413a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	f040 80d0 	bne.w	80040e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f48:	4b72      	ldr	r3, [pc, #456]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f003 0203 	and.w	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d130      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	3b01      	subs	r3, #1
 8003f68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d127      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d11f      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f88:	2a07      	cmp	r2, #7
 8003f8a:	bf14      	ite	ne
 8003f8c:	2201      	movne	r2, #1
 8003f8e:	2200      	moveq	r2, #0
 8003f90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d109      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d06e      	beq.n	800409c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d069      	beq.n	8004098 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fd0:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0ad      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fe0:	4b4c      	ldr	r3, [pc, #304]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a4b      	ldr	r2, [pc, #300]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fec:	f7fd feda 	bl	8001da4 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fd fed6 	bl	8001da4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e09a      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004006:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004012:	4b40      	ldr	r3, [pc, #256]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	4b40      	ldr	r3, [pc, #256]	; (8004118 <HAL_RCC_OscConfig+0x784>)
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004022:	3a01      	subs	r2, #1
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	4311      	orrs	r1, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800402c:	0212      	lsls	r2, r2, #8
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004034:	0852      	lsrs	r2, r2, #1
 8004036:	3a01      	subs	r2, #1
 8004038:	0552      	lsls	r2, r2, #21
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004040:	0852      	lsrs	r2, r2, #1
 8004042:	3a01      	subs	r2, #1
 8004044:	0652      	lsls	r2, r2, #25
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800404c:	0912      	lsrs	r2, r2, #4
 800404e:	0452      	lsls	r2, r2, #17
 8004050:	430a      	orrs	r2, r1
 8004052:	4930      	ldr	r1, [pc, #192]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8004054:	4313      	orrs	r3, r2
 8004056:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004058:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004064:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004070:	f7fd fe98 	bl	8001da4 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd fe94 	bl	8001da4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e058      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004096:	e050      	b.n	800413a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04f      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d148      	bne.n	800413a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040a8:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040c0:	f7fd fe70 	bl	8001da4 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fe6c 	bl	8001da4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e030      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x734>
 80040e6:	e028      	b.n	800413a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	d023      	beq.n	8004136 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a08      	ldr	r2, [pc, #32]	; (8004114 <HAL_RCC_OscConfig+0x780>)
 80040f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd fe53 	bl	8001da4 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004100:	e00c      	b.n	800411c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004102:	f7fd fe4f 	bl	8001da4 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d905      	bls.n	800411c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e013      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
 8004114:	40021000 	.word	0x40021000
 8004118:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_OscConfig+0x7b0>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ec      	bne.n	8004102 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_OscConfig+0x7b0>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4905      	ldr	r1, [pc, #20]	; (8004144 <HAL_RCC_OscConfig+0x7b0>)
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_OscConfig+0x7b4>)
 8004130:	4013      	ands	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
 8004134:	e001      	b.n	800413a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	feeefffc 	.word	0xfeeefffc

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0e7      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b75      	ldr	r3, [pc, #468]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d910      	bls.n	8004190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b72      	ldr	r3, [pc, #456]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 0207 	bic.w	r2, r3, #7
 8004176:	4970      	ldr	r1, [pc, #448]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	4b6e      	ldr	r3, [pc, #440]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0cf      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	4b66      	ldr	r3, [pc, #408]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d908      	bls.n	80041be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b63      	ldr	r3, [pc, #396]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4960      	ldr	r1, [pc, #384]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d04c      	beq.n	8004264 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d2:	4b5a      	ldr	r3, [pc, #360]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d121      	bne.n	8004222 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0a6      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ea:	4b54      	ldr	r3, [pc, #336]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d115      	bne.n	8004222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e09a      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004202:	4b4e      	ldr	r3, [pc, #312]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e08e      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004212:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e086      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b46      	ldr	r3, [pc, #280]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4943      	ldr	r1, [pc, #268]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fd fdb6 	bl	8001da4 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fd fdb2 	bl	8001da4 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e06e      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427c:	429a      	cmp	r2, r3
 800427e:	d208      	bcs.n	8004292 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b2e      	ldr	r3, [pc, #184]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	492b      	ldr	r1, [pc, #172]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d210      	bcs.n	80042c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 0207 	bic.w	r2, r3, #7
 80042a8:	4923      	ldr	r1, [pc, #140]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_ClockConfig+0x1ec>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e036      	b.n	8004330 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	4918      	ldr	r1, [pc, #96]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4910      	ldr	r1, [pc, #64]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004300:	f000 f824 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	490b      	ldr	r1, [pc, #44]	; (8004340 <HAL_RCC_ClockConfig+0x1f4>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	4a09      	ldr	r2, [pc, #36]	; (8004344 <HAL_RCC_ClockConfig+0x1f8>)
 800431e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1fc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fd fced 	bl	8001d04 <HAL_InitTick>
 800432a:	4603      	mov	r3, r0
 800432c:	72fb      	strb	r3, [r7, #11]

  return status;
 800432e:	7afb      	ldrb	r3, [r7, #11]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40022000 	.word	0x40022000
 800433c:	40021000 	.word	0x40021000
 8004340:	08006b2c 	.word	0x08006b2c
 8004344:	20000094 	.word	0x20000094
 8004348:	200000a8 	.word	0x200000a8

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004364:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x34>
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d121      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d11e      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e005      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_RCC_GetSysClockFreq+0x110>)
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e004      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_RCC_GetSysClockFreq+0x114>)
 80043d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	d134      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d003      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0xac>
 80043f0:	e005      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_RCC_GetSysClockFreq+0x110>)
 80043f4:	617b      	str	r3, [r7, #20]
      break;
 80043f6:	e005      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_RCC_GetSysClockFreq+0x114>)
 80043fa:	617b      	str	r3, [r7, #20]
      break;
 80043fc:	e002      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	617b      	str	r3, [r7, #20]
      break;
 8004402:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	3301      	adds	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	fb03 f202 	mul.w	r2, r3, r2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	0e5b      	lsrs	r3, r3, #25
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	3301      	adds	r3, #1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004444:	69bb      	ldr	r3, [r7, #24]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	08006b44 	.word	0x08006b44
 800445c:	00f42400 	.word	0x00f42400
 8004460:	007a1200 	.word	0x007a1200

08004464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000094 	.word	0x20000094

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	08006b3c 	.word	0x08006b3c

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044ac:	f7ff ffda 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0adb      	lsrs	r3, r3, #11
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	08006b3c 	.word	0x08006b3c

080044d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044ec:	f7ff f922 	bl	8003734 <HAL_PWREx_GetVoltageRange>
 80044f0:	6178      	str	r0, [r7, #20]
 80044f2:	e014      	b.n	800451e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a24      	ldr	r2, [pc, #144]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004500:	4b22      	ldr	r3, [pc, #136]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800450c:	f7ff f912 	bl	8003734 <HAL_PWREx_GetVoltageRange>
 8004510:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d10b      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d919      	bls.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2ba0      	cmp	r3, #160	; 0xa0
 8004530:	d902      	bls.n	8004538 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004532:	2302      	movs	r3, #2
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e013      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004538:	2301      	movs	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e010      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d902      	bls.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004544:	2303      	movs	r3, #3
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e00a      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d102      	bne.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004550:	2302      	movs	r3, #2
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	e004      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b70      	cmp	r3, #112	; 0x70
 800455a:	d101      	bne.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800455c:	2301      	movs	r3, #1
 800455e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 0207 	bic.w	r2, r3, #7
 8004568:	4909      	ldr	r1, [pc, #36]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d001      	beq.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	40022000 	.word	0x40022000

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800459c:	2300      	movs	r3, #0
 800459e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d041      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b8:	d02a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045be:	d824      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c4:	d008      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ca:	d81e      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d4:	d010      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045d6:	e018      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045d8:	4b86      	ldr	r3, [pc, #536]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a85      	ldr	r2, [pc, #532]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e4:	e015      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 facb 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f6:	e00c      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3320      	adds	r3, #32
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fbb6 	bl	8004d70 <RCCEx_PLLSAI2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	74fb      	strb	r3, [r7, #19]
      break;
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004610:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004618:	4b76      	ldr	r3, [pc, #472]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004626:	4973      	ldr	r1, [pc, #460]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800462e:	e001      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d041      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004644:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004648:	d02a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800464a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800464e:	d824      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004654:	d008      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800465a:	d81e      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004664:	d010      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004666:	e018      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004668:	4b62      	ldr	r3, [pc, #392]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a61      	ldr	r2, [pc, #388]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004672:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004674:	e015      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fa83 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004686:	e00c      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3320      	adds	r3, #32
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fb6e 	bl	8004d70 <RCCEx_PLLSAI2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004698:	e003      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	74fb      	strb	r3, [r7, #19]
      break;
 800469e:	e000      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046a8:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	494f      	ldr	r1, [pc, #316]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046be:	e001      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a0 	beq.w	8004812 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046d6:	4b47      	ldr	r3, [pc, #284]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046e6:	2300      	movs	r3, #0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	4a40      	ldr	r2, [pc, #256]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6593      	str	r3, [r2, #88]	; 0x58
 80046f8:	4b3e      	ldr	r3, [pc, #248]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004704:	2301      	movs	r3, #1
 8004706:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3a      	ldr	r2, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004714:	f7fd fb46 	bl	8001da4 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800471a:	e009      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fd fb42 	bl	8001da4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d902      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	74fb      	strb	r3, [r7, #19]
        break;
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ef      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d15c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004742:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	429a      	cmp	r2, r3
 800475e:	d019      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800476c:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800477c:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800478c:	4a19      	ldr	r2, [pc, #100]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479e:	f7fd fb01 	bl	8001da4 <HAL_GetTick>
 80047a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a4:	e00b      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fd fafd 	bl	8001da4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d902      	bls.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	74fb      	strb	r3, [r7, #19]
            break;
 80047bc:	e006      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ec      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e2:	4904      	ldr	r1, [pc, #16]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ea:	e009      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	74bb      	strb	r3, [r7, #18]
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7cfb      	ldrb	r3, [r7, #19]
 80047fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004800:	7c7b      	ldrb	r3, [r7, #17]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d105      	bne.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004806:	4b9e      	ldr	r3, [pc, #632]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	4a9d      	ldr	r2, [pc, #628]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004810:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481e:	4b98      	ldr	r3, [pc, #608]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004824:	f023 0203 	bic.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	4994      	ldr	r1, [pc, #592]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004840:	4b8f      	ldr	r3, [pc, #572]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	f023 020c 	bic.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	498c      	ldr	r1, [pc, #560]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004862:	4b87      	ldr	r3, [pc, #540]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	4983      	ldr	r1, [pc, #524]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004884:	4b7e      	ldr	r3, [pc, #504]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	497b      	ldr	r1, [pc, #492]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a6:	4b76      	ldr	r3, [pc, #472]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b4:	4972      	ldr	r1, [pc, #456]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048c8:	4b6d      	ldr	r3, [pc, #436]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	496a      	ldr	r1, [pc, #424]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ea:	4b65      	ldr	r3, [pc, #404]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	4961      	ldr	r1, [pc, #388]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800490c:	4b5c      	ldr	r3, [pc, #368]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491a:	4959      	ldr	r1, [pc, #356]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492e:	4b54      	ldr	r3, [pc, #336]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	4950      	ldr	r1, [pc, #320]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004950:	4b4b      	ldr	r3, [pc, #300]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	4948      	ldr	r1, [pc, #288]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004972:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	493f      	ldr	r1, [pc, #252]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d028      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004994:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a2:	4937      	ldr	r1, [pc, #220]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a31      	ldr	r2, [pc, #196]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
 80049c0:	e011      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3304      	adds	r3, #4
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8d8 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d028      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	491f      	ldr	r1, [pc, #124]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a12:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	4a1a      	ldr	r2, [pc, #104]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a1c:	60d3      	str	r3, [r2, #12]
 8004a1e:	e011      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f8a9 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02b      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5e:	4908      	ldr	r1, [pc, #32]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a02      	ldr	r2, [pc, #8]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
 8004a7c:	e014      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2101      	movs	r1, #1
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f877 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac2:	4928      	ldr	r1, [pc, #160]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad2:	d10d      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f854 	bl	8004b88 <RCCEx_PLLSAI1_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d014      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	74bb      	strb	r3, [r7, #18]
 8004aee:	e011      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3320      	adds	r3, #32
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f935 	bl	8004d70 <RCCEx_PLLSAI2_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2e:	490d      	ldr	r1, [pc, #52]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b52:	4904      	ldr	r1, [pc, #16]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000

08004b68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b72:	f043 0304 	orr.w	r3, r3, #4
 8004b76:	6013      	str	r3, [r2, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000

08004b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b96:	4b75      	ldr	r3, [pc, #468]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ba2:	4b72      	ldr	r3, [pc, #456]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0203 	and.w	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d10d      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d009      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bba:	4b6c      	ldr	r3, [pc, #432]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d047      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
 8004bd2:	e044      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d018      	beq.n	8004c0e <RCCEx_PLLSAI1_Config+0x86>
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d825      	bhi.n	8004c2c <RCCEx_PLLSAI1_Config+0xa4>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d002      	beq.n	8004bea <RCCEx_PLLSAI1_Config+0x62>
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d009      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0x74>
 8004be8:	e020      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bea:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfa:	e01a      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bfc:	4b5b      	ldr	r3, [pc, #364]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d116      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0c:	e013      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c0e:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c1a:	4b54      	ldr	r3, [pc, #336]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c2a:	e006      	b.n	8004c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e004      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6819      	ldr	r1, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	430b      	orrs	r3, r1
 8004c58:	4944      	ldr	r1, [pc, #272]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d17d      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c64:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a40      	ldr	r2, [pc, #256]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd f898 	bl	8001da4 <HAL_GetTick>
 8004c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c76:	e009      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c78:	f7fd f894 	bl	8001da4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d902      	bls.n	8004c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	73fb      	strb	r3, [r7, #15]
        break;
 8004c8a:	e005      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c8c:	4b37      	ldr	r3, [pc, #220]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ef      	bne.n	8004c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d160      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d111      	bne.n	8004cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6892      	ldr	r2, [r2, #8]
 8004cb4:	0211      	lsls	r1, r2, #8
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68d2      	ldr	r2, [r2, #12]
 8004cba:	0912      	lsrs	r2, r2, #4
 8004cbc:	0452      	lsls	r2, r2, #17
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	492a      	ldr	r1, [pc, #168]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
 8004cc6:	e027      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d112      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cce:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6892      	ldr	r2, [r2, #8]
 8004cde:	0211      	lsls	r1, r2, #8
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6912      	ldr	r2, [r2, #16]
 8004ce4:	0852      	lsrs	r2, r2, #1
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	0552      	lsls	r2, r2, #21
 8004cea:	430a      	orrs	r2, r1
 8004cec:	491f      	ldr	r1, [pc, #124]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
 8004cf2:	e011      	b.n	8004d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6952      	ldr	r2, [r2, #20]
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0652      	lsls	r2, r2, #25
 8004d10:	430a      	orrs	r2, r1
 8004d12:	4916      	ldr	r1, [pc, #88]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d18:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7fd f83e 	bl	8001da4 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d2a:	e009      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d2c:	f7fd f83a 	bl	8001da4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d902      	bls.n	8004d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d3e:	e005      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0ef      	beq.n	8004d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	4904      	ldr	r1, [pc, #16]	; (8004d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000

08004d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d018      	beq.n	8004dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d8a:	4b67      	ldr	r3, [pc, #412]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0203 	and.w	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d10d      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004da2:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
       ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d047      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	e044      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d018      	beq.n	8004df6 <RCCEx_PLLSAI2_Config+0x86>
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d825      	bhi.n	8004e14 <RCCEx_PLLSAI2_Config+0xa4>
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d002      	beq.n	8004dd2 <RCCEx_PLLSAI2_Config+0x62>
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d009      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x74>
 8004dd0:	e020      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dd2:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d11d      	bne.n	8004e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de2:	e01a      	b.n	8004e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d116      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df4:	e013      	b.n	8004e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e12:	e006      	b.n	8004e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e004      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	4939      	ldr	r1, [pc, #228]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d167      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a35      	ldr	r2, [pc, #212]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fc ffa4 	bl	8001da4 <HAL_GetTick>
 8004e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e5e:	e009      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e60:	f7fc ffa0 	bl	8001da4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d902      	bls.n	8004e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	73fb      	strb	r3, [r7, #15]
        break;
 8004e72:	e005      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ef      	bne.n	8004e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d14a      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d111      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e8c:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6892      	ldr	r2, [r2, #8]
 8004e9c:	0211      	lsls	r1, r2, #8
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68d2      	ldr	r2, [r2, #12]
 8004ea2:	0912      	lsrs	r2, r2, #4
 8004ea4:	0452      	lsls	r2, r2, #17
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	614b      	str	r3, [r1, #20]
 8004eae:	e011      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	0211      	lsls	r1, r2, #8
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6912      	ldr	r2, [r2, #16]
 8004ec6:	0852      	lsrs	r2, r2, #1
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0652      	lsls	r2, r2, #25
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4916      	ldr	r1, [pc, #88]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fc ff60 	bl	8001da4 <HAL_GetTick>
 8004ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee6:	e009      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ee8:	f7fc ff5c 	bl	8001da4 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d902      	bls.n	8004efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8004efa:	e005      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004efc:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ef      	beq.n	8004ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4904      	ldr	r1, [pc, #16]	; (8004f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000

08004f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e095      	b.n	800506a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4e:	d009      	beq.n	8004f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
 8004f56:	e005      	b.n	8004f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc fa30 	bl	80013e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa4:	d902      	bls.n	8004fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e002      	b.n	8004fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fba:	d007      	beq.n	8004fcc <HAL_SPI_Init+0xa0>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fc4:	d002      	beq.n	8004fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	ea42 0103 	orr.w	r1, r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	0c1b      	lsrs	r3, r3, #16
 8005028:	f003 0204 	and.w	r2, r3, #4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005048:	ea42 0103 	orr.w	r1, r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e040      	b.n	8005106 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fc f9e9 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2224      	movs	r2, #36	; 0x24
 800509e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb6b 	bl	8005794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f8b0 	bl	8005224 <UART_SetConfig>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e01b      	b.n	8005106 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fbea 	bl	80058d8 <UART_CheckIdleState>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08a      	sub	sp, #40	; 0x28
 8005112:	af02      	add	r7, sp, #8
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	2b20      	cmp	r3, #32
 8005124:	d178      	bne.n	8005218 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Transmit+0x24>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e071      	b.n	800521a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2221      	movs	r2, #33	; 0x21
 8005142:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005144:	f7fc fe2e 	bl	8001da4 <HAL_GetTick>
 8005148:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d108      	bne.n	8005176 <HAL_UART_Transmit+0x68>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e003      	b.n	800517e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800517e:	e030      	b.n	80051e2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2200      	movs	r2, #0
 8005188:	2180      	movs	r1, #128	; 0x80
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fc4c 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e03c      	b.n	800521a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b2:	b292      	uxth	r2, r2
 80051b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3302      	adds	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e008      	b.n	80051d0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	b292      	uxth	r2, r2
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3301      	adds	r3, #1
 80051ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1c8      	bne.n	8005180 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2140      	movs	r1, #64	; 0x40
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fc15 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e005      	b.n	800521a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b08a      	sub	sp, #40	; 0x28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	431a      	orrs	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4ba4      	ldr	r3, [pc, #656]	; (80054e4 <UART_SetConfig+0x2c0>)
 8005254:	4013      	ands	r3, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525c:	430b      	orrs	r3, r1
 800525e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a99      	ldr	r2, [pc, #612]	; (80054e8 <UART_SetConfig+0x2c4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	4313      	orrs	r3, r2
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a90      	ldr	r2, [pc, #576]	; (80054ec <UART_SetConfig+0x2c8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d126      	bne.n	80052fc <UART_SetConfig+0xd8>
 80052ae:	4b90      	ldr	r3, [pc, #576]	; (80054f0 <UART_SetConfig+0x2cc>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0xd0>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0xa0>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052d5 	.word	0x080052d5
 80052c8:	080052e5 	.word	0x080052e5
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052ed 	.word	0x080052ed
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e116      	b.n	800550a <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	e112      	b.n	800550a <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e10e      	b.n	800550a <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f2:	e10a      	b.n	800550a <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e106      	b.n	800550a <UART_SetConfig+0x2e6>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7c      	ldr	r2, [pc, #496]	; (80054f4 <UART_SetConfig+0x2d0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d138      	bne.n	8005378 <UART_SetConfig+0x154>
 8005306:	4b7a      	ldr	r3, [pc, #488]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f003 030c 	and.w	r3, r3, #12
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d82d      	bhi.n	8005370 <UART_SetConfig+0x14c>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0xf8>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005351 	.word	0x08005351
 8005320:	08005371 	.word	0x08005371
 8005324:	08005371 	.word	0x08005371
 8005328:	08005371 	.word	0x08005371
 800532c:	08005361 	.word	0x08005361
 8005330:	08005371 	.word	0x08005371
 8005334:	08005371 	.word	0x08005371
 8005338:	08005371 	.word	0x08005371
 800533c:	08005359 	.word	0x08005359
 8005340:	08005371 	.word	0x08005371
 8005344:	08005371 	.word	0x08005371
 8005348:	08005371 	.word	0x08005371
 800534c:	08005369 	.word	0x08005369
 8005350:	2300      	movs	r3, #0
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e0d8      	b.n	800550a <UART_SetConfig+0x2e6>
 8005358:	2302      	movs	r3, #2
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535e:	e0d4      	b.n	800550a <UART_SetConfig+0x2e6>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e0d0      	b.n	800550a <UART_SetConfig+0x2e6>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e0cc      	b.n	800550a <UART_SetConfig+0x2e6>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e0c8      	b.n	800550a <UART_SetConfig+0x2e6>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5e      	ldr	r2, [pc, #376]	; (80054f8 <UART_SetConfig+0x2d4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d125      	bne.n	80053ce <UART_SetConfig+0x1aa>
 8005382:	4b5b      	ldr	r3, [pc, #364]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d016      	beq.n	80053be <UART_SetConfig+0x19a>
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d818      	bhi.n	80053c6 <UART_SetConfig+0x1a2>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d00a      	beq.n	80053ae <UART_SetConfig+0x18a>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d814      	bhi.n	80053c6 <UART_SetConfig+0x1a2>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <UART_SetConfig+0x182>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d008      	beq.n	80053b6 <UART_SetConfig+0x192>
 80053a4:	e00f      	b.n	80053c6 <UART_SetConfig+0x1a2>
 80053a6:	2300      	movs	r3, #0
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	e0ad      	b.n	800550a <UART_SetConfig+0x2e6>
 80053ae:	2302      	movs	r3, #2
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b4:	e0a9      	b.n	800550a <UART_SetConfig+0x2e6>
 80053b6:	2304      	movs	r3, #4
 80053b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053bc:	e0a5      	b.n	800550a <UART_SetConfig+0x2e6>
 80053be:	2308      	movs	r3, #8
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c4:	e0a1      	b.n	800550a <UART_SetConfig+0x2e6>
 80053c6:	2310      	movs	r3, #16
 80053c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053cc:	e09d      	b.n	800550a <UART_SetConfig+0x2e6>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <UART_SetConfig+0x2d8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d125      	bne.n	8005424 <UART_SetConfig+0x200>
 80053d8:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <UART_SetConfig+0x2cc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e2:	2bc0      	cmp	r3, #192	; 0xc0
 80053e4:	d016      	beq.n	8005414 <UART_SetConfig+0x1f0>
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d818      	bhi.n	800541c <UART_SetConfig+0x1f8>
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d00a      	beq.n	8005404 <UART_SetConfig+0x1e0>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d814      	bhi.n	800541c <UART_SetConfig+0x1f8>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <UART_SetConfig+0x1d8>
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d008      	beq.n	800540c <UART_SetConfig+0x1e8>
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x1f8>
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e082      	b.n	800550a <UART_SetConfig+0x2e6>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e07e      	b.n	800550a <UART_SetConfig+0x2e6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e07a      	b.n	800550a <UART_SetConfig+0x2e6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e076      	b.n	800550a <UART_SetConfig+0x2e6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e072      	b.n	800550a <UART_SetConfig+0x2e6>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a35      	ldr	r2, [pc, #212]	; (8005500 <UART_SetConfig+0x2dc>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d12a      	bne.n	8005484 <UART_SetConfig+0x260>
 800542e:	4b30      	ldr	r3, [pc, #192]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d01a      	beq.n	8005474 <UART_SetConfig+0x250>
 800543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005442:	d81b      	bhi.n	800547c <UART_SetConfig+0x258>
 8005444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005448:	d00c      	beq.n	8005464 <UART_SetConfig+0x240>
 800544a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800544e:	d815      	bhi.n	800547c <UART_SetConfig+0x258>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <UART_SetConfig+0x238>
 8005454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005458:	d008      	beq.n	800546c <UART_SetConfig+0x248>
 800545a:	e00f      	b.n	800547c <UART_SetConfig+0x258>
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e052      	b.n	800550a <UART_SetConfig+0x2e6>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e04e      	b.n	800550a <UART_SetConfig+0x2e6>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e04a      	b.n	800550a <UART_SetConfig+0x2e6>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e046      	b.n	800550a <UART_SetConfig+0x2e6>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e042      	b.n	800550a <UART_SetConfig+0x2e6>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <UART_SetConfig+0x2c4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d13a      	bne.n	8005504 <UART_SetConfig+0x2e0>
 800548e:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <UART_SetConfig+0x2cc>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800549c:	d01a      	beq.n	80054d4 <UART_SetConfig+0x2b0>
 800549e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054a2:	d81b      	bhi.n	80054dc <UART_SetConfig+0x2b8>
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a8:	d00c      	beq.n	80054c4 <UART_SetConfig+0x2a0>
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d815      	bhi.n	80054dc <UART_SetConfig+0x2b8>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <UART_SetConfig+0x298>
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b8:	d008      	beq.n	80054cc <UART_SetConfig+0x2a8>
 80054ba:	e00f      	b.n	80054dc <UART_SetConfig+0x2b8>
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c2:	e022      	b.n	800550a <UART_SetConfig+0x2e6>
 80054c4:	2302      	movs	r3, #2
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e01e      	b.n	800550a <UART_SetConfig+0x2e6>
 80054cc:	2304      	movs	r3, #4
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e01a      	b.n	800550a <UART_SetConfig+0x2e6>
 80054d4:	2308      	movs	r3, #8
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e016      	b.n	800550a <UART_SetConfig+0x2e6>
 80054dc:	2310      	movs	r3, #16
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e012      	b.n	800550a <UART_SetConfig+0x2e6>
 80054e4:	efff69f3 	.word	0xefff69f3
 80054e8:	40008000 	.word	0x40008000
 80054ec:	40013800 	.word	0x40013800
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40004400 	.word	0x40004400
 80054f8:	40004800 	.word	0x40004800
 80054fc:	40004c00 	.word	0x40004c00
 8005500:	40005000 	.word	0x40005000
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a9f      	ldr	r2, [pc, #636]	; (800578c <UART_SetConfig+0x568>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d17a      	bne.n	800560a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005518:	2b08      	cmp	r3, #8
 800551a:	d824      	bhi.n	8005566 <UART_SetConfig+0x342>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <UART_SetConfig+0x300>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	08005549 	.word	0x08005549
 8005528:	08005567 	.word	0x08005567
 800552c:	08005551 	.word	0x08005551
 8005530:	08005567 	.word	0x08005567
 8005534:	08005557 	.word	0x08005557
 8005538:	08005567 	.word	0x08005567
 800553c:	08005567 	.word	0x08005567
 8005540:	08005567 	.word	0x08005567
 8005544:	0800555f 	.word	0x0800555f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005548:	f7fe ff98 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 800554c:	61f8      	str	r0, [r7, #28]
        break;
 800554e:	e010      	b.n	8005572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005550:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <UART_SetConfig+0x56c>)
 8005552:	61fb      	str	r3, [r7, #28]
        break;
 8005554:	e00d      	b.n	8005572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005556:	f7fe fef9 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800555a:	61f8      	str	r0, [r7, #28]
        break;
 800555c:	e009      	b.n	8005572 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005562:	61fb      	str	r3, [r7, #28]
        break;
 8005564:	e005      	b.n	8005572 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80fb 	beq.w	8005770 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	4413      	add	r3, r2
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	429a      	cmp	r2, r3
 8005588:	d305      	bcc.n	8005596 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	429a      	cmp	r2, r3
 8005594:	d903      	bls.n	800559e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800559c:	e0e8      	b.n	8005770 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2200      	movs	r2, #0
 80055a2:	461c      	mov	r4, r3
 80055a4:	4615      	mov	r5, r2
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	022b      	lsls	r3, r5, #8
 80055b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055b4:	0222      	lsls	r2, r4, #8
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	6849      	ldr	r1, [r1, #4]
 80055ba:	0849      	lsrs	r1, r1, #1
 80055bc:	2000      	movs	r0, #0
 80055be:	4688      	mov	r8, r1
 80055c0:	4681      	mov	r9, r0
 80055c2:	eb12 0a08 	adds.w	sl, r2, r8
 80055c6:	eb43 0b09 	adc.w	fp, r3, r9
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d8:	4650      	mov	r0, sl
 80055da:	4659      	mov	r1, fp
 80055dc:	f7fb f82c 	bl	8000638 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4613      	mov	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ee:	d308      	bcc.n	8005602 <UART_SetConfig+0x3de>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d204      	bcs.n	8005602 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e0b6      	b.n	8005770 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005608:	e0b2      	b.n	8005770 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005612:	d15e      	bne.n	80056d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005618:	2b08      	cmp	r3, #8
 800561a:	d828      	bhi.n	800566e <UART_SetConfig+0x44a>
 800561c:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x400>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005649 	.word	0x08005649
 8005628:	08005651 	.word	0x08005651
 800562c:	08005659 	.word	0x08005659
 8005630:	0800566f 	.word	0x0800566f
 8005634:	0800565f 	.word	0x0800565f
 8005638:	0800566f 	.word	0x0800566f
 800563c:	0800566f 	.word	0x0800566f
 8005640:	0800566f 	.word	0x0800566f
 8005644:	08005667 	.word	0x08005667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005648:	f7fe ff18 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 800564c:	61f8      	str	r0, [r7, #28]
        break;
 800564e:	e014      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005650:	f7fe ff2a 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8005654:	61f8      	str	r0, [r7, #28]
        break;
 8005656:	e010      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005658:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <UART_SetConfig+0x56c>)
 800565a:	61fb      	str	r3, [r7, #28]
        break;
 800565c:	e00d      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800565e:	f7fe fe75 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8005662:	61f8      	str	r0, [r7, #28]
        break;
 8005664:	e009      	b.n	800567a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566a:	61fb      	str	r3, [r7, #28]
        break;
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d077      	beq.n	8005770 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	005a      	lsls	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	085b      	lsrs	r3, r3, #1
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d916      	bls.n	80056ca <UART_SetConfig+0x4a6>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d212      	bcs.n	80056ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f023 030f 	bic.w	r3, r3, #15
 80056ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	4313      	orrs	r3, r2
 80056be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	8afa      	ldrh	r2, [r7, #22]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e052      	b.n	8005770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056d0:	e04e      	b.n	8005770 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d827      	bhi.n	800572a <UART_SetConfig+0x506>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x4bc>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe feba 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005708:	61f8      	str	r0, [r7, #28]
        break;
 800570a:	e014      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fe fecc 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8005710:	61f8      	str	r0, [r7, #28]
        break;
 8005712:	e010      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <UART_SetConfig+0x56c>)
 8005716:	61fb      	str	r3, [r7, #28]
        break;
 8005718:	e00d      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe fe17 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800571e:	61f8      	str	r0, [r7, #28]
        break;
 8005720:	e009      	b.n	8005736 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61fb      	str	r3, [r7, #28]
        break;
 8005728:	e005      	b.n	8005736 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005734:	bf00      	nop
    }

    if (pclk != 0U)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d019      	beq.n	8005770 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085a      	lsrs	r2, r3, #1
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d909      	bls.n	800576a <UART_SetConfig+0x546>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d205      	bcs.n	800576a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e002      	b.n	8005770 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800577c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005780:	4618      	mov	r0, r3
 8005782:	3728      	adds	r7, #40	; 0x28
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	40008000 	.word	0x40008000
 8005790:	00f42400 	.word	0x00f42400

08005794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01a      	beq.n	80058aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005892:	d10a      	bne.n	80058aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	605a      	str	r2, [r3, #4]
  }
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b098      	sub	sp, #96	; 0x60
 80058dc:	af02      	add	r7, sp, #8
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058e8:	f7fc fa5c 	bl	8001da4 <HAL_GetTick>
 80058ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d12e      	bne.n	800595a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005904:	2200      	movs	r2, #0
 8005906:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f88c 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d021      	beq.n	800595a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592a:	653b      	str	r3, [r7, #80]	; 0x50
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005934:	647b      	str	r3, [r7, #68]	; 0x44
 8005936:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800593a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e6      	bne.n	8005916 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e062      	b.n	8005a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b04      	cmp	r3, #4
 8005966:	d149      	bne.n	80059fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005970:	2200      	movs	r2, #0
 8005972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f856 	bl	8005a28 <UART_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d03c      	beq.n	80059fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	623b      	str	r3, [r7, #32]
   return(result);
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	633b      	str	r3, [r7, #48]	; 0x30
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0301 	bic.w	r3, r3, #1
 80059ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d4:	61fa      	str	r2, [r7, #28]
 80059d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e011      	b.n	8005a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3758      	adds	r7, #88	; 0x58
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a38:	e049      	b.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d045      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fc f9af 	bl	8001da4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e048      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d031      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d110      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f838 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e029      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa8:	d111      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f81e 	bl	8005af6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e00f      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d0a6      	beq.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b095      	sub	sp, #84	; 0x54
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e6      	bne.n	8005afe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d118      	bne.n	8005b9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	613b      	str	r3, [r7, #16]
   return(result);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bb2:	bf00      	nop
 8005bb4:	3754      	adds	r7, #84	; 0x54
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	f107 001c 	add.w	r0, r7, #28
 8005bcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa65 	bl	80060ac <USB_CoreReset>
 8005be2:	4603      	mov	r3, r0
 8005be4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf8:	e005      	b.n	8005c06 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c12:	b004      	add	sp, #16
 8005c14:	4770      	bx	lr

08005c16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 0201 	bic.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d115      	bne.n	8005c86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c66:	2001      	movs	r0, #1
 8005c68:	f7fc f8a8 	bl	8001dbc <HAL_Delay>
      ms++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa0c 	bl	8006090 <USB_GetMode>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d01e      	beq.n	8005cbc <USB_SetCurrentMode+0x84>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b31      	cmp	r3, #49	; 0x31
 8005c82:	d9f0      	bls.n	8005c66 <USB_SetCurrentMode+0x2e>
 8005c84:	e01a      	b.n	8005cbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d115      	bne.n	8005cb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7fc f88f 	bl	8001dbc <HAL_Delay>
      ms++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f9f3 	bl	8006090 <USB_GetMode>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <USB_SetCurrentMode+0x84>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b31      	cmp	r3, #49	; 0x31
 8005cb4:	d9f0      	bls.n	8005c98 <USB_SetCurrentMode+0x60>
 8005cb6:	e001      	b.n	8005cbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e005      	b.n	8005cc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b32      	cmp	r3, #50	; 0x32
 8005cc0:	d101      	bne.n	8005cc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	e009      	b.n	8005d04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3340      	adds	r3, #64	; 0x40
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3301      	adds	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b0e      	cmp	r3, #14
 8005d08:	d9f2      	bls.n	8005cf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d11c      	bne.n	8005d4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e005      	b.n	8005d56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d62:	2103      	movs	r1, #3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f959 	bl	800601c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d6a:	2110      	movs	r1, #16
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8f1 	bl	8005f54 <USB_FlushTxFifo>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f91d 	bl	8005fbc <USB_FlushRxFifo>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	461a      	mov	r2, r3
 8005d94:	2300      	movs	r3, #0
 8005d96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	e043      	b.n	8005e3e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dcc:	d118      	bne.n	8005e00 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	461a      	mov	r2, r3
 8005de2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e013      	b.n	8005e12 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e008      	b.n	8005e12 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3b7      	bcc.n	8005db6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	e043      	b.n	8005ed4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e62:	d118      	bne.n	8005e96 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	461a      	mov	r2, r3
 8005e78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e013      	b.n	8005ea8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e008      	b.n	8005ea8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3b7      	bcc.n	8005e4c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005efc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f043 0210 	orr.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <USB_DevInit+0x280>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f043 0208 	orr.w	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f36:	f043 0304 	orr.w	r3, r3, #4
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f4a:	b004      	add	sp, #16
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	803c3800 	.word	0x803c3800

08005f54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <USB_FlushTxFifo+0x64>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e01b      	b.n	8005fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	daf2      	bge.n	8005f62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	019b      	lsls	r3, r3, #6
 8005f84:	f043 0220 	orr.w	r2, r3, #32
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <USB_FlushTxFifo+0x64>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e006      	b.n	8005fac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d0f0      	beq.n	8005f8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <USB_FlushRxFifo+0x5c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e018      	b.n	800600c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	daf2      	bge.n	8005fc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2210      	movs	r2, #16
 8005fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <USB_FlushRxFifo+0x5c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e006      	b.n	800600c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d0f0      	beq.n	8005fec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	00030d40 	.word	0x00030d40

0800601c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	f003 0301 	and.w	r3, r3, #1
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a13      	ldr	r2, [pc, #76]	; (8006110 <USB_CoreReset+0x64>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e01b      	b.n	8006102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	daf2      	bge.n	80060b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f043 0201 	orr.w	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <USB_CoreReset+0x64>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e006      	b.n	8006102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d0f0      	beq.n	80060e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	00030d40 	.word	0x00030d40

08006114 <sniprintf>:
 8006114:	b40c      	push	{r2, r3}
 8006116:	b530      	push	{r4, r5, lr}
 8006118:	4b17      	ldr	r3, [pc, #92]	; (8006178 <sniprintf+0x64>)
 800611a:	1e0c      	subs	r4, r1, #0
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	b09d      	sub	sp, #116	; 0x74
 8006120:	da08      	bge.n	8006134 <sniprintf+0x20>
 8006122:	238b      	movs	r3, #139	; 0x8b
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	f04f 30ff 	mov.w	r0, #4294967295
 800612a:	b01d      	add	sp, #116	; 0x74
 800612c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006130:	b002      	add	sp, #8
 8006132:	4770      	bx	lr
 8006134:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006138:	f8ad 3014 	strh.w	r3, [sp, #20]
 800613c:	bf14      	ite	ne
 800613e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006142:	4623      	moveq	r3, r4
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800614c:	9002      	str	r0, [sp, #8]
 800614e:	9006      	str	r0, [sp, #24]
 8006150:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006156:	ab21      	add	r3, sp, #132	; 0x84
 8006158:	a902      	add	r1, sp, #8
 800615a:	4628      	mov	r0, r5
 800615c:	9301      	str	r3, [sp, #4]
 800615e:	f000 f993 	bl	8006488 <_svfiprintf_r>
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	bfbc      	itt	lt
 8006166:	238b      	movlt	r3, #139	; 0x8b
 8006168:	602b      	strlt	r3, [r5, #0]
 800616a:	2c00      	cmp	r4, #0
 800616c:	d0dd      	beq.n	800612a <sniprintf+0x16>
 800616e:	9b02      	ldr	r3, [sp, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e7d9      	b.n	800612a <sniprintf+0x16>
 8006176:	bf00      	nop
 8006178:	200000fc 	.word	0x200000fc

0800617c <memset>:
 800617c:	4402      	add	r2, r0
 800617e:	4603      	mov	r3, r0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <memset+0xa>
 8006184:	4770      	bx	lr
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <memset+0x4>

0800618c <__errno>:
 800618c:	4b01      	ldr	r3, [pc, #4]	; (8006194 <__errno+0x8>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	200000fc 	.word	0x200000fc

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	4d0d      	ldr	r5, [pc, #52]	; (80061d0 <__libc_init_array+0x38>)
 800619c:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <__libc_init_array+0x3c>)
 800619e:	1b64      	subs	r4, r4, r5
 80061a0:	10a4      	asrs	r4, r4, #2
 80061a2:	2600      	movs	r6, #0
 80061a4:	42a6      	cmp	r6, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	4d0b      	ldr	r5, [pc, #44]	; (80061d8 <__libc_init_array+0x40>)
 80061aa:	4c0c      	ldr	r4, [pc, #48]	; (80061dc <__libc_init_array+0x44>)
 80061ac:	f000 fca4 	bl	8006af8 <_init>
 80061b0:	1b64      	subs	r4, r4, r5
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	2600      	movs	r6, #0
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c0:	4798      	blx	r3
 80061c2:	3601      	adds	r6, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ca:	4798      	blx	r3
 80061cc:	3601      	adds	r6, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	08006bb0 	.word	0x08006bb0
 80061d4:	08006bb0 	.word	0x08006bb0
 80061d8:	08006bb0 	.word	0x08006bb0
 80061dc:	08006bb4 	.word	0x08006bb4

080061e0 <__retarget_lock_acquire_recursive>:
 80061e0:	4770      	bx	lr

080061e2 <__retarget_lock_release_recursive>:
 80061e2:	4770      	bx	lr

080061e4 <_free_r>:
 80061e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061e6:	2900      	cmp	r1, #0
 80061e8:	d044      	beq.n	8006274 <_free_r+0x90>
 80061ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ee:	9001      	str	r0, [sp, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f1a1 0404 	sub.w	r4, r1, #4
 80061f6:	bfb8      	it	lt
 80061f8:	18e4      	addlt	r4, r4, r3
 80061fa:	f000 f8df 	bl	80063bc <__malloc_lock>
 80061fe:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <_free_r+0x94>)
 8006200:	9801      	ldr	r0, [sp, #4]
 8006202:	6813      	ldr	r3, [r2, #0]
 8006204:	b933      	cbnz	r3, 8006214 <_free_r+0x30>
 8006206:	6063      	str	r3, [r4, #4]
 8006208:	6014      	str	r4, [r2, #0]
 800620a:	b003      	add	sp, #12
 800620c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006210:	f000 b8da 	b.w	80063c8 <__malloc_unlock>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d908      	bls.n	800622a <_free_r+0x46>
 8006218:	6825      	ldr	r5, [r4, #0]
 800621a:	1961      	adds	r1, r4, r5
 800621c:	428b      	cmp	r3, r1
 800621e:	bf01      	itttt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	1949      	addeq	r1, r1, r5
 8006226:	6021      	streq	r1, [r4, #0]
 8006228:	e7ed      	b.n	8006206 <_free_r+0x22>
 800622a:	461a      	mov	r2, r3
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b10b      	cbz	r3, 8006234 <_free_r+0x50>
 8006230:	42a3      	cmp	r3, r4
 8006232:	d9fa      	bls.n	800622a <_free_r+0x46>
 8006234:	6811      	ldr	r1, [r2, #0]
 8006236:	1855      	adds	r5, r2, r1
 8006238:	42a5      	cmp	r5, r4
 800623a:	d10b      	bne.n	8006254 <_free_r+0x70>
 800623c:	6824      	ldr	r4, [r4, #0]
 800623e:	4421      	add	r1, r4
 8006240:	1854      	adds	r4, r2, r1
 8006242:	42a3      	cmp	r3, r4
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	d1e0      	bne.n	800620a <_free_r+0x26>
 8006248:	681c      	ldr	r4, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	6053      	str	r3, [r2, #4]
 800624e:	440c      	add	r4, r1
 8006250:	6014      	str	r4, [r2, #0]
 8006252:	e7da      	b.n	800620a <_free_r+0x26>
 8006254:	d902      	bls.n	800625c <_free_r+0x78>
 8006256:	230c      	movs	r3, #12
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	e7d6      	b.n	800620a <_free_r+0x26>
 800625c:	6825      	ldr	r5, [r4, #0]
 800625e:	1961      	adds	r1, r4, r5
 8006260:	428b      	cmp	r3, r1
 8006262:	bf04      	itt	eq
 8006264:	6819      	ldreq	r1, [r3, #0]
 8006266:	685b      	ldreq	r3, [r3, #4]
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	bf04      	itt	eq
 800626c:	1949      	addeq	r1, r1, r5
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	6054      	str	r4, [r2, #4]
 8006272:	e7ca      	b.n	800620a <_free_r+0x26>
 8006274:	b003      	add	sp, #12
 8006276:	bd30      	pop	{r4, r5, pc}
 8006278:	20000a9c 	.word	0x20000a9c

0800627c <sbrk_aligned>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4e0e      	ldr	r6, [pc, #56]	; (80062b8 <sbrk_aligned+0x3c>)
 8006280:	460c      	mov	r4, r1
 8006282:	6831      	ldr	r1, [r6, #0]
 8006284:	4605      	mov	r5, r0
 8006286:	b911      	cbnz	r1, 800628e <sbrk_aligned+0x12>
 8006288:	f000 fba6 	bl	80069d8 <_sbrk_r>
 800628c:	6030      	str	r0, [r6, #0]
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 fba1 	bl	80069d8 <_sbrk_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d00a      	beq.n	80062b0 <sbrk_aligned+0x34>
 800629a:	1cc4      	adds	r4, r0, #3
 800629c:	f024 0403 	bic.w	r4, r4, #3
 80062a0:	42a0      	cmp	r0, r4
 80062a2:	d007      	beq.n	80062b4 <sbrk_aligned+0x38>
 80062a4:	1a21      	subs	r1, r4, r0
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 fb96 	bl	80069d8 <_sbrk_r>
 80062ac:	3001      	adds	r0, #1
 80062ae:	d101      	bne.n	80062b4 <sbrk_aligned+0x38>
 80062b0:	f04f 34ff 	mov.w	r4, #4294967295
 80062b4:	4620      	mov	r0, r4
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	20000aa0 	.word	0x20000aa0

080062bc <_malloc_r>:
 80062bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c0:	1ccd      	adds	r5, r1, #3
 80062c2:	f025 0503 	bic.w	r5, r5, #3
 80062c6:	3508      	adds	r5, #8
 80062c8:	2d0c      	cmp	r5, #12
 80062ca:	bf38      	it	cc
 80062cc:	250c      	movcc	r5, #12
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	4607      	mov	r7, r0
 80062d2:	db01      	blt.n	80062d8 <_malloc_r+0x1c>
 80062d4:	42a9      	cmp	r1, r5
 80062d6:	d905      	bls.n	80062e4 <_malloc_r+0x28>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	2600      	movs	r6, #0
 80062de:	4630      	mov	r0, r6
 80062e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063b8 <_malloc_r+0xfc>
 80062e8:	f000 f868 	bl	80063bc <__malloc_lock>
 80062ec:	f8d8 3000 	ldr.w	r3, [r8]
 80062f0:	461c      	mov	r4, r3
 80062f2:	bb5c      	cbnz	r4, 800634c <_malloc_r+0x90>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7ff ffc0 	bl	800627c <sbrk_aligned>
 80062fc:	1c43      	adds	r3, r0, #1
 80062fe:	4604      	mov	r4, r0
 8006300:	d155      	bne.n	80063ae <_malloc_r+0xf2>
 8006302:	f8d8 4000 	ldr.w	r4, [r8]
 8006306:	4626      	mov	r6, r4
 8006308:	2e00      	cmp	r6, #0
 800630a:	d145      	bne.n	8006398 <_malloc_r+0xdc>
 800630c:	2c00      	cmp	r4, #0
 800630e:	d048      	beq.n	80063a2 <_malloc_r+0xe6>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	4631      	mov	r1, r6
 8006314:	4638      	mov	r0, r7
 8006316:	eb04 0903 	add.w	r9, r4, r3
 800631a:	f000 fb5d 	bl	80069d8 <_sbrk_r>
 800631e:	4581      	cmp	r9, r0
 8006320:	d13f      	bne.n	80063a2 <_malloc_r+0xe6>
 8006322:	6821      	ldr	r1, [r4, #0]
 8006324:	1a6d      	subs	r5, r5, r1
 8006326:	4629      	mov	r1, r5
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff ffa7 	bl	800627c <sbrk_aligned>
 800632e:	3001      	adds	r0, #1
 8006330:	d037      	beq.n	80063a2 <_malloc_r+0xe6>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	442b      	add	r3, r5
 8006336:	6023      	str	r3, [r4, #0]
 8006338:	f8d8 3000 	ldr.w	r3, [r8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d038      	beq.n	80063b2 <_malloc_r+0xf6>
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	42a2      	cmp	r2, r4
 8006344:	d12b      	bne.n	800639e <_malloc_r+0xe2>
 8006346:	2200      	movs	r2, #0
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	e00f      	b.n	800636c <_malloc_r+0xb0>
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	1b52      	subs	r2, r2, r5
 8006350:	d41f      	bmi.n	8006392 <_malloc_r+0xd6>
 8006352:	2a0b      	cmp	r2, #11
 8006354:	d917      	bls.n	8006386 <_malloc_r+0xca>
 8006356:	1961      	adds	r1, r4, r5
 8006358:	42a3      	cmp	r3, r4
 800635a:	6025      	str	r5, [r4, #0]
 800635c:	bf18      	it	ne
 800635e:	6059      	strne	r1, [r3, #4]
 8006360:	6863      	ldr	r3, [r4, #4]
 8006362:	bf08      	it	eq
 8006364:	f8c8 1000 	streq.w	r1, [r8]
 8006368:	5162      	str	r2, [r4, r5]
 800636a:	604b      	str	r3, [r1, #4]
 800636c:	4638      	mov	r0, r7
 800636e:	f104 060b 	add.w	r6, r4, #11
 8006372:	f000 f829 	bl	80063c8 <__malloc_unlock>
 8006376:	f026 0607 	bic.w	r6, r6, #7
 800637a:	1d23      	adds	r3, r4, #4
 800637c:	1af2      	subs	r2, r6, r3
 800637e:	d0ae      	beq.n	80062de <_malloc_r+0x22>
 8006380:	1b9b      	subs	r3, r3, r6
 8006382:	50a3      	str	r3, [r4, r2]
 8006384:	e7ab      	b.n	80062de <_malloc_r+0x22>
 8006386:	42a3      	cmp	r3, r4
 8006388:	6862      	ldr	r2, [r4, #4]
 800638a:	d1dd      	bne.n	8006348 <_malloc_r+0x8c>
 800638c:	f8c8 2000 	str.w	r2, [r8]
 8006390:	e7ec      	b.n	800636c <_malloc_r+0xb0>
 8006392:	4623      	mov	r3, r4
 8006394:	6864      	ldr	r4, [r4, #4]
 8006396:	e7ac      	b.n	80062f2 <_malloc_r+0x36>
 8006398:	4634      	mov	r4, r6
 800639a:	6876      	ldr	r6, [r6, #4]
 800639c:	e7b4      	b.n	8006308 <_malloc_r+0x4c>
 800639e:	4613      	mov	r3, r2
 80063a0:	e7cc      	b.n	800633c <_malloc_r+0x80>
 80063a2:	230c      	movs	r3, #12
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4638      	mov	r0, r7
 80063a8:	f000 f80e 	bl	80063c8 <__malloc_unlock>
 80063ac:	e797      	b.n	80062de <_malloc_r+0x22>
 80063ae:	6025      	str	r5, [r4, #0]
 80063b0:	e7dc      	b.n	800636c <_malloc_r+0xb0>
 80063b2:	605b      	str	r3, [r3, #4]
 80063b4:	deff      	udf	#255	; 0xff
 80063b6:	bf00      	nop
 80063b8:	20000a9c 	.word	0x20000a9c

080063bc <__malloc_lock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__malloc_lock+0x8>)
 80063be:	f7ff bf0f 	b.w	80061e0 <__retarget_lock_acquire_recursive>
 80063c2:	bf00      	nop
 80063c4:	20000a98 	.word	0x20000a98

080063c8 <__malloc_unlock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__malloc_unlock+0x8>)
 80063ca:	f7ff bf0a 	b.w	80061e2 <__retarget_lock_release_recursive>
 80063ce:	bf00      	nop
 80063d0:	20000a98 	.word	0x20000a98

080063d4 <__ssputs_r>:
 80063d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	688e      	ldr	r6, [r1, #8]
 80063da:	461f      	mov	r7, r3
 80063dc:	42be      	cmp	r6, r7
 80063de:	680b      	ldr	r3, [r1, #0]
 80063e0:	4682      	mov	sl, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	4690      	mov	r8, r2
 80063e6:	d82c      	bhi.n	8006442 <__ssputs_r+0x6e>
 80063e8:	898a      	ldrh	r2, [r1, #12]
 80063ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ee:	d026      	beq.n	800643e <__ssputs_r+0x6a>
 80063f0:	6965      	ldr	r5, [r4, #20]
 80063f2:	6909      	ldr	r1, [r1, #16]
 80063f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f8:	eba3 0901 	sub.w	r9, r3, r1
 80063fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006400:	1c7b      	adds	r3, r7, #1
 8006402:	444b      	add	r3, r9
 8006404:	106d      	asrs	r5, r5, #1
 8006406:	429d      	cmp	r5, r3
 8006408:	bf38      	it	cc
 800640a:	461d      	movcc	r5, r3
 800640c:	0553      	lsls	r3, r2, #21
 800640e:	d527      	bpl.n	8006460 <__ssputs_r+0x8c>
 8006410:	4629      	mov	r1, r5
 8006412:	f7ff ff53 	bl	80062bc <_malloc_r>
 8006416:	4606      	mov	r6, r0
 8006418:	b360      	cbz	r0, 8006474 <__ssputs_r+0xa0>
 800641a:	6921      	ldr	r1, [r4, #16]
 800641c:	464a      	mov	r2, r9
 800641e:	f000 faeb 	bl	80069f8 <memcpy>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	6126      	str	r6, [r4, #16]
 8006430:	6165      	str	r5, [r4, #20]
 8006432:	444e      	add	r6, r9
 8006434:	eba5 0509 	sub.w	r5, r5, r9
 8006438:	6026      	str	r6, [r4, #0]
 800643a:	60a5      	str	r5, [r4, #8]
 800643c:	463e      	mov	r6, r7
 800643e:	42be      	cmp	r6, r7
 8006440:	d900      	bls.n	8006444 <__ssputs_r+0x70>
 8006442:	463e      	mov	r6, r7
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	4632      	mov	r2, r6
 8006448:	4641      	mov	r1, r8
 800644a:	f000 faab 	bl	80069a4 <memmove>
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	1b9b      	subs	r3, r3, r6
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	4433      	add	r3, r6
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2000      	movs	r0, #0
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	462a      	mov	r2, r5
 8006462:	f000 fad7 	bl	8006a14 <_realloc_r>
 8006466:	4606      	mov	r6, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	d1e0      	bne.n	800642e <__ssputs_r+0x5a>
 800646c:	6921      	ldr	r1, [r4, #16]
 800646e:	4650      	mov	r0, sl
 8006470:	f7ff feb8 	bl	80061e4 <_free_r>
 8006474:	230c      	movs	r3, #12
 8006476:	f8ca 3000 	str.w	r3, [sl]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	e7e9      	b.n	800645c <__ssputs_r+0x88>

08006488 <_svfiprintf_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4698      	mov	r8, r3
 800648e:	898b      	ldrh	r3, [r1, #12]
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	b09d      	sub	sp, #116	; 0x74
 8006494:	4607      	mov	r7, r0
 8006496:	460d      	mov	r5, r1
 8006498:	4614      	mov	r4, r2
 800649a:	d50e      	bpl.n	80064ba <_svfiprintf_r+0x32>
 800649c:	690b      	ldr	r3, [r1, #16]
 800649e:	b963      	cbnz	r3, 80064ba <_svfiprintf_r+0x32>
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	f7ff ff0b 	bl	80062bc <_malloc_r>
 80064a6:	6028      	str	r0, [r5, #0]
 80064a8:	6128      	str	r0, [r5, #16]
 80064aa:	b920      	cbnz	r0, 80064b6 <_svfiprintf_r+0x2e>
 80064ac:	230c      	movs	r3, #12
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	e0d0      	b.n	8006658 <_svfiprintf_r+0x1d0>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	616b      	str	r3, [r5, #20]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	2320      	movs	r3, #32
 80064c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c8:	2330      	movs	r3, #48	; 0x30
 80064ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006670 <_svfiprintf_r+0x1e8>
 80064ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d2:	f04f 0901 	mov.w	r9, #1
 80064d6:	4623      	mov	r3, r4
 80064d8:	469a      	mov	sl, r3
 80064da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064de:	b10a      	cbz	r2, 80064e4 <_svfiprintf_r+0x5c>
 80064e0:	2a25      	cmp	r2, #37	; 0x25
 80064e2:	d1f9      	bne.n	80064d8 <_svfiprintf_r+0x50>
 80064e4:	ebba 0b04 	subs.w	fp, sl, r4
 80064e8:	d00b      	beq.n	8006502 <_svfiprintf_r+0x7a>
 80064ea:	465b      	mov	r3, fp
 80064ec:	4622      	mov	r2, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff ff6f 	bl	80063d4 <__ssputs_r>
 80064f6:	3001      	adds	r0, #1
 80064f8:	f000 80a9 	beq.w	800664e <_svfiprintf_r+0x1c6>
 80064fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fe:	445a      	add	r2, fp
 8006500:	9209      	str	r2, [sp, #36]	; 0x24
 8006502:	f89a 3000 	ldrb.w	r3, [sl]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80a1 	beq.w	800664e <_svfiprintf_r+0x1c6>
 800650c:	2300      	movs	r3, #0
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006516:	f10a 0a01 	add.w	sl, sl, #1
 800651a:	9304      	str	r3, [sp, #16]
 800651c:	9307      	str	r3, [sp, #28]
 800651e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006522:	931a      	str	r3, [sp, #104]	; 0x68
 8006524:	4654      	mov	r4, sl
 8006526:	2205      	movs	r2, #5
 8006528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652c:	4850      	ldr	r0, [pc, #320]	; (8006670 <_svfiprintf_r+0x1e8>)
 800652e:	f7f9 fe4f 	bl	80001d0 <memchr>
 8006532:	9a04      	ldr	r2, [sp, #16]
 8006534:	b9d8      	cbnz	r0, 800656e <_svfiprintf_r+0xe6>
 8006536:	06d0      	lsls	r0, r2, #27
 8006538:	bf44      	itt	mi
 800653a:	2320      	movmi	r3, #32
 800653c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006540:	0711      	lsls	r1, r2, #28
 8006542:	bf44      	itt	mi
 8006544:	232b      	movmi	r3, #43	; 0x2b
 8006546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654a:	f89a 3000 	ldrb.w	r3, [sl]
 800654e:	2b2a      	cmp	r3, #42	; 0x2a
 8006550:	d015      	beq.n	800657e <_svfiprintf_r+0xf6>
 8006552:	9a07      	ldr	r2, [sp, #28]
 8006554:	4654      	mov	r4, sl
 8006556:	2000      	movs	r0, #0
 8006558:	f04f 0c0a 	mov.w	ip, #10
 800655c:	4621      	mov	r1, r4
 800655e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006562:	3b30      	subs	r3, #48	; 0x30
 8006564:	2b09      	cmp	r3, #9
 8006566:	d94d      	bls.n	8006604 <_svfiprintf_r+0x17c>
 8006568:	b1b0      	cbz	r0, 8006598 <_svfiprintf_r+0x110>
 800656a:	9207      	str	r2, [sp, #28]
 800656c:	e014      	b.n	8006598 <_svfiprintf_r+0x110>
 800656e:	eba0 0308 	sub.w	r3, r0, r8
 8006572:	fa09 f303 	lsl.w	r3, r9, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	46a2      	mov	sl, r4
 800657c:	e7d2      	b.n	8006524 <_svfiprintf_r+0x9c>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	1d19      	adds	r1, r3, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	9103      	str	r1, [sp, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfbb      	ittet	lt
 800658a:	425b      	neglt	r3, r3
 800658c:	f042 0202 	orrlt.w	r2, r2, #2
 8006590:	9307      	strge	r3, [sp, #28]
 8006592:	9307      	strlt	r3, [sp, #28]
 8006594:	bfb8      	it	lt
 8006596:	9204      	strlt	r2, [sp, #16]
 8006598:	7823      	ldrb	r3, [r4, #0]
 800659a:	2b2e      	cmp	r3, #46	; 0x2e
 800659c:	d10c      	bne.n	80065b8 <_svfiprintf_r+0x130>
 800659e:	7863      	ldrb	r3, [r4, #1]
 80065a0:	2b2a      	cmp	r3, #42	; 0x2a
 80065a2:	d134      	bne.n	800660e <_svfiprintf_r+0x186>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	9203      	str	r2, [sp, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb8      	it	lt
 80065b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b4:	3402      	adds	r4, #2
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006680 <_svfiprintf_r+0x1f8>
 80065bc:	7821      	ldrb	r1, [r4, #0]
 80065be:	2203      	movs	r2, #3
 80065c0:	4650      	mov	r0, sl
 80065c2:	f7f9 fe05 	bl	80001d0 <memchr>
 80065c6:	b138      	cbz	r0, 80065d8 <_svfiprintf_r+0x150>
 80065c8:	9b04      	ldr	r3, [sp, #16]
 80065ca:	eba0 000a 	sub.w	r0, r0, sl
 80065ce:	2240      	movs	r2, #64	; 0x40
 80065d0:	4082      	lsls	r2, r0
 80065d2:	4313      	orrs	r3, r2
 80065d4:	3401      	adds	r4, #1
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065dc:	4825      	ldr	r0, [pc, #148]	; (8006674 <_svfiprintf_r+0x1ec>)
 80065de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e2:	2206      	movs	r2, #6
 80065e4:	f7f9 fdf4 	bl	80001d0 <memchr>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d038      	beq.n	800665e <_svfiprintf_r+0x1d6>
 80065ec:	4b22      	ldr	r3, [pc, #136]	; (8006678 <_svfiprintf_r+0x1f0>)
 80065ee:	bb1b      	cbnz	r3, 8006638 <_svfiprintf_r+0x1b0>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	3307      	adds	r3, #7
 80065f4:	f023 0307 	bic.w	r3, r3, #7
 80065f8:	3308      	adds	r3, #8
 80065fa:	9303      	str	r3, [sp, #12]
 80065fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fe:	4433      	add	r3, r6
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	e768      	b.n	80064d6 <_svfiprintf_r+0x4e>
 8006604:	fb0c 3202 	mla	r2, ip, r2, r3
 8006608:	460c      	mov	r4, r1
 800660a:	2001      	movs	r0, #1
 800660c:	e7a6      	b.n	800655c <_svfiprintf_r+0xd4>
 800660e:	2300      	movs	r3, #0
 8006610:	3401      	adds	r4, #1
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	4619      	mov	r1, r3
 8006616:	f04f 0c0a 	mov.w	ip, #10
 800661a:	4620      	mov	r0, r4
 800661c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006620:	3a30      	subs	r2, #48	; 0x30
 8006622:	2a09      	cmp	r2, #9
 8006624:	d903      	bls.n	800662e <_svfiprintf_r+0x1a6>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0c6      	beq.n	80065b8 <_svfiprintf_r+0x130>
 800662a:	9105      	str	r1, [sp, #20]
 800662c:	e7c4      	b.n	80065b8 <_svfiprintf_r+0x130>
 800662e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006632:	4604      	mov	r4, r0
 8006634:	2301      	movs	r3, #1
 8006636:	e7f0      	b.n	800661a <_svfiprintf_r+0x192>
 8006638:	ab03      	add	r3, sp, #12
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	462a      	mov	r2, r5
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <_svfiprintf_r+0x1f4>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	4638      	mov	r0, r7
 8006644:	f3af 8000 	nop.w
 8006648:	1c42      	adds	r2, r0, #1
 800664a:	4606      	mov	r6, r0
 800664c:	d1d6      	bne.n	80065fc <_svfiprintf_r+0x174>
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	065b      	lsls	r3, r3, #25
 8006652:	f53f af2d 	bmi.w	80064b0 <_svfiprintf_r+0x28>
 8006656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006658:	b01d      	add	sp, #116	; 0x74
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	ab03      	add	r3, sp, #12
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	462a      	mov	r2, r5
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <_svfiprintf_r+0x1f4>)
 8006666:	a904      	add	r1, sp, #16
 8006668:	4638      	mov	r0, r7
 800666a:	f000 f879 	bl	8006760 <_printf_i>
 800666e:	e7eb      	b.n	8006648 <_svfiprintf_r+0x1c0>
 8006670:	08006b74 	.word	0x08006b74
 8006674:	08006b7e 	.word	0x08006b7e
 8006678:	00000000 	.word	0x00000000
 800667c:	080063d5 	.word	0x080063d5
 8006680:	08006b7a 	.word	0x08006b7a

08006684 <_printf_common>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	4616      	mov	r6, r2
 800668a:	4699      	mov	r9, r3
 800668c:	688a      	ldr	r2, [r1, #8]
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006694:	4293      	cmp	r3, r2
 8006696:	bfb8      	it	lt
 8006698:	4613      	movlt	r3, r2
 800669a:	6033      	str	r3, [r6, #0]
 800669c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a0:	4607      	mov	r7, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	b10a      	cbz	r2, 80066aa <_printf_common+0x26>
 80066a6:	3301      	adds	r3, #1
 80066a8:	6033      	str	r3, [r6, #0]
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	0699      	lsls	r1, r3, #26
 80066ae:	bf42      	ittt	mi
 80066b0:	6833      	ldrmi	r3, [r6, #0]
 80066b2:	3302      	addmi	r3, #2
 80066b4:	6033      	strmi	r3, [r6, #0]
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	f015 0506 	ands.w	r5, r5, #6
 80066bc:	d106      	bne.n	80066cc <_printf_common+0x48>
 80066be:	f104 0a19 	add.w	sl, r4, #25
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	6832      	ldr	r2, [r6, #0]
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dc26      	bgt.n	800671a <_printf_common+0x96>
 80066cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066d0:	1e13      	subs	r3, r2, #0
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	bf18      	it	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	0692      	lsls	r2, r2, #26
 80066da:	d42b      	bmi.n	8006734 <_printf_common+0xb0>
 80066dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e0:	4649      	mov	r1, r9
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c0      	blx	r8
 80066e6:	3001      	adds	r0, #1
 80066e8:	d01e      	beq.n	8006728 <_printf_common+0xa4>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	6922      	ldr	r2, [r4, #16]
 80066ee:	f003 0306 	and.w	r3, r3, #6
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	bf02      	ittt	eq
 80066f6:	68e5      	ldreq	r5, [r4, #12]
 80066f8:	6833      	ldreq	r3, [r6, #0]
 80066fa:	1aed      	subeq	r5, r5, r3
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	bf0c      	ite	eq
 8006700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006704:	2500      	movne	r5, #0
 8006706:	4293      	cmp	r3, r2
 8006708:	bfc4      	itt	gt
 800670a:	1a9b      	subgt	r3, r3, r2
 800670c:	18ed      	addgt	r5, r5, r3
 800670e:	2600      	movs	r6, #0
 8006710:	341a      	adds	r4, #26
 8006712:	42b5      	cmp	r5, r6
 8006714:	d11a      	bne.n	800674c <_printf_common+0xc8>
 8006716:	2000      	movs	r0, #0
 8006718:	e008      	b.n	800672c <_printf_common+0xa8>
 800671a:	2301      	movs	r3, #1
 800671c:	4652      	mov	r2, sl
 800671e:	4649      	mov	r1, r9
 8006720:	4638      	mov	r0, r7
 8006722:	47c0      	blx	r8
 8006724:	3001      	adds	r0, #1
 8006726:	d103      	bne.n	8006730 <_printf_common+0xac>
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006730:	3501      	adds	r5, #1
 8006732:	e7c6      	b.n	80066c2 <_printf_common+0x3e>
 8006734:	18e1      	adds	r1, r4, r3
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	2030      	movs	r0, #48	; 0x30
 800673a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800673e:	4422      	add	r2, r4
 8006740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006748:	3302      	adds	r3, #2
 800674a:	e7c7      	b.n	80066dc <_printf_common+0x58>
 800674c:	2301      	movs	r3, #1
 800674e:	4622      	mov	r2, r4
 8006750:	4649      	mov	r1, r9
 8006752:	4638      	mov	r0, r7
 8006754:	47c0      	blx	r8
 8006756:	3001      	adds	r0, #1
 8006758:	d0e6      	beq.n	8006728 <_printf_common+0xa4>
 800675a:	3601      	adds	r6, #1
 800675c:	e7d9      	b.n	8006712 <_printf_common+0x8e>
	...

08006760 <_printf_i>:
 8006760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	7e0f      	ldrb	r7, [r1, #24]
 8006766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006768:	2f78      	cmp	r7, #120	; 0x78
 800676a:	4691      	mov	r9, r2
 800676c:	4680      	mov	r8, r0
 800676e:	460c      	mov	r4, r1
 8006770:	469a      	mov	sl, r3
 8006772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006776:	d807      	bhi.n	8006788 <_printf_i+0x28>
 8006778:	2f62      	cmp	r7, #98	; 0x62
 800677a:	d80a      	bhi.n	8006792 <_printf_i+0x32>
 800677c:	2f00      	cmp	r7, #0
 800677e:	f000 80d4 	beq.w	800692a <_printf_i+0x1ca>
 8006782:	2f58      	cmp	r7, #88	; 0x58
 8006784:	f000 80c0 	beq.w	8006908 <_printf_i+0x1a8>
 8006788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800678c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006790:	e03a      	b.n	8006808 <_printf_i+0xa8>
 8006792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006796:	2b15      	cmp	r3, #21
 8006798:	d8f6      	bhi.n	8006788 <_printf_i+0x28>
 800679a:	a101      	add	r1, pc, #4	; (adr r1, 80067a0 <_printf_i+0x40>)
 800679c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a0:	080067f9 	.word	0x080067f9
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	08006789 	.word	0x08006789
 80067ac:	08006789 	.word	0x08006789
 80067b0:	08006789 	.word	0x08006789
 80067b4:	08006789 	.word	0x08006789
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	08006789 	.word	0x08006789
 80067c0:	08006789 	.word	0x08006789
 80067c4:	08006789 	.word	0x08006789
 80067c8:	08006789 	.word	0x08006789
 80067cc:	08006911 	.word	0x08006911
 80067d0:	08006839 	.word	0x08006839
 80067d4:	080068cb 	.word	0x080068cb
 80067d8:	08006789 	.word	0x08006789
 80067dc:	08006789 	.word	0x08006789
 80067e0:	08006933 	.word	0x08006933
 80067e4:	08006789 	.word	0x08006789
 80067e8:	08006839 	.word	0x08006839
 80067ec:	08006789 	.word	0x08006789
 80067f0:	08006789 	.word	0x08006789
 80067f4:	080068d3 	.word	0x080068d3
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	602a      	str	r2, [r5, #0]
 8006800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006808:	2301      	movs	r3, #1
 800680a:	e09f      	b.n	800694c <_printf_i+0x1ec>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	682b      	ldr	r3, [r5, #0]
 8006810:	0607      	lsls	r7, r0, #24
 8006812:	f103 0104 	add.w	r1, r3, #4
 8006816:	6029      	str	r1, [r5, #0]
 8006818:	d501      	bpl.n	800681e <_printf_i+0xbe>
 800681a:	681e      	ldr	r6, [r3, #0]
 800681c:	e003      	b.n	8006826 <_printf_i+0xc6>
 800681e:	0646      	lsls	r6, r0, #25
 8006820:	d5fb      	bpl.n	800681a <_printf_i+0xba>
 8006822:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006826:	2e00      	cmp	r6, #0
 8006828:	da03      	bge.n	8006832 <_printf_i+0xd2>
 800682a:	232d      	movs	r3, #45	; 0x2d
 800682c:	4276      	negs	r6, r6
 800682e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006832:	485a      	ldr	r0, [pc, #360]	; (800699c <_printf_i+0x23c>)
 8006834:	230a      	movs	r3, #10
 8006836:	e012      	b.n	800685e <_printf_i+0xfe>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	6820      	ldr	r0, [r4, #0]
 800683c:	1d19      	adds	r1, r3, #4
 800683e:	6029      	str	r1, [r5, #0]
 8006840:	0605      	lsls	r5, r0, #24
 8006842:	d501      	bpl.n	8006848 <_printf_i+0xe8>
 8006844:	681e      	ldr	r6, [r3, #0]
 8006846:	e002      	b.n	800684e <_printf_i+0xee>
 8006848:	0641      	lsls	r1, r0, #25
 800684a:	d5fb      	bpl.n	8006844 <_printf_i+0xe4>
 800684c:	881e      	ldrh	r6, [r3, #0]
 800684e:	4853      	ldr	r0, [pc, #332]	; (800699c <_printf_i+0x23c>)
 8006850:	2f6f      	cmp	r7, #111	; 0x6f
 8006852:	bf0c      	ite	eq
 8006854:	2308      	moveq	r3, #8
 8006856:	230a      	movne	r3, #10
 8006858:	2100      	movs	r1, #0
 800685a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685e:	6865      	ldr	r5, [r4, #4]
 8006860:	60a5      	str	r5, [r4, #8]
 8006862:	2d00      	cmp	r5, #0
 8006864:	bfa2      	ittt	ge
 8006866:	6821      	ldrge	r1, [r4, #0]
 8006868:	f021 0104 	bicge.w	r1, r1, #4
 800686c:	6021      	strge	r1, [r4, #0]
 800686e:	b90e      	cbnz	r6, 8006874 <_printf_i+0x114>
 8006870:	2d00      	cmp	r5, #0
 8006872:	d04b      	beq.n	800690c <_printf_i+0x1ac>
 8006874:	4615      	mov	r5, r2
 8006876:	fbb6 f1f3 	udiv	r1, r6, r3
 800687a:	fb03 6711 	mls	r7, r3, r1, r6
 800687e:	5dc7      	ldrb	r7, [r0, r7]
 8006880:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006884:	4637      	mov	r7, r6
 8006886:	42bb      	cmp	r3, r7
 8006888:	460e      	mov	r6, r1
 800688a:	d9f4      	bls.n	8006876 <_printf_i+0x116>
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10b      	bne.n	80068a8 <_printf_i+0x148>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	07de      	lsls	r6, r3, #31
 8006894:	d508      	bpl.n	80068a8 <_printf_i+0x148>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	4299      	cmp	r1, r3
 800689c:	bfde      	ittt	le
 800689e:	2330      	movle	r3, #48	; 0x30
 80068a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a8:	1b52      	subs	r2, r2, r5
 80068aa:	6122      	str	r2, [r4, #16]
 80068ac:	f8cd a000 	str.w	sl, [sp]
 80068b0:	464b      	mov	r3, r9
 80068b2:	aa03      	add	r2, sp, #12
 80068b4:	4621      	mov	r1, r4
 80068b6:	4640      	mov	r0, r8
 80068b8:	f7ff fee4 	bl	8006684 <_printf_common>
 80068bc:	3001      	adds	r0, #1
 80068be:	d14a      	bne.n	8006956 <_printf_i+0x1f6>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b004      	add	sp, #16
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	f043 0320 	orr.w	r3, r3, #32
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	4833      	ldr	r0, [pc, #204]	; (80069a0 <_printf_i+0x240>)
 80068d4:	2778      	movs	r7, #120	; 0x78
 80068d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	6829      	ldr	r1, [r5, #0]
 80068de:	061f      	lsls	r7, r3, #24
 80068e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068e4:	d402      	bmi.n	80068ec <_printf_i+0x18c>
 80068e6:	065f      	lsls	r7, r3, #25
 80068e8:	bf48      	it	mi
 80068ea:	b2b6      	uxthmi	r6, r6
 80068ec:	07df      	lsls	r7, r3, #31
 80068ee:	bf48      	it	mi
 80068f0:	f043 0320 	orrmi.w	r3, r3, #32
 80068f4:	6029      	str	r1, [r5, #0]
 80068f6:	bf48      	it	mi
 80068f8:	6023      	strmi	r3, [r4, #0]
 80068fa:	b91e      	cbnz	r6, 8006904 <_printf_i+0x1a4>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	f023 0320 	bic.w	r3, r3, #32
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	2310      	movs	r3, #16
 8006906:	e7a7      	b.n	8006858 <_printf_i+0xf8>
 8006908:	4824      	ldr	r0, [pc, #144]	; (800699c <_printf_i+0x23c>)
 800690a:	e7e4      	b.n	80068d6 <_printf_i+0x176>
 800690c:	4615      	mov	r5, r2
 800690e:	e7bd      	b.n	800688c <_printf_i+0x12c>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	6826      	ldr	r6, [r4, #0]
 8006914:	6961      	ldr	r1, [r4, #20]
 8006916:	1d18      	adds	r0, r3, #4
 8006918:	6028      	str	r0, [r5, #0]
 800691a:	0635      	lsls	r5, r6, #24
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	d501      	bpl.n	8006924 <_printf_i+0x1c4>
 8006920:	6019      	str	r1, [r3, #0]
 8006922:	e002      	b.n	800692a <_printf_i+0x1ca>
 8006924:	0670      	lsls	r0, r6, #25
 8006926:	d5fb      	bpl.n	8006920 <_printf_i+0x1c0>
 8006928:	8019      	strh	r1, [r3, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	6123      	str	r3, [r4, #16]
 800692e:	4615      	mov	r5, r2
 8006930:	e7bc      	b.n	80068ac <_printf_i+0x14c>
 8006932:	682b      	ldr	r3, [r5, #0]
 8006934:	1d1a      	adds	r2, r3, #4
 8006936:	602a      	str	r2, [r5, #0]
 8006938:	681d      	ldr	r5, [r3, #0]
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	2100      	movs	r1, #0
 800693e:	4628      	mov	r0, r5
 8006940:	f7f9 fc46 	bl	80001d0 <memchr>
 8006944:	b108      	cbz	r0, 800694a <_printf_i+0x1ea>
 8006946:	1b40      	subs	r0, r0, r5
 8006948:	6060      	str	r0, [r4, #4]
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	2300      	movs	r3, #0
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	e7aa      	b.n	80068ac <_printf_i+0x14c>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	462a      	mov	r2, r5
 800695a:	4649      	mov	r1, r9
 800695c:	4640      	mov	r0, r8
 800695e:	47d0      	blx	sl
 8006960:	3001      	adds	r0, #1
 8006962:	d0ad      	beq.n	80068c0 <_printf_i+0x160>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	d413      	bmi.n	8006992 <_printf_i+0x232>
 800696a:	68e0      	ldr	r0, [r4, #12]
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	4298      	cmp	r0, r3
 8006970:	bfb8      	it	lt
 8006972:	4618      	movlt	r0, r3
 8006974:	e7a6      	b.n	80068c4 <_printf_i+0x164>
 8006976:	2301      	movs	r3, #1
 8006978:	4632      	mov	r2, r6
 800697a:	4649      	mov	r1, r9
 800697c:	4640      	mov	r0, r8
 800697e:	47d0      	blx	sl
 8006980:	3001      	adds	r0, #1
 8006982:	d09d      	beq.n	80068c0 <_printf_i+0x160>
 8006984:	3501      	adds	r5, #1
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	9903      	ldr	r1, [sp, #12]
 800698a:	1a5b      	subs	r3, r3, r1
 800698c:	42ab      	cmp	r3, r5
 800698e:	dcf2      	bgt.n	8006976 <_printf_i+0x216>
 8006990:	e7eb      	b.n	800696a <_printf_i+0x20a>
 8006992:	2500      	movs	r5, #0
 8006994:	f104 0619 	add.w	r6, r4, #25
 8006998:	e7f5      	b.n	8006986 <_printf_i+0x226>
 800699a:	bf00      	nop
 800699c:	08006b85 	.word	0x08006b85
 80069a0:	08006b96 	.word	0x08006b96

080069a4 <memmove>:
 80069a4:	4288      	cmp	r0, r1
 80069a6:	b510      	push	{r4, lr}
 80069a8:	eb01 0402 	add.w	r4, r1, r2
 80069ac:	d902      	bls.n	80069b4 <memmove+0x10>
 80069ae:	4284      	cmp	r4, r0
 80069b0:	4623      	mov	r3, r4
 80069b2:	d807      	bhi.n	80069c4 <memmove+0x20>
 80069b4:	1e43      	subs	r3, r0, #1
 80069b6:	42a1      	cmp	r1, r4
 80069b8:	d008      	beq.n	80069cc <memmove+0x28>
 80069ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069c2:	e7f8      	b.n	80069b6 <memmove+0x12>
 80069c4:	4402      	add	r2, r0
 80069c6:	4601      	mov	r1, r0
 80069c8:	428a      	cmp	r2, r1
 80069ca:	d100      	bne.n	80069ce <memmove+0x2a>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069d6:	e7f7      	b.n	80069c8 <memmove+0x24>

080069d8 <_sbrk_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d06      	ldr	r5, [pc, #24]	; (80069f4 <_sbrk_r+0x1c>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fa fed6 	bl	8001794 <_sbrk>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_sbrk_r+0x1a>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_sbrk_r+0x1a>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000a94 	.word	0x20000a94

080069f8 <memcpy>:
 80069f8:	440a      	add	r2, r1
 80069fa:	4291      	cmp	r1, r2
 80069fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a00:	d100      	bne.n	8006a04 <memcpy+0xc>
 8006a02:	4770      	bx	lr
 8006a04:	b510      	push	{r4, lr}
 8006a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0e:	4291      	cmp	r1, r2
 8006a10:	d1f9      	bne.n	8006a06 <memcpy+0xe>
 8006a12:	bd10      	pop	{r4, pc}

08006a14 <_realloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	460e      	mov	r6, r1
 8006a1e:	b921      	cbnz	r1, 8006a2a <_realloc_r+0x16>
 8006a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	4611      	mov	r1, r2
 8006a26:	f7ff bc49 	b.w	80062bc <_malloc_r>
 8006a2a:	b92a      	cbnz	r2, 8006a38 <_realloc_r+0x24>
 8006a2c:	f7ff fbda 	bl	80061e4 <_free_r>
 8006a30:	4625      	mov	r5, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	f000 f81b 	bl	8006a72 <_malloc_usable_size_r>
 8006a3c:	4284      	cmp	r4, r0
 8006a3e:	4607      	mov	r7, r0
 8006a40:	d802      	bhi.n	8006a48 <_realloc_r+0x34>
 8006a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a46:	d812      	bhi.n	8006a6e <_realloc_r+0x5a>
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7ff fc36 	bl	80062bc <_malloc_r>
 8006a50:	4605      	mov	r5, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d0ed      	beq.n	8006a32 <_realloc_r+0x1e>
 8006a56:	42bc      	cmp	r4, r7
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	bf28      	it	cs
 8006a5e:	463a      	movcs	r2, r7
 8006a60:	f7ff ffca 	bl	80069f8 <memcpy>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7ff fbbc 	bl	80061e4 <_free_r>
 8006a6c:	e7e1      	b.n	8006a32 <_realloc_r+0x1e>
 8006a6e:	4635      	mov	r5, r6
 8006a70:	e7df      	b.n	8006a32 <_realloc_r+0x1e>

08006a72 <_malloc_usable_size_r>:
 8006a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a76:	1f18      	subs	r0, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bfbc      	itt	lt
 8006a7c:	580b      	ldrlt	r3, [r1, r0]
 8006a7e:	18c0      	addlt	r0, r0, r3
 8006a80:	4770      	bx	lr
	...

08006a84 <trunc>:
 8006a84:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8006a88:	ec5c bb10 	vmov	fp, ip, d0
 8006a8c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8006a90:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8006a94:	2913      	cmp	r1, #19
 8006a96:	4664      	mov	r4, ip
 8006a98:	dc11      	bgt.n	8006abe <trunc+0x3a>
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	bfa7      	ittee	ge
 8006a9e:	4b15      	ldrge	r3, [pc, #84]	; (8006af4 <trunc+0x70>)
 8006aa0:	fa43 f101 	asrge.w	r1, r3, r1
 8006aa4:	2200      	movlt	r2, #0
 8006aa6:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8006aaa:	bfa4      	itt	ge
 8006aac:	2200      	movge	r2, #0
 8006aae:	ea01 030c 	andge.w	r3, r1, ip
 8006ab2:	4693      	mov	fp, r2
 8006ab4:	469c      	mov	ip, r3
 8006ab6:	ec4c bb10 	vmov	d0, fp, ip
 8006aba:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8006abe:	2933      	cmp	r1, #51	; 0x33
 8006ac0:	dd0d      	ble.n	8006ade <trunc+0x5a>
 8006ac2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006ac6:	d1f6      	bne.n	8006ab6 <trunc+0x32>
 8006ac8:	4663      	mov	r3, ip
 8006aca:	ee10 2a10 	vmov	r2, s0
 8006ace:	ee10 0a10 	vmov	r0, s0
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	f7f9 fbd2 	bl	800027c <__adddf3>
 8006ad8:	4683      	mov	fp, r0
 8006ada:	468c      	mov	ip, r1
 8006adc:	e7eb      	b.n	8006ab6 <trunc+0x32>
 8006ade:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae6:	40c3      	lsrs	r3, r0
 8006ae8:	ea2b 0603 	bic.w	r6, fp, r3
 8006aec:	46b3      	mov	fp, r6
 8006aee:	46a4      	mov	ip, r4
 8006af0:	e7e1      	b.n	8006ab6 <trunc+0x32>
 8006af2:	bf00      	nop
 8006af4:	fff00000 	.word	0xfff00000

08006af8 <_init>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr

08006b04 <_fini>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr
