
HTS221_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000536c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005590  08005590  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005598  08005598  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080055a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000100  080056a0  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080056a0  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   000109f0  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002472  00000000  00000000  00030b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00032fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ade  00000000  00000000  00033df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ca9  00000000  00000000  000348d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012361  00000000  00000000  0005c57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2c33  00000000  00000000  0006e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f8c  00000000  00000000  00161514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  001654a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054e4 	.word	0x080054e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	080054e4 	.word	0x080054e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b970 	b.w	8000930 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	460f      	mov	r7, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14a      	bne.n	800070e <__udivmoddi4+0xa6>
 8000678:	428a      	cmp	r2, r1
 800067a:	4694      	mov	ip, r2
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0xe2>
 800067e:	fab2 f382 	clz	r3, r2
 8000682:	b143      	cbz	r3, 8000696 <__udivmoddi4+0x2e>
 8000684:	fa02 fc03 	lsl.w	ip, r2, r3
 8000688:	f1c3 0220 	rsb	r2, r3, #32
 800068c:	409f      	lsls	r7, r3
 800068e:	fa20 f202 	lsr.w	r2, r0, r2
 8000692:	4317      	orrs	r7, r2
 8000694:	409c      	lsls	r4, r3
 8000696:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800069a:	fa1f f58c 	uxth.w	r5, ip
 800069e:	fbb7 f1fe 	udiv	r1, r7, lr
 80006a2:	0c22      	lsrs	r2, r4, #16
 80006a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006ac:	fb01 f005 	mul.w	r0, r1, r5
 80006b0:	4290      	cmp	r0, r2
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x62>
 80006b4:	eb1c 0202 	adds.w	r2, ip, r2
 80006b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006bc:	f080 811c 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006c0:	4290      	cmp	r0, r2
 80006c2:	f240 8119 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006c6:	3902      	subs	r1, #2
 80006c8:	4462      	add	r2, ip
 80006ca:	1a12      	subs	r2, r2, r0
 80006cc:	b2a4      	uxth	r4, r4
 80006ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80006d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006da:	fb00 f505 	mul.w	r5, r0, r5
 80006de:	42a5      	cmp	r5, r4
 80006e0:	d90a      	bls.n	80006f8 <__udivmoddi4+0x90>
 80006e2:	eb1c 0404 	adds.w	r4, ip, r4
 80006e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006ea:	f080 8107 	bcs.w	80008fc <__udivmoddi4+0x294>
 80006ee:	42a5      	cmp	r5, r4
 80006f0:	f240 8104 	bls.w	80008fc <__udivmoddi4+0x294>
 80006f4:	4464      	add	r4, ip
 80006f6:	3802      	subs	r0, #2
 80006f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	2100      	movs	r1, #0
 8000700:	b11e      	cbz	r6, 800070a <__udivmoddi4+0xa2>
 8000702:	40dc      	lsrs	r4, r3
 8000704:	2300      	movs	r3, #0
 8000706:	e9c6 4300 	strd	r4, r3, [r6]
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0xbc>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80ed 	beq.w	80008f2 <__udivmoddi4+0x28a>
 8000718:	2100      	movs	r1, #0
 800071a:	e9c6 0500 	strd	r0, r5, [r6]
 800071e:	4608      	mov	r0, r1
 8000720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000724:	fab3 f183 	clz	r1, r3
 8000728:	2900      	cmp	r1, #0
 800072a:	d149      	bne.n	80007c0 <__udivmoddi4+0x158>
 800072c:	42ab      	cmp	r3, r5
 800072e:	d302      	bcc.n	8000736 <__udivmoddi4+0xce>
 8000730:	4282      	cmp	r2, r0
 8000732:	f200 80f8 	bhi.w	8000926 <__udivmoddi4+0x2be>
 8000736:	1a84      	subs	r4, r0, r2
 8000738:	eb65 0203 	sbc.w	r2, r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	4617      	mov	r7, r2
 8000740:	2e00      	cmp	r6, #0
 8000742:	d0e2      	beq.n	800070a <__udivmoddi4+0xa2>
 8000744:	e9c6 4700 	strd	r4, r7, [r6]
 8000748:	e7df      	b.n	800070a <__udivmoddi4+0xa2>
 800074a:	b902      	cbnz	r2, 800074e <__udivmoddi4+0xe6>
 800074c:	deff      	udf	#255	; 0xff
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8090 	bne.w	8000878 <__udivmoddi4+0x210>
 8000758:	1a8a      	subs	r2, r1, r2
 800075a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075e:	fa1f fe8c 	uxth.w	lr, ip
 8000762:	2101      	movs	r1, #1
 8000764:	fbb2 f5f7 	udiv	r5, r2, r7
 8000768:	fb07 2015 	mls	r0, r7, r5, r2
 800076c:	0c22      	lsrs	r2, r4, #16
 800076e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000772:	fb0e f005 	mul.w	r0, lr, r5
 8000776:	4290      	cmp	r0, r2
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x124>
 800077a:	eb1c 0202 	adds.w	r2, ip, r2
 800077e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4290      	cmp	r0, r2
 8000786:	f200 80cb 	bhi.w	8000920 <__udivmoddi4+0x2b8>
 800078a:	4645      	mov	r5, r8
 800078c:	1a12      	subs	r2, r2, r0
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb2 f0f7 	udiv	r0, r2, r7
 8000794:	fb07 2210 	mls	r2, r7, r0, r2
 8000798:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079c:	fb0e fe00 	mul.w	lr, lr, r0
 80007a0:	45a6      	cmp	lr, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x14e>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ac:	d202      	bcs.n	80007b4 <__udivmoddi4+0x14c>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f200 80bb 	bhi.w	800092a <__udivmoddi4+0x2c2>
 80007b4:	4610      	mov	r0, r2
 80007b6:	eba4 040e 	sub.w	r4, r4, lr
 80007ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007be:	e79f      	b.n	8000700 <__udivmoddi4+0x98>
 80007c0:	f1c1 0720 	rsb	r7, r1, #32
 80007c4:	408b      	lsls	r3, r1
 80007c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ce:	fa05 f401 	lsl.w	r4, r5, r1
 80007d2:	fa20 f307 	lsr.w	r3, r0, r7
 80007d6:	40fd      	lsrs	r5, r7
 80007d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007dc:	4323      	orrs	r3, r4
 80007de:	fbb5 f8f9 	udiv	r8, r5, r9
 80007e2:	fa1f fe8c 	uxth.w	lr, ip
 80007e6:	fb09 5518 	mls	r5, r9, r8, r5
 80007ea:	0c1c      	lsrs	r4, r3, #16
 80007ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007f0:	fb08 f50e 	mul.w	r5, r8, lr
 80007f4:	42a5      	cmp	r5, r4
 80007f6:	fa02 f201 	lsl.w	r2, r2, r1
 80007fa:	fa00 f001 	lsl.w	r0, r0, r1
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1c 0404 	adds.w	r4, ip, r4
 8000804:	f108 3aff 	add.w	sl, r8, #4294967295
 8000808:	f080 8088 	bcs.w	800091c <__udivmoddi4+0x2b4>
 800080c:	42a5      	cmp	r5, r4
 800080e:	f240 8085 	bls.w	800091c <__udivmoddi4+0x2b4>
 8000812:	f1a8 0802 	sub.w	r8, r8, #2
 8000816:	4464      	add	r4, ip
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	b29d      	uxth	r5, r3
 800081c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000820:	fb09 4413 	mls	r4, r9, r3, r4
 8000824:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000828:	fb03 fe0e 	mul.w	lr, r3, lr
 800082c:	45a6      	cmp	lr, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1c 0404 	adds.w	r4, ip, r4
 8000834:	f103 35ff 	add.w	r5, r3, #4294967295
 8000838:	d26c      	bcs.n	8000914 <__udivmoddi4+0x2ac>
 800083a:	45a6      	cmp	lr, r4
 800083c:	d96a      	bls.n	8000914 <__udivmoddi4+0x2ac>
 800083e:	3b02      	subs	r3, #2
 8000840:	4464      	add	r4, ip
 8000842:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000846:	fba3 9502 	umull	r9, r5, r3, r2
 800084a:	eba4 040e 	sub.w	r4, r4, lr
 800084e:	42ac      	cmp	r4, r5
 8000850:	46c8      	mov	r8, r9
 8000852:	46ae      	mov	lr, r5
 8000854:	d356      	bcc.n	8000904 <__udivmoddi4+0x29c>
 8000856:	d053      	beq.n	8000900 <__udivmoddi4+0x298>
 8000858:	b156      	cbz	r6, 8000870 <__udivmoddi4+0x208>
 800085a:	ebb0 0208 	subs.w	r2, r0, r8
 800085e:	eb64 040e 	sbc.w	r4, r4, lr
 8000862:	fa04 f707 	lsl.w	r7, r4, r7
 8000866:	40ca      	lsrs	r2, r1
 8000868:	40cc      	lsrs	r4, r1
 800086a:	4317      	orrs	r7, r2
 800086c:	e9c6 7400 	strd	r7, r4, [r6]
 8000870:	4618      	mov	r0, r3
 8000872:	2100      	movs	r1, #0
 8000874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000878:	f1c3 0120 	rsb	r1, r3, #32
 800087c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000880:	fa20 f201 	lsr.w	r2, r0, r1
 8000884:	fa25 f101 	lsr.w	r1, r5, r1
 8000888:	409d      	lsls	r5, r3
 800088a:	432a      	orrs	r2, r5
 800088c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fbb1 f0f7 	udiv	r0, r1, r7
 8000898:	fb07 1510 	mls	r5, r7, r0, r1
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008a2:	fb00 f50e 	mul.w	r5, r0, lr
 80008a6:	428d      	cmp	r5, r1
 80008a8:	fa04 f403 	lsl.w	r4, r4, r3
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x258>
 80008ae:	eb1c 0101 	adds.w	r1, ip, r1
 80008b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008b6:	d22f      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008b8:	428d      	cmp	r5, r1
 80008ba:	d92d      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008bc:	3802      	subs	r0, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1b49      	subs	r1, r1, r5
 80008c2:	b292      	uxth	r2, r2
 80008c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008c8:	fb07 1115 	mls	r1, r7, r5, r1
 80008cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d0:	fb05 f10e 	mul.w	r1, r5, lr
 80008d4:	4291      	cmp	r1, r2
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x282>
 80008d8:	eb1c 0202 	adds.w	r2, ip, r2
 80008dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e0:	d216      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 80008e2:	4291      	cmp	r1, r2
 80008e4:	d914      	bls.n	8000910 <__udivmoddi4+0x2a8>
 80008e6:	3d02      	subs	r5, #2
 80008e8:	4462      	add	r2, ip
 80008ea:	1a52      	subs	r2, r2, r1
 80008ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008f0:	e738      	b.n	8000764 <__udivmoddi4+0xfc>
 80008f2:	4631      	mov	r1, r6
 80008f4:	4630      	mov	r0, r6
 80008f6:	e708      	b.n	800070a <__udivmoddi4+0xa2>
 80008f8:	4639      	mov	r1, r7
 80008fa:	e6e6      	b.n	80006ca <__udivmoddi4+0x62>
 80008fc:	4610      	mov	r0, r2
 80008fe:	e6fb      	b.n	80006f8 <__udivmoddi4+0x90>
 8000900:	4548      	cmp	r0, r9
 8000902:	d2a9      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000904:	ebb9 0802 	subs.w	r8, r9, r2
 8000908:	eb65 0e0c 	sbc.w	lr, r5, ip
 800090c:	3b01      	subs	r3, #1
 800090e:	e7a3      	b.n	8000858 <__udivmoddi4+0x1f0>
 8000910:	4645      	mov	r5, r8
 8000912:	e7ea      	b.n	80008ea <__udivmoddi4+0x282>
 8000914:	462b      	mov	r3, r5
 8000916:	e794      	b.n	8000842 <__udivmoddi4+0x1da>
 8000918:	4640      	mov	r0, r8
 800091a:	e7d1      	b.n	80008c0 <__udivmoddi4+0x258>
 800091c:	46d0      	mov	r8, sl
 800091e:	e77b      	b.n	8000818 <__udivmoddi4+0x1b0>
 8000920:	3d02      	subs	r5, #2
 8000922:	4462      	add	r2, ip
 8000924:	e732      	b.n	800078c <__udivmoddi4+0x124>
 8000926:	4608      	mov	r0, r1
 8000928:	e70a      	b.n	8000740 <__udivmoddi4+0xd8>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	e742      	b.n	80007b6 <__udivmoddi4+0x14e>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fd93 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f873 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 f903 	bl	8000b4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000946:	f000 f8d1 	bl	8000aec <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	492d      	ldr	r1, [pc, #180]	; (8000a08 <main+0xd4>)
 8000952:	482e      	ldr	r0, [pc, #184]	; (8000a0c <main+0xd8>)
 8000954:	f003 fb7c 	bl	8004050 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095c:	222f      	movs	r2, #47	; 0x2f
 800095e:	492c      	ldr	r1, [pc, #176]	; (8000a10 <main+0xdc>)
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <main+0xd8>)
 8000962:	f003 fb75 	bl	8004050 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8000966:	f000 fc9f 	bl	80012a8 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	2231      	movs	r2, #49	; 0x31
 8000970:	4928      	ldr	r1, [pc, #160]	; (8000a14 <main+0xe0>)
 8000972:	4826      	ldr	r0, [pc, #152]	; (8000a0c <main+0xd8>)
 8000974:	f003 fb6c 	bl	8004050 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp_value = BSP_TSENSOR_ReadTemp(); //Reads the temperature value from a temperature sensor
 8000978:	f000 fcb2 	bl	80012e0 <BSP_TSENSOR_ReadTemp>
 800097c:	eef0 7a40 	vmov.f32	s15, s0
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <main+0xe4>)
 8000982:	edc3 7a00 	vstr	s15, [r3]
	  int tempInt0 = temp_value;   //Stores the integer part of the temperature value in tempInt0
 8000986:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <main+0xe4>)
 8000988:	edd3 7a00 	vldr	s15, [r3]
 800098c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000990:	ee17 3a90 	vmov	r3, s15
 8000994:	60fb      	str	r3, [r7, #12]
	  float tempFrac = temp_value - tempInt0; //Calculates the fractional part of the temperature value and stores it in tempF
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <main+0xe4>)
 8000998:	ed93 7a00 	vldr	s14, [r3]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009aa:	edc7 7a02 	vstr	s15, [r7, #8]
	  int tempInt1 = trunc(tempFrac * 100); //Calculates the fractional part of the temperature value as an integer by multiplying it by 100 and truncating the result
 80009ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80009b2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000a1c <main+0xe8>
 80009b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ba:	ee17 0a90 	vmov	r0, s15
 80009be:	f7ff fdbb 	bl	8000538 <__aeabi_f2d>
 80009c2:	4602      	mov	r2, r0
 80009c4:	460b      	mov	r3, r1
 80009c6:	ec43 2b10 	vmov	d0, r2, r3
 80009ca:	f004 fd51 	bl	8005470 <trunc>
 80009ce:	ec53 2b10 	vmov	r2, r3, d0
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	f7ff fe07 	bl	80005e8 <__aeabi_d2iz>
 80009da:	4603      	mov	r3, r0
 80009dc:	607b      	str	r3, [r7, #4]
	  //The trunc() function truncates the fractional part of a floating-point number.
	  snprintf(str_tmp,100," TEMPERATURE = %d.%d \n\r", tempInt0, tempInt1);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <main+0xec>)
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	480e      	ldr	r0, [pc, #56]	; (8000a24 <main+0xf0>)
 80009ea:	f004 f889 	bl	8004b00 <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	2264      	movs	r2, #100	; 0x64
 80009f4:	490b      	ldr	r1, [pc, #44]	; (8000a24 <main+0xf0>)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <main+0xd8>)
 80009f8:	f003 fb2a 	bl	8004050 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a00:	f000 fda4 	bl	800154c <HAL_Delay>
  {
 8000a04:	e7b8      	b.n	8000978 <main+0x44>
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	2000011c 	.word	0x2000011c
 8000a10:	20000030 	.word	0x20000030
 8000a14:	20000060 	.word	0x20000060
 8000a18:	200001a4 	.word	0x200001a4
 8000a1c:	42c80000 	.word	0x42c80000
 8000a20:	080054fc 	.word	0x080054fc
 8000a24:	200001a8 	.word	0x200001a8

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b096      	sub	sp, #88	; 0x58
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2244      	movs	r2, #68	; 0x44
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 f896 	bl	8004b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a4e:	f001 ff8f 	bl	8002970 <HAL_PWREx_ControlVoltageScaling>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a58:	f000 f8c0 	bl	8000bdc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a5c:	f001 ff6a 	bl	8002934 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <SystemClock_Config+0xc0>)
 8000a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <SystemClock_Config+0xc0>)
 8000a68:	f023 0318 	bic.w	r3, r3, #24
 8000a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a70:	2314      	movs	r3, #20
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a80:	2360      	movs	r3, #96	; 0x60
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a90:	2328      	movs	r3, #40	; 0x28
 8000a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 ffb9 	bl	8002a1c <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f894 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2104      	movs	r1, #4
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fb81 	bl	80031d4 <HAL_RCC_ClockConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ad8:	f000 f880 	bl	8000bdc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000adc:	f003 f888 	bl	8003bf0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ae0:	bf00      	nop
 8000ae2:	3758      	adds	r7, #88	; 0x58
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 1 */
	  huart1.Instance = USART1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART1_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b30:	f003 fa40 	bl	8003fb4 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x52>
	  {
	    Error_Handler();
 8000b3a:	f000 f84f 	bl	8000bdc <Error_Handler>
	  }

	}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000011c 	.word	0x2000011c
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_GPIO_Init+0x8c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END MX_GPIO_Init_1 */

}
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x44>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x44>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0ac      	sub	sp, #176	; 0xb0
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2288      	movs	r2, #136	; 0x88
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 ff89 	bl	8004b68 <memset>
  if(hi2c->Instance==I2C2)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <HAL_I2C_MspInit+0xb0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d13b      	bne.n	8000cd8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 fcd5 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c78:	f7ff ffb0 	bl	8000bdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <HAL_I2C_MspInit+0xb8>)
 8000cbc:	f000 fd7c 	bl	80017b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_I2C_MspInit+0xb4>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	37b0      	adds	r7, #176	; 0xb0
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40005800 	.word	0x40005800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400

08000cec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <HAL_I2C_MspDeInit+0x3c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10f      	bne.n	8000d1e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_I2C_MspDeInit+0x40>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_I2C_MspDeInit+0x40>)
 8000d04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8000d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <HAL_I2C_MspDeInit+0x44>)
 8000d10:	f000 fefc 	bl	8001b0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8000d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_I2C_MspDeInit+0x44>)
 8000d1a:	f000 fef7 	bl	8001b0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005800 	.word	0x40005800
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000400 	.word	0x48000400

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ae      	sub	sp, #184	; 0xb8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2288      	movs	r2, #136	; 0x88
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 ff07 	bl	8004b68 <memset>
  if(huart->Instance==USART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_UART_MspInit+0x134>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d13b      	bne.n	8000ddc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fc53 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d7c:	f7ff ff2e 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d80:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d84:	4a39      	ldr	r2, [pc, #228]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	4a33      	ldr	r2, [pc, #204]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4826      	ldr	r0, [pc, #152]	; (8000e70 <HAL_UART_MspInit+0x13c>)
 8000dd6:	f000 fcef 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dda:	e040      	b.n	8000e5e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <HAL_UART_MspInit+0x140>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d13b      	bne.n	8000e5e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de6:	2304      	movs	r3, #4
 8000de8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fc12 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000dfe:	f7ff feed 	bl	8000bdc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0x138>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000e32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <HAL_UART_MspInit+0x144>)
 8000e5a:	f000 fcad 	bl	80017b8 <HAL_GPIO_Init>
}
 8000e5e:	bf00      	nop
 8000e60:	37b8      	adds	r7, #184	; 0xb8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400
 8000e74:	40004800 	.word	0x40004800
 8000e78:	48000c00 	.word	0x48000c00

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 fb20 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8000ed4:	2020      	movs	r0, #32
 8000ed6:	f000 ff0d 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8000eda:	2040      	movs	r0, #64	; 0x40
 8000edc:	f000 ff0a 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8000ee0:	2080      	movs	r0, #128	; 0x80
 8000ee2:	f000 ff07 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8000ee6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000eea:	f000 ff03 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8000ef6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000efa:	f000 fefb 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000efe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f02:	f000 fef7 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8000f06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f0a:	f000 fef3 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8000f0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f12:	f000 feef 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8000f16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f1a:	f000 feeb 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fe10 	bl	8004b78 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20018000 	.word	0x20018000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	2000020c 	.word	0x2000020c
 8000f8c:	200003b8 	.word	0x200003b8

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 fdcf 	bl	8004b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fca5 	bl	8000934 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000ff8:	080055a0 	.word	0x080055a0
  ldr r2, =_sbss
 8000ffc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001000:	200003b4 	.word	0x200003b4

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>
	...

08001008 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <I2Cx_MspInit+0xa8>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800102c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800102e:	2312      	movs	r3, #18
 8001030:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800103a:	2304      	movs	r3, #4
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <I2Cx_MspInit+0xac>)
 8001046:	f000 fbb7 	bl	80017b8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4818      	ldr	r0, [pc, #96]	; (80010b4 <I2Cx_MspInit+0xac>)
 8001052:	f000 fbb1 	bl	80017b8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <I2Cx_MspInit+0xa8>)
 800105c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001078:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <I2Cx_MspInit+0xa8>)
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <I2Cx_MspInit+0xa8>)
 8001080:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001084:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	210f      	movs	r1, #15
 800108a:	2021      	movs	r0, #33	; 0x21
 800108c:	f000 fb5d 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001090:	2021      	movs	r0, #33	; 0x21
 8001092:	f000 fb76 	bl	8001782 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	210f      	movs	r1, #15
 800109a:	2022      	movs	r0, #34	; 0x22
 800109c:	f000 fb55 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80010a0:	2022      	movs	r0, #34	; 0x22
 80010a2:	f000 fb6e 	bl	8001782 <HAL_NVIC_EnableIRQ>
}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400

080010b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <I2Cx_Init+0x54>)
 80010c4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a11      	ldr	r2, [pc, #68]	; (8001110 <I2Cx_Init+0x58>)
 80010ca:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff89 	bl	8001008 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fe1f 	bl	8001d3a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80010fc:	2100      	movs	r1, #0
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f001 fbcc 	bl	800289c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40005800 	.word	0x40005800
 8001110:	00702681 	.word	0x00702681

08001114 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af04      	add	r7, sp, #16
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4603      	mov	r3, r0
 8001124:	72fb      	strb	r3, [r7, #11]
 8001126:	460b      	mov	r3, r1
 8001128:	813b      	strh	r3, [r7, #8]
 800112a:	4613      	mov	r3, r2
 800112c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	b299      	uxth	r1, r3
 8001136:	88f8      	ldrh	r0, [r7, #6]
 8001138:	893a      	ldrh	r2, [r7, #8]
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	4603      	mov	r3, r0
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 ffd4 	bl	80020f8 <HAL_I2C_Mem_Read>
 8001150:	4603      	mov	r3, r0
 8001152:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d004      	beq.n	8001164 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	4619      	mov	r1, r3
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f832 	bl	80011c8 <I2Cx_Error>
  }
  return status;
 8001164:	7dfb      	ldrb	r3, [r7, #23]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b08a      	sub	sp, #40	; 0x28
 8001172:	af04      	add	r7, sp, #16
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	4608      	mov	r0, r1
 8001178:	4611      	mov	r1, r2
 800117a:	461a      	mov	r2, r3
 800117c:	4603      	mov	r3, r0
 800117e:	72fb      	strb	r3, [r7, #11]
 8001180:	460b      	mov	r3, r1
 8001182:	813b      	strh	r3, [r7, #8]
 8001184:	4613      	mov	r3, r2
 8001186:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800118c:	7afb      	ldrb	r3, [r7, #11]
 800118e:	b299      	uxth	r1, r3
 8001190:	88f8      	ldrh	r0, [r7, #6]
 8001192:	893a      	ldrh	r2, [r7, #8]
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4603      	mov	r3, r0
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 fe93 	bl	8001ed0 <HAL_I2C_Mem_Write>
 80011aa:	4603      	mov	r3, r0
 80011ac:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d004      	beq.n	80011be <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80011b4:	7afb      	ldrb	r3, [r7, #11]
 80011b6:	4619      	mov	r1, r3
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 f805 	bl	80011c8 <I2Cx_Error>
  }
  return status;
 80011be:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fe4b 	bl	8001e70 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff6c 	bl	80010b8 <I2Cx_Init>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <SENSOR_IO_Init+0x10>)
 80011ee:	f7ff ff63 	bl	80010b8 <I2Cx_Init>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000210 	.word	0x20000210

080011fc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	460b      	mov	r3, r1
 8001208:	71bb      	strb	r3, [r7, #6]
 800120a:	4613      	mov	r3, r2
 800120c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800120e:	79bb      	ldrb	r3, [r7, #6]
 8001210:	b29a      	uxth	r2, r3
 8001212:	79f9      	ldrb	r1, [r7, #7]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	1d7b      	adds	r3, r7, #5
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <SENSOR_IO_Write+0x30>)
 8001220:	f7ff ffa5 	bl	800116e <I2Cx_WriteMultiple>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000210 	.word	0x20000210

08001230 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	b29a      	uxth	r2, r3
 8001248:	79f9      	ldrb	r1, [r7, #7]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f107 030f 	add.w	r3, r7, #15
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <SENSOR_IO_Read+0x38>)
 8001258:	f7ff ff5c 	bl	8001114 <I2Cx_ReadMultiple>

  return read_value;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000210 	.word	0x20000210

0800126c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af02      	add	r7, sp, #8
 8001272:	603a      	str	r2, [r7, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	460b      	mov	r3, r1
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	4613      	mov	r3, r2
 8001280:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	b29a      	uxth	r2, r3
 8001286:	79f9      	ldrb	r1, [r7, #7]
 8001288:	88bb      	ldrh	r3, [r7, #4]
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <SENSOR_IO_ReadMultiple+0x38>)
 8001294:	f7ff ff3e 	bl	8001114 <I2Cx_ReadMultiple>
 8001298:	4603      	mov	r3, r0
 800129a:	b29b      	uxth	r3, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000210 	.word	0x20000210

080012a8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <BSP_TSENSOR_Init+0x30>)
 80012b4:	4a09      	ldr	r2, [pc, #36]	; (80012dc <BSP_TSENSOR_Init+0x34>)
 80012b6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80012b8:	f7ff ff96 	bl	80011e8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <BSP_TSENSOR_Init+0x30>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2100      	movs	r1, #0
 80012c4:	20be      	movs	r0, #190	; 0xbe
 80012c6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000264 	.word	0x20000264
 80012dc:	20000098 	.word	0x20000098

080012e0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <BSP_TSENSOR_ReadTemp+0x18>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	20be      	movs	r0, #190	; 0xbe
 80012ec:	4798      	blx	r3
 80012ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80012f2:	eeb0 0a67 	vmov.f32	s0, s15
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000264 	.word	0x20000264

080012fc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2120      	movs	r1, #32
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff8e 	bl	8001230 <SENSOR_IO_Read>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	f023 0304 	bic.w	r3, r3, #4
 800131e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	2120      	movs	r1, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff57 	bl	80011fc <SENSOR_IO_Write>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	b2d8      	uxtb	r0, r3
 8001364:	f107 0208 	add.w	r2, r7, #8
 8001368:	2302      	movs	r3, #2
 800136a:	21b2      	movs	r1, #178	; 0xb2
 800136c:	f7ff ff7e 	bl	800126c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2135      	movs	r1, #53	; 0x35
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff5a 	bl	8001230 <SENSOR_IO_Read>
 800137c:	4603      	mov	r3, r0
 800137e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21b      	sxth	r3, r3
 8001386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800138a:	b21a      	sxth	r2, r3
 800138c:	7a3b      	ldrb	r3, [r7, #8]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	019b      	lsls	r3, r3, #6
 8001398:	b21b      	sxth	r3, r3
 800139a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800139e:	b21a      	sxth	r2, r3
 80013a0:	7a7b      	ldrb	r3, [r7, #9]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80013a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013ac:	10db      	asrs	r3, r3, #3
 80013ae:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80013b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013b4:	10db      	asrs	r3, r3, #3
 80013b6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	b2d8      	uxtb	r0, r3
 80013bc:	f107 0208 	add.w	r2, r7, #8
 80013c0:	2304      	movs	r3, #4
 80013c2:	21bc      	movs	r1, #188	; 0xbc
 80013c4:	f7ff ff52 	bl	800126c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013c8:	7a7b      	ldrb	r3, [r7, #9]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	7a3b      	ldrb	r3, [r7, #8]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	7abb      	ldrb	r3, [r7, #10]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	b2d8      	uxtb	r0, r3
 80013e8:	f107 0208 	add.w	r2, r7, #8
 80013ec:	2302      	movs	r3, #2
 80013ee:	21aa      	movs	r1, #170	; 0xaa
 80013f0:	f7ff ff3c 	bl	800126c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013f4:	7a7b      	ldrb	r3, [r7, #9]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7a3b      	ldrb	r3, [r7, #8]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001402:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001406:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001418:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	ee67 6a27 	vmul.f32	s13, s14, s15
 800142a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800142e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001440:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001450:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	ee07 3a90 	vmov	s15, r3
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f960 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f80d 	bl	8001494 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	e001      	b.n	800148a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001486:	f7ff fbaf 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148a:	79fb      	ldrb	r3, [r7, #7]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_InitTick+0x6c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d023      	beq.n	80014f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_InitTick+0x70>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_InitTick+0x6c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f96d 	bl	800179e <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d809      	bhi.n	80014e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f937 	bl	800174a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_InitTick+0x74>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e007      	b.n	80014f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e004      	b.n	80014f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e001      	b.n	80014f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000ac 	.word	0x200000ac
 8001504:	20000094 	.word	0x20000094
 8001508:	200000a8 	.word	0x200000a8

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200000ac 	.word	0x200000ac
 8001530:	20000268 	.word	0x20000268

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000268 	.word	0x20000268

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000ac 	.word	0x200000ac

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e17f      	b.n	8001ac8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8171 	beq.w	8001ac2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d005      	beq.n	80017f8 <HAL_GPIO_Init+0x40>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d130      	bne.n	800185a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182e:	2201      	movs	r2, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f003 0201 	and.w	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b03      	cmp	r3, #3
 8001864:	d118      	bne.n	8001898 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800186c:	2201      	movs	r2, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f003 0201 	and.w	r2, r3, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d017      	beq.n	80018d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d123      	bne.n	8001928 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	08da      	lsrs	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3208      	adds	r2, #8
 8001922:	6939      	ldr	r1, [r7, #16]
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80ac 	beq.w	8001ac2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_GPIO_Init+0x330>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	4a5e      	ldr	r2, [pc, #376]	; (8001ae8 <HAL_GPIO_Init+0x330>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6613      	str	r3, [r2, #96]	; 0x60
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_GPIO_Init+0x330>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_GPIO_Init+0x334>)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x242>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4f      	ldr	r2, [pc, #316]	; (8001af0 <HAL_GPIO_Init+0x338>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x23e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4e      	ldr	r2, [pc, #312]	; (8001af4 <HAL_GPIO_Init+0x33c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x23a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4d      	ldr	r2, [pc, #308]	; (8001af8 <HAL_GPIO_Init+0x340>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x236>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_GPIO_Init+0x344>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x232>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4b      	ldr	r2, [pc, #300]	; (8001b00 <HAL_GPIO_Init+0x348>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x22e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4a      	ldr	r2, [pc, #296]	; (8001b04 <HAL_GPIO_Init+0x34c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x22a>
 80019de:	2306      	movs	r3, #6
 80019e0:	e00c      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019e2:	2307      	movs	r3, #7
 80019e4:	e00a      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019e6:	2305      	movs	r3, #5
 80019e8:	e008      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019ee:	2303      	movs	r3, #3
 80019f0:	e004      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x244>
 80019fa:	2300      	movs	r3, #0
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	f002 0203 	and.w	r2, r2, #3
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	4093      	lsls	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a0c:	4937      	ldr	r1, [pc, #220]	; (8001aec <HAL_GPIO_Init+0x334>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a3e:	4a32      	ldr	r2, [pc, #200]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_GPIO_Init+0x350>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f ae78 	bne.w	80017c8 <HAL_GPIO_Init+0x10>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000
 8001af0:	48000400 	.word	0x48000400
 8001af4:	48000800 	.word	0x48000800
 8001af8:	48000c00 	.word	0x48000c00
 8001afc:	48001000 	.word	0x48001000
 8001b00:	48001400 	.word	0x48001400
 8001b04:	48001800 	.word	0x48001800
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001b1a:	e0cd      	b.n	8001cb8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80c0 	beq.w	8001cb2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001b32:	4a68      	ldr	r2, [pc, #416]	; (8001cd4 <HAL_GPIO_DeInit+0x1c8>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b5a:	d025      	beq.n	8001ba8 <HAL_GPIO_DeInit+0x9c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_GPIO_DeInit+0x1cc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d01f      	beq.n	8001ba4 <HAL_GPIO_DeInit+0x98>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <HAL_GPIO_DeInit+0x1d0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d019      	beq.n	8001ba0 <HAL_GPIO_DeInit+0x94>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_GPIO_DeInit+0x1d4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_GPIO_DeInit+0x90>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a5b      	ldr	r2, [pc, #364]	; (8001ce4 <HAL_GPIO_DeInit+0x1d8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_DeInit+0x8c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ce8 <HAL_GPIO_DeInit+0x1dc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_DeInit+0x88>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a59      	ldr	r2, [pc, #356]	; (8001cec <HAL_GPIO_DeInit+0x1e0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_DeInit+0x84>
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	e00c      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001b90:	2307      	movs	r3, #7
 8001b92:	e00a      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001b94:	2305      	movs	r3, #5
 8001b96:	e008      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_DeInit+0x9e>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d132      	bne.n	8001c20 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001bba:	4b4d      	ldr	r3, [pc, #308]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	494b      	ldr	r1, [pc, #300]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001bc8:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4947      	ldr	r1, [pc, #284]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001bd6:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4944      	ldr	r1, [pc, #272]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4940      	ldr	r1, [pc, #256]	; (8001cf0 <HAL_GPIO_DeInit+0x1e4>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001c02:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <HAL_GPIO_DeInit+0x1c8>)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43da      	mvns	r2, r3
 8001c12:	4830      	ldr	r0, [pc, #192]	; (8001cd4 <HAL_GPIO_DeInit+0x1c8>)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	400a      	ands	r2, r1
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2103      	movs	r1, #3
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	08d2      	lsrs	r2, r2, #3
 8001c54:	4019      	ands	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2103      	movs	r1, #3
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2103      	movs	r1, #3
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	401a      	ands	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	401a      	ands	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f af2b 	bne.w	8001b1c <HAL_GPIO_DeInit+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	48000800 	.word	0x48000800
 8001ce0:	48000c00 	.word	0x48000c00
 8001ce4:	48001000 	.word	0x48001000
 8001ce8:	48001400 	.word	0x48001400
 8001cec:	48001800 	.word	0x48001800
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f806 	bl	8001d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e08d      	b.n	8001e68 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d106      	bne.n	8001d66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7fe ff65 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2224      	movs	r2, #36	; 0x24
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	e006      	b.n	8001dc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d108      	bne.n	8001ddc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	e007      	b.n	8001dec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69d9      	ldr	r1, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1a      	ldr	r2, [r3, #32]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e021      	b.n	8001ec6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2224      	movs	r2, #36	; 0x24
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe ff26 	bl	8000cec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	f040 80f9 	bne.w	80020ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_I2C_Mem_Write+0x34>
 8001efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ed      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Mem_Write+0x4e>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e0e6      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f26:	f7ff fb05 	bl	8001534 <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2319      	movs	r3, #25
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fac3 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0d1      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2221      	movs	r2, #33	; 0x21
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f70:	88f8      	ldrh	r0, [r7, #6]
 8001f72:	893a      	ldrh	r2, [r7, #8]
 8001f74:	8979      	ldrh	r1, [r7, #10]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4603      	mov	r3, r0
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f9d3 	bl	800232c <I2C_RequestMemoryWrite>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0a9      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d90e      	bls.n	8001fc0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	22ff      	movs	r2, #255	; 0xff
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	8979      	ldrh	r1, [r7, #10]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fc3d 	bl	8002838 <I2C_TransferConfig>
 8001fbe:	e00f      	b.n	8001fe0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fc2c 	bl	8002838 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fabc 	bl	8002562 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e07b      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d034      	beq.n	8002098 <HAL_I2C_Mem_Write+0x1c8>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d130      	bne.n	8002098 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fa3f 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04d      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d90e      	bls.n	8002078 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	22ff      	movs	r2, #255	; 0xff
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	b2da      	uxtb	r2, r3
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fbe1 	bl	8002838 <I2C_TransferConfig>
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fbd0 	bl	8002838 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d19e      	bne.n	8001fe0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 faa2 	bl	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e01a      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_I2C_Mem_Write+0x224>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	fe00e800 	.word	0xfe00e800

080020f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	f040 80fd 	bne.w	800231a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_I2C_Mem_Read+0x34>
 8002126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0f1      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Mem_Read+0x4e>
 8002142:	2302      	movs	r3, #2
 8002144:	e0ea      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800214e:	f7ff f9f1 	bl	8001534 <HAL_GetTick>
 8002152:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2319      	movs	r3, #25
 800215a:	2201      	movs	r2, #1
 800215c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f9af 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0d5      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2222      	movs	r2, #34	; 0x22
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002198:	88f8      	ldrh	r0, [r7, #6]
 800219a:	893a      	ldrh	r2, [r7, #8]
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4603      	mov	r3, r0
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f913 	bl	80023d4 <I2C_RequestMemoryRead>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0ad      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2bff      	cmp	r3, #255	; 0xff
 80021c8:	d90e      	bls.n	80021e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	22ff      	movs	r2, #255	; 0xff
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	4b52      	ldr	r3, [pc, #328]	; (8002324 <HAL_I2C_Mem_Read+0x22c>)
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fb29 	bl	8002838 <I2C_TransferConfig>
 80021e6:	e00f      	b.n	8002208 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	8979      	ldrh	r1, [r7, #10]
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_I2C_Mem_Read+0x22c>)
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb18 	bl	8002838 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220e:	2200      	movs	r2, #0
 8002210:	2104      	movs	r1, #4
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f956 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07c      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d034      	beq.n	80022c8 <HAL_I2C_Mem_Read+0x1d0>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	d130      	bne.n	80022c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	2200      	movs	r2, #0
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f927 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e04d      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2bff      	cmp	r3, #255	; 0xff
 8002288:	d90e      	bls.n	80022a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	b2da      	uxtb	r2, r3
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	2300      	movs	r3, #0
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fac9 	bl	8002838 <I2C_TransferConfig>
 80022a6:	e00f      	b.n	80022c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fab8 	bl	8002838 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d19a      	bne.n	8002208 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f98a 	bl	80025f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e01a      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2220      	movs	r2, #32
 80022ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_I2C_Mem_Read+0x230>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	80002400 	.word	0x80002400
 8002328:	fe00e800 	.word	0xfe00e800

0800232c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	8979      	ldrh	r1, [r7, #10]
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <I2C_RequestMemoryWrite+0xa4>)
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fa6f 	bl	8002838 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	69b9      	ldr	r1, [r7, #24]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8ff 	bl	8002562 <I2C_WaitOnTXISFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e02c      	b.n	80023c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d105      	bne.n	8002380 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002374:	893b      	ldrh	r3, [r7, #8]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
 800237e:	e015      	b.n	80023ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002380:	893b      	ldrh	r3, [r7, #8]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f8e5 	bl	8002562 <I2C_WaitOnTXISFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e012      	b.n	80023c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023a2:	893b      	ldrh	r3, [r7, #8]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f884 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	80002000 	.word	0x80002000

080023d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <I2C_RequestMemoryRead+0xa4>)
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa1c 	bl	8002838 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f8ac 	bl	8002562 <I2C_WaitOnTXISFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e02c      	b.n	800246e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800241a:	893b      	ldrh	r3, [r7, #8]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
 8002424:	e015      	b.n	8002452 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f892 	bl	8002562 <I2C_WaitOnTXISFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e012      	b.n	800246e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2200      	movs	r2, #0
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f831 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	80002000 	.word	0x80002000

0800247c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d103      	bne.n	800249a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d007      	beq.n	80024b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	619a      	str	r2, [r3, #24]
  }
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d4:	e031      	b.n	800253a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d02d      	beq.n	800253a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7ff f829 	bl	8001534 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d122      	bne.n	800253a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	429a      	cmp	r2, r3
 8002510:	d113      	bne.n	800253a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	429a      	cmp	r2, r3
 8002556:	d0be      	beq.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800256e:	e033      	b.n	80025d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f87f 	bl	8002678 <I2C_IsErrorOccurred>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e031      	b.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d025      	beq.n	80025d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7fe ffd2 	bl	8001534 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11a      	bne.n	80025d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d013      	beq.n	80025d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e007      	b.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d1c4      	bne.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025fc:	e02f      	b.n	800265e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f838 	bl	8002678 <I2C_IsErrorOccurred>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e02d      	b.n	800266e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7fe ff8f 	bl	8001534 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11a      	bne.n	800265e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	d013      	beq.n	800265e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e007      	b.n	800266e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b20      	cmp	r3, #32
 800266a:	d1c8      	bne.n	80025fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d068      	beq.n	8002776 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2210      	movs	r2, #16
 80026aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ac:	e049      	b.n	8002742 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d045      	beq.n	8002742 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7fe ff3d 	bl	8001534 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <I2C_IsErrorOccurred+0x54>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d13a      	bne.n	8002742 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ee:	d121      	bne.n	8002734 <I2C_IsErrorOccurred+0xbc>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f6:	d01d      	beq.n	8002734 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d01a      	beq.n	8002734 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800270e:	f7fe ff11 	bl	8001534 <HAL_GetTick>
 8002712:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002714:	e00e      	b.n	8002734 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002716:	f7fe ff0d 	bl	8001534 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b19      	cmp	r3, #25
 8002722:	d907      	bls.n	8002734 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f043 0320 	orr.w	r3, r3, #32
 800272a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002732:	e006      	b.n	8002742 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d1e9      	bne.n	8002716 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b20      	cmp	r3, #32
 800274e:	d003      	beq.n	8002758 <I2C_IsErrorOccurred+0xe0>
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0aa      	beq.n	80026ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2220      	movs	r2, #32
 8002766:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01c      	beq.n	8002826 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff fe45 	bl	800247c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <I2C_IsErrorOccurred+0x1bc>)
 80027fe:	400b      	ands	r3, r1
 8002800:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	431a      	orrs	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800282a:	4618      	mov	r0, r3
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	fe00e800 	.word	0xfe00e800

08002838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	460b      	mov	r3, r1
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	4613      	mov	r3, r2
 8002848:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002850:	7a7b      	ldrb	r3, [r7, #9]
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002858:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	4313      	orrs	r3, r2
 8002862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002866:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	0d5b      	lsrs	r3, r3, #21
 8002872:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <I2C_TransferConfig+0x60>)
 8002878:	430b      	orrs	r3, r1
 800287a:	43db      	mvns	r3, r3
 800287c:	ea02 0103 	and.w	r1, r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	03ff63ff 	.word	0x03ff63ff

0800289c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d138      	bne.n	8002924 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028bc:	2302      	movs	r3, #2
 80028be:	e032      	b.n	8002926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6819      	ldr	r1, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e000      	b.n	8002926 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002924:	2302      	movs	r3, #2
  }
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000

08002954 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <HAL_PWREx_GetVoltageRange+0x18>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40007000 	.word	0x40007000

08002970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297e:	d130      	bne.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002980:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298c:	d038      	beq.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002996:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800299e:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2232      	movs	r2, #50	; 0x32
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	0c9b      	lsrs	r3, r3, #18
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b4:	e002      	b.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c8:	d102      	bne.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f2      	bne.n	80029b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029dc:	d110      	bne.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e00f      	b.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ee:	d007      	beq.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000
 8002a14:	20000094 	.word	0x20000094
 8002a18:	431bde83 	.word	0x431bde83

08002a1c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3ca      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4b97      	ldr	r3, [pc, #604]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	4b94      	ldr	r3, [pc, #592]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80e4 	beq.w	8002c18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4a>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	f040 808b 	bne.w	8002b74 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 8087 	bne.w	8002b74 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a66:	4b89      	ldr	r3, [pc, #548]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x62>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e3a2      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1a      	ldr	r2, [r3, #32]
 8002a82:	4b82      	ldr	r3, [pc, #520]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_RCC_OscConfig+0x7c>
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a96:	e005      	b.n	8002aa4 <HAL_RCC_OscConfig+0x88>
 8002a98:	4b7c      	ldr	r3, [pc, #496]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d223      	bcs.n	8002af0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fd55 	bl	800355c <RCC_SetFlashLatencyFromMSIRange>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e383      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002abc:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a72      	ldr	r2, [pc, #456]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	496d      	ldr	r1, [pc, #436]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ada:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	4968      	ldr	r1, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
 8002aee:	e025      	b.n	8002b3c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002af6:	f043 0308 	orr.w	r3, r3, #8
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b63      	ldr	r3, [pc, #396]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4960      	ldr	r1, [pc, #384]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	495b      	ldr	r1, [pc, #364]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd15 	bl	800355c <RCC_SetFlashLatencyFromMSIRange>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e343      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b3c:	f000 fc4a 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	4950      	ldr	r1, [pc, #320]	; (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b5c:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fc97 	bl	8001494 <HAL_InitTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d052      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	e327      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d032      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b7c:	4b43      	ldr	r3, [pc, #268]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fcd4 	bl	8001534 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b90:	f7fe fcd0 	bl	8001534 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e310      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ba2:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4931      	ldr	r1, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	492c      	ldr	r1, [pc, #176]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
 8002be0:	e01a      	b.n	8002c18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fca1 	bl	8001534 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf6:	f7fe fc9d 	bl	8001534 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e2dd      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x1da>
 8002c14:	e000      	b.n	8002c18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d074      	beq.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x21a>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d10e      	bne.n	8002c4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d10b      	bne.n	8002c4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d064      	beq.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d160      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e2ba      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x24a>
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e026      	b.n	8002cb4 <HAL_RCC_OscConfig+0x298>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6e:	d115      	bne.n	8002c9c <HAL_RCC_OscConfig+0x280>
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a02      	ldr	r2, [pc, #8]	; (8002c8c <HAL_RCC_OscConfig+0x270>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x298>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08005514 	.word	0x08005514
 8002c94:	20000094 	.word	0x20000094
 8002c98:	200000a8 	.word	0x200000a8
 8002c9c:	4ba0      	ldr	r3, [pc, #640]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a9f      	ldr	r2, [pc, #636]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b9d      	ldr	r3, [pc, #628]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a9c      	ldr	r2, [pc, #624]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fc3a 	bl	8001534 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fc36 	bl	8001534 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e276      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd6:	4b92      	ldr	r3, [pc, #584]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2a8>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fc26 	bl	8001534 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fc22 	bl	8001534 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e262      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x2d0>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d060      	beq.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x310>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d116      	bne.n	8002d5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2c:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_OscConfig+0x328>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e23f      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	4973      	ldr	r1, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d58:	e040      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d023      	beq.n	8002daa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d62:	4b6f      	ldr	r3, [pc, #444]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a6e      	ldr	r2, [pc, #440]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fbe1 	bl	8001534 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fbdd 	bl	8001534 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e21d      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	495f      	ldr	r1, [pc, #380]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
 8002da8:	e018      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b5d      	ldr	r3, [pc, #372]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe fbbd 	bl	8001534 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fbb9 	bl	8001534 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1f9      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f0      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df6:	4a4a      	ldr	r2, [pc, #296]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe fb98 	bl	8001534 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e08:	f7fe fb94 	bl	8001534 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1d4      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0ef      	beq.n	8002e08 <HAL_RCC_OscConfig+0x3ec>
 8002e28:	e01b      	b.n	8002e62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e30:	4a3b      	ldr	r2, [pc, #236]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fb7b 	bl	8001534 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe fb77 	bl	8001534 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1b7      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ef      	bne.n	8002e42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80a6 	beq.w	8002fbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e74:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d118      	bne.n	8002eda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fb3e 	bl	8001534 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe fb3a 	bl	8001534 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e17a      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x508>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d8>
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef2:	e029      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d115      	bne.n	8002f28 <HAL_RCC_OscConfig+0x50c>
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <HAL_RCC_OscConfig+0x504>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	4b9c      	ldr	r3, [pc, #624]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	4a9b      	ldr	r2, [pc, #620]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f38:	4b98      	ldr	r3, [pc, #608]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	4a97      	ldr	r2, [pc, #604]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d016      	beq.n	8002f7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe faf0 	bl	8001534 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe faec 	bl	8001534 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e12a      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6e:	4b8b      	ldr	r3, [pc, #556]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ed      	beq.n	8002f58 <HAL_RCC_OscConfig+0x53c>
 8002f7c:	e015      	b.n	8002faa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fad9 	bl	8001534 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fad5 	bl	8001534 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e113      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ed      	bne.n	8002f86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002faa:	7ffb      	ldrb	r3, [r7, #31]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b7a      	ldr	r3, [pc, #488]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4a79      	ldr	r2, [pc, #484]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80fe 	beq.w	80031c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	f040 80d0 	bne.w	8003170 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fd0:	4b72      	ldr	r3, [pc, #456]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d130      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d127      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003002:	429a      	cmp	r2, r3
 8003004:	d11f      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003010:	2a07      	cmp	r2, #7
 8003012:	bf14      	ite	ne
 8003014:	2201      	movne	r2, #1
 8003016:	2200      	moveq	r2, #0
 8003018:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800301a:	4293      	cmp	r3, r2
 800301c:	d113      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d109      	bne.n	8003046 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d06e      	beq.n	8003124 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d069      	beq.n	8003120 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0ad      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003068:	4b4c      	ldr	r3, [pc, #304]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a4b      	ldr	r2, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800306e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003074:	f7fe fa5e 	bl	8001534 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fa5a 	bl	8001534 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e09a      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309a:	4b40      	ldr	r3, [pc, #256]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_RCC_OscConfig+0x784>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030aa:	3a01      	subs	r2, #1
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b4:	0212      	lsls	r2, r2, #8
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030bc:	0852      	lsrs	r2, r2, #1
 80030be:	3a01      	subs	r2, #1
 80030c0:	0552      	lsls	r2, r2, #21
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c8:	0852      	lsrs	r2, r2, #1
 80030ca:	3a01      	subs	r2, #1
 80030cc:	0652      	lsls	r2, r2, #25
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d4:	0912      	lsrs	r2, r2, #4
 80030d6:	0452      	lsls	r2, r2, #17
 80030d8:	430a      	orrs	r2, r1
 80030da:	4930      	ldr	r1, [pc, #192]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2d      	ldr	r2, [pc, #180]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x780>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f8:	f7fe fa1c 	bl	8001534 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fa18 	bl	8001534 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e058      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311e:	e050      	b.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04f      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d148      	bne.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a16      	ldr	r2, [pc, #88]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003148:	f7fe f9f4 	bl	8001534 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe f9f0 	bl	8001534 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e030      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x734>
 800316e:	e028      	b.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b0c      	cmp	r3, #12
 8003174:	d023      	beq.n	80031be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_OscConfig+0x780>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a08      	ldr	r2, [pc, #32]	; (800319c <HAL_RCC_OscConfig+0x780>)
 800317c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe f9d7 	bl	8001534 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	e00c      	b.n	80031a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe f9d3 	bl	8001534 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d905      	bls.n	80031a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e013      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
 800319c:	40021000 	.word	0x40021000
 80031a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x7b0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ec      	bne.n	800318a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x7b0>)
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	4905      	ldr	r1, [pc, #20]	; (80031cc <HAL_RCC_OscConfig+0x7b0>)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x7b4>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e001      	b.n	80031c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	feeefffc 	.word	0xfeeefffc

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0e7      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4970      	ldr	r1, [pc, #448]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cf      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003230:	429a      	cmp	r2, r3
 8003232:	d908      	bls.n	8003246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4960      	ldr	r1, [pc, #384]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04c      	beq.n	80032ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d121      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0a6      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e09a      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e08e      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e086      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4943      	ldr	r1, [pc, #268]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7fe f93a 	bl	8001534 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fe f936 	bl	8001534 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06e      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	429a      	cmp	r2, r3
 8003306:	d208      	bcs.n	800331a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	492b      	ldr	r1, [pc, #172]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d210      	bcs.n	800334a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 0207 	bic.w	r2, r3, #7
 8003330:	4923      	ldr	r1, [pc, #140]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e036      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4918      	ldr	r1, [pc, #96]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4910      	ldr	r1, [pc, #64]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003388:	f000 f824 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	490b      	ldr	r1, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1f4>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1f8>)
 80033a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1fc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe f871 	bl	8001494 <HAL_InitTick>
 80033b2:	4603      	mov	r3, r0
 80033b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033b6:	7afb      	ldrb	r3, [r7, #11]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08005514 	.word	0x08005514
 80033cc:	20000094 	.word	0x20000094
 80033d0:	200000a8 	.word	0x200000a8

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d121      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d11e      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003430:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003444:	e00a      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d102      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e004      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d101      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800345a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d134      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0xa6>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xac>
 8003478:	e005      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800347c:	617b      	str	r3, [r7, #20]
      break;
 800347e:	e005      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003482:	617b      	str	r3, [r7, #20]
      break;
 8003484:	e002      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	3301      	adds	r3, #1
 8003498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	fb03 f202 	mul.w	r2, r3, r2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	0e5b      	lsrs	r3, r3, #25
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	3301      	adds	r3, #1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034cc:	69bb      	ldr	r3, [r7, #24]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800552c 	.word	0x0800552c
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000094 	.word	0x20000094

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4904      	ldr	r1, [pc, #16]	; (800352c <HAL_RCC_GetPCLK1Freq+0x28>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	08005524 	.word	0x08005524

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003534:	f7ff ffda 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0adb      	lsrs	r3, r3, #11
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	08005524 	.word	0x08005524

0800355c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003564:	2300      	movs	r3, #0
 8003566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003574:	f7ff f9ee 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 8003578:	6178      	str	r0, [r7, #20]
 800357a:	e014      	b.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	; 0x58
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003594:	f7ff f9de 	bl	8002954 <HAL_PWREx_GetVoltageRange>
 8003598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d10b      	bne.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d919      	bls.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2ba0      	cmp	r3, #160	; 0xa0
 80035b8:	d902      	bls.n	80035c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ba:	2302      	movs	r3, #2
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e013      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c0:	2301      	movs	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e010      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d902      	bls.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035cc:	2303      	movs	r3, #3
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e00a      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d102      	bne.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d8:	2302      	movs	r3, #2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e004      	b.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b70      	cmp	r3, #112	; 0x70
 80035e2:	d101      	bne.n	80035e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 0207 	bic.w	r2, r3, #7
 80035f0:	4909      	ldr	r1, [pc, #36]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	429a      	cmp	r2, r3
 8003604:	d001      	beq.n	800360a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	40022000 	.word	0x40022000

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003624:	2300      	movs	r3, #0
 8003626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003628:	2300      	movs	r3, #0
 800362a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003634:	2b00      	cmp	r3, #0
 8003636:	d041      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003640:	d02a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003642:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003646:	d824      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364c:	d008      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800364e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003652:	d81e      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365c:	d010      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800365e:	e018      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003660:	4b86      	ldr	r3, [pc, #536]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a85      	ldr	r2, [pc, #532]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366c:	e015      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f000 facb 	bl	8003c10 <RCCEx_PLLSAI1_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800367e:	e00c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3320      	adds	r3, #32
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fbb6 	bl	8003df8 <RCCEx_PLLSAI2_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003690:	e003      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	74fb      	strb	r3, [r7, #19]
      break;
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a0:	4b76      	ldr	r3, [pc, #472]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ae:	4973      	ldr	r1, [pc, #460]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036b6:	e001      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d041      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d0:	d02a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d6:	d824      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e2:	d81e      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d010      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036ee:	e018      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036f0:	4b62      	ldr	r3, [pc, #392]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a61      	ldr	r2, [pc, #388]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036fc:	e015      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fa83 	bl	8003c10 <RCCEx_PLLSAI1_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800370e:	e00c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3320      	adds	r3, #32
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fb6e 	bl	8003df8 <RCCEx_PLLSAI2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	74fb      	strb	r3, [r7, #19]
      break;
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003730:	4b52      	ldr	r3, [pc, #328]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373e:	494f      	ldr	r1, [pc, #316]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003746:	e001      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a0 	beq.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800375e:	4b47      	ldr	r3, [pc, #284]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b41      	ldr	r3, [pc, #260]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	4a40      	ldr	r2, [pc, #256]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
 8003780:	4b3e      	ldr	r3, [pc, #248]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378c:	2301      	movs	r3, #1
 800378e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3a      	ldr	r2, [pc, #232]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800379c:	f7fd feca 	bl	8001534 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037a2:	e009      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a4:	f7fd fec6 	bl	8001534 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	74fb      	strb	r3, [r7, #19]
        break;
 80037b6:	e005      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b8:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ef      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d15c      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ca:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01f      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d019      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f4:	4b21      	ldr	r3, [pc, #132]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	4a20      	ldr	r2, [pc, #128]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fd fe85 	bl	8001534 <HAL_GetTick>
 800382a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382c:	e00b      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fd fe81 	bl	8001534 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d902      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	74fb      	strb	r3, [r7, #19]
            break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ec      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10c      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800386a:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003872:	e009      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	74bb      	strb	r3, [r7, #18]
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003888:	7c7b      	ldrb	r3, [r7, #17]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388e:	4b9e      	ldr	r3, [pc, #632]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	4a9d      	ldr	r2, [pc, #628]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003898:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a6:	4b98      	ldr	r3, [pc, #608]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f023 0203 	bic.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	4994      	ldr	r1, [pc, #592]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c8:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 020c 	bic.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d6:	498c      	ldr	r1, [pc, #560]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ea:	4b87      	ldr	r3, [pc, #540]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4983      	ldr	r1, [pc, #524]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	497b      	ldr	r1, [pc, #492]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	4972      	ldr	r1, [pc, #456]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003950:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	496a      	ldr	r1, [pc, #424]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003972:	4b65      	ldr	r3, [pc, #404]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003978:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	4961      	ldr	r1, [pc, #388]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003994:	4b5c      	ldr	r3, [pc, #368]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	4959      	ldr	r1, [pc, #356]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	4950      	ldr	r1, [pc, #320]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d8:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	4948      	ldr	r1, [pc, #288]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039fa:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	493f      	ldr	r1, [pc, #252]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d028      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2a:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a46:	60d3      	str	r3, [r2, #12]
 8003a48:	e011      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a52:	d10c      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f8d8 	bl	8003c10 <RCCEx_PLLSAI1_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d028      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	491f      	ldr	r1, [pc, #124]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa4:	60d3      	str	r3, [r2, #12]
 8003aa6:	e011      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f8a9 	bl	8003c10 <RCCEx_PLLSAI1_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae6:	4908      	ldr	r1, [pc, #32]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af6:	d109      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a02      	ldr	r2, [pc, #8]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b02:	60d3      	str	r3, [r2, #12]
 8003b04:	e014      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f877 	bl	8003c10 <RCCEx_PLLSAI1_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b2c:	7cfb      	ldrb	r3, [r7, #19]
 8003b2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d02f      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4a:	4928      	ldr	r1, [pc, #160]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	2102      	movs	r1, #2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f854 	bl	8003c10 <RCCEx_PLLSAI1_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d014      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	74bb      	strb	r3, [r7, #18]
 8003b76:	e011      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3320      	adds	r3, #32
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f935 	bl	8003df8 <RCCEx_PLLSAI2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba8:	4b10      	ldr	r3, [pc, #64]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb6:	490d      	ldr	r1, [pc, #52]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bca:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bda:	4904      	ldr	r1, [pc, #16]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003be2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000

08003c10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c1e:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d018      	beq.n	8003c5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c2a:	4b72      	ldr	r3, [pc, #456]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0203 	and.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d10d      	bne.n	8003c56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
       ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d047      	beq.n	8003ce6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e044      	b.n	8003ce6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d018      	beq.n	8003c96 <RCCEx_PLLSAI1_Config+0x86>
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d825      	bhi.n	8003cb4 <RCCEx_PLLSAI1_Config+0xa4>
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d002      	beq.n	8003c72 <RCCEx_PLLSAI1_Config+0x62>
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d009      	beq.n	8003c84 <RCCEx_PLLSAI1_Config+0x74>
 8003c70:	e020      	b.n	8003cb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c72:	4b60      	ldr	r3, [pc, #384]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d11d      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c82:	e01a      	b.n	8003cba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c84:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c94:	e013      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c96:	4b57      	ldr	r3, [pc, #348]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ca2:	4b54      	ldr	r3, [pc, #336]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cb2:	e006      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e004      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e002      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cca:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	4944      	ldr	r1, [pc, #272]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d17d      	bne.n	8003de8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cec:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fc1c 	bl	8001534 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cfe:	e009      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d00:	f7fd fc18 	bl	8001534 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	73fb      	strb	r3, [r7, #15]
        break;
 8003d12:	e005      	b.n	8003d20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d14:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1ef      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d160      	bne.n	8003de8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d111      	bne.n	8003d50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6892      	ldr	r2, [r2, #8]
 8003d3c:	0211      	lsls	r1, r2, #8
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	0912      	lsrs	r2, r2, #4
 8003d44:	0452      	lsls	r2, r2, #17
 8003d46:	430a      	orrs	r2, r1
 8003d48:	492a      	ldr	r1, [pc, #168]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	610b      	str	r3, [r1, #16]
 8003d4e:	e027      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d112      	bne.n	8003d7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d56:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6892      	ldr	r2, [r2, #8]
 8003d66:	0211      	lsls	r1, r2, #8
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6912      	ldr	r2, [r2, #16]
 8003d6c:	0852      	lsrs	r2, r2, #1
 8003d6e:	3a01      	subs	r2, #1
 8003d70:	0552      	lsls	r2, r2, #21
 8003d72:	430a      	orrs	r2, r1
 8003d74:	491f      	ldr	r1, [pc, #124]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	610b      	str	r3, [r1, #16]
 8003d7a:	e011      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6892      	ldr	r2, [r2, #8]
 8003d8c:	0211      	lsls	r1, r2, #8
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6952      	ldr	r2, [r2, #20]
 8003d92:	0852      	lsrs	r2, r2, #1
 8003d94:	3a01      	subs	r2, #1
 8003d96:	0652      	lsls	r2, r2, #25
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	4916      	ldr	r1, [pc, #88]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd fbc2 	bl	8001534 <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003db2:	e009      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003db4:	f7fd fbbe 	bl	8001534 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d902      	bls.n	8003dc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	73fb      	strb	r3, [r7, #15]
          break;
 8003dc6:	e005      	b.n	8003dd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ef      	beq.n	8003db4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4904      	ldr	r1, [pc, #16]	; (8003df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000

08003df8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e06:	4b6a      	ldr	r3, [pc, #424]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e12:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0203 	and.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d10d      	bne.n	8003e3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
       ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e2a:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
       ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d047      	beq.n	8003ece <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
 8003e42:	e044      	b.n	8003ece <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d018      	beq.n	8003e7e <RCCEx_PLLSAI2_Config+0x86>
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d825      	bhi.n	8003e9c <RCCEx_PLLSAI2_Config+0xa4>
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d002      	beq.n	8003e5a <RCCEx_PLLSAI2_Config+0x62>
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d009      	beq.n	8003e6c <RCCEx_PLLSAI2_Config+0x74>
 8003e58:	e020      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e5a:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d11d      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6a:	e01a      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d116      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7c:	e013      	b.n	8003ea6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e8a:	4b49      	ldr	r3, [pc, #292]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e9a:	e006      	b.n	8003eaa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	e004      	b.n	8003eac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10d      	bne.n	8003ece <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	4939      	ldr	r1, [pc, #228]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d167      	bne.n	8003fa4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a35      	ldr	r2, [pc, #212]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee0:	f7fd fb28 	bl	8001534 <HAL_GetTick>
 8003ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ee6:	e009      	b.n	8003efc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ee8:	f7fd fb24 	bl	8001534 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d902      	bls.n	8003efc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8003efa:	e005      	b.n	8003f08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1ef      	bne.n	8003ee8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d14a      	bne.n	8003fa4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d111      	bne.n	8003f38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f14:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	0211      	lsls	r1, r2, #8
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68d2      	ldr	r2, [r2, #12]
 8003f2a:	0912      	lsrs	r2, r2, #4
 8003f2c:	0452      	lsls	r2, r2, #17
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	491f      	ldr	r1, [pc, #124]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	614b      	str	r3, [r1, #20]
 8003f36:	e011      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6892      	ldr	r2, [r2, #8]
 8003f48:	0211      	lsls	r1, r2, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6912      	ldr	r2, [r2, #16]
 8003f4e:	0852      	lsrs	r2, r2, #1
 8003f50:	3a01      	subs	r2, #1
 8003f52:	0652      	lsls	r2, r2, #25
 8003f54:	430a      	orrs	r2, r1
 8003f56:	4916      	ldr	r1, [pc, #88]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7fd fae4 	bl	8001534 <HAL_GetTick>
 8003f6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f6e:	e009      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f70:	f7fd fae0 	bl	8001534 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d902      	bls.n	8003f84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	73fb      	strb	r3, [r7, #15]
          break;
 8003f82:	e005      	b.n	8003f90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ef      	beq.n	8003f70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4904      	ldr	r1, [pc, #16]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e040      	b.n	8004048 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc feac 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fb6a 	bl	80046d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8af 	bl	8004164 <UART_SetConfig>
 8004006:	4603      	mov	r3, r0
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e01b      	b.n	8004048 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800401e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800402e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fbe9 	bl	8004818 <UART_CheckIdleState>
 8004046:	4603      	mov	r3, r0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004064:	2b20      	cmp	r3, #32
 8004066:	d178      	bne.n	800415a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_UART_Transmit+0x24>
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e071      	b.n	800415c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2221      	movs	r2, #33	; 0x21
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004086:	f7fd fa55 	bl	8001534 <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d108      	bne.n	80040b8 <HAL_UART_Transmit+0x68>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e003      	b.n	80040c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c0:	e030      	b.n	8004124 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fc4b 	bl	8004968 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e03c      	b.n	800415c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	881a      	ldrh	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f4:	b292      	uxth	r2, r2
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	3302      	adds	r3, #2
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	e008      	b.n	8004112 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b292      	uxth	r2, r2
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1c8      	bne.n	80040c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fc14 	bl	8004968 <UART_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e005      	b.n	800415c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004168:	b08a      	sub	sp, #40	; 0x28
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	431a      	orrs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4313      	orrs	r3, r2
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4ba4      	ldr	r3, [pc, #656]	; (8004424 <UART_SetConfig+0x2c0>)
 8004194:	4013      	ands	r3, r2
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800419c:	430b      	orrs	r3, r1
 800419e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a99      	ldr	r2, [pc, #612]	; (8004428 <UART_SetConfig+0x2c4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	4313      	orrs	r3, r2
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a90      	ldr	r2, [pc, #576]	; (800442c <UART_SetConfig+0x2c8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d126      	bne.n	800423c <UART_SetConfig+0xd8>
 80041ee:	4b90      	ldr	r3, [pc, #576]	; (8004430 <UART_SetConfig+0x2cc>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d81b      	bhi.n	8004234 <UART_SetConfig+0xd0>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0xa0>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004215 	.word	0x08004215
 8004208:	08004225 	.word	0x08004225
 800420c:	0800421d 	.word	0x0800421d
 8004210:	0800422d 	.word	0x0800422d
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e116      	b.n	800444a <UART_SetConfig+0x2e6>
 800421c:	2302      	movs	r3, #2
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e112      	b.n	800444a <UART_SetConfig+0x2e6>
 8004224:	2304      	movs	r3, #4
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e10e      	b.n	800444a <UART_SetConfig+0x2e6>
 800422c:	2308      	movs	r3, #8
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e10a      	b.n	800444a <UART_SetConfig+0x2e6>
 8004234:	2310      	movs	r3, #16
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e106      	b.n	800444a <UART_SetConfig+0x2e6>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a7c      	ldr	r2, [pc, #496]	; (8004434 <UART_SetConfig+0x2d0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d138      	bne.n	80042b8 <UART_SetConfig+0x154>
 8004246:	4b7a      	ldr	r3, [pc, #488]	; (8004430 <UART_SetConfig+0x2cc>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d82d      	bhi.n	80042b0 <UART_SetConfig+0x14c>
 8004254:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0xf8>)
 8004256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425a:	bf00      	nop
 800425c:	08004291 	.word	0x08004291
 8004260:	080042b1 	.word	0x080042b1
 8004264:	080042b1 	.word	0x080042b1
 8004268:	080042b1 	.word	0x080042b1
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042b1 	.word	0x080042b1
 8004274:	080042b1 	.word	0x080042b1
 8004278:	080042b1 	.word	0x080042b1
 800427c:	08004299 	.word	0x08004299
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042b1 	.word	0x080042b1
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042a9 	.word	0x080042a9
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e0d8      	b.n	800444a <UART_SetConfig+0x2e6>
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e0d4      	b.n	800444a <UART_SetConfig+0x2e6>
 80042a0:	2304      	movs	r3, #4
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e0d0      	b.n	800444a <UART_SetConfig+0x2e6>
 80042a8:	2308      	movs	r3, #8
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e0cc      	b.n	800444a <UART_SetConfig+0x2e6>
 80042b0:	2310      	movs	r3, #16
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e0c8      	b.n	800444a <UART_SetConfig+0x2e6>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5e      	ldr	r2, [pc, #376]	; (8004438 <UART_SetConfig+0x2d4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d125      	bne.n	800430e <UART_SetConfig+0x1aa>
 80042c2:	4b5b      	ldr	r3, [pc, #364]	; (8004430 <UART_SetConfig+0x2cc>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042cc:	2b30      	cmp	r3, #48	; 0x30
 80042ce:	d016      	beq.n	80042fe <UART_SetConfig+0x19a>
 80042d0:	2b30      	cmp	r3, #48	; 0x30
 80042d2:	d818      	bhi.n	8004306 <UART_SetConfig+0x1a2>
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d00a      	beq.n	80042ee <UART_SetConfig+0x18a>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d814      	bhi.n	8004306 <UART_SetConfig+0x1a2>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <UART_SetConfig+0x182>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d008      	beq.n	80042f6 <UART_SetConfig+0x192>
 80042e4:	e00f      	b.n	8004306 <UART_SetConfig+0x1a2>
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ec:	e0ad      	b.n	800444a <UART_SetConfig+0x2e6>
 80042ee:	2302      	movs	r3, #2
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f4:	e0a9      	b.n	800444a <UART_SetConfig+0x2e6>
 80042f6:	2304      	movs	r3, #4
 80042f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fc:	e0a5      	b.n	800444a <UART_SetConfig+0x2e6>
 80042fe:	2308      	movs	r3, #8
 8004300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004304:	e0a1      	b.n	800444a <UART_SetConfig+0x2e6>
 8004306:	2310      	movs	r3, #16
 8004308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430c:	e09d      	b.n	800444a <UART_SetConfig+0x2e6>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4a      	ldr	r2, [pc, #296]	; (800443c <UART_SetConfig+0x2d8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d125      	bne.n	8004364 <UART_SetConfig+0x200>
 8004318:	4b45      	ldr	r3, [pc, #276]	; (8004430 <UART_SetConfig+0x2cc>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004322:	2bc0      	cmp	r3, #192	; 0xc0
 8004324:	d016      	beq.n	8004354 <UART_SetConfig+0x1f0>
 8004326:	2bc0      	cmp	r3, #192	; 0xc0
 8004328:	d818      	bhi.n	800435c <UART_SetConfig+0x1f8>
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d00a      	beq.n	8004344 <UART_SetConfig+0x1e0>
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d814      	bhi.n	800435c <UART_SetConfig+0x1f8>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <UART_SetConfig+0x1d8>
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d008      	beq.n	800434c <UART_SetConfig+0x1e8>
 800433a:	e00f      	b.n	800435c <UART_SetConfig+0x1f8>
 800433c:	2300      	movs	r3, #0
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e082      	b.n	800444a <UART_SetConfig+0x2e6>
 8004344:	2302      	movs	r3, #2
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e07e      	b.n	800444a <UART_SetConfig+0x2e6>
 800434c:	2304      	movs	r3, #4
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e07a      	b.n	800444a <UART_SetConfig+0x2e6>
 8004354:	2308      	movs	r3, #8
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e076      	b.n	800444a <UART_SetConfig+0x2e6>
 800435c:	2310      	movs	r3, #16
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e072      	b.n	800444a <UART_SetConfig+0x2e6>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <UART_SetConfig+0x2dc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d12a      	bne.n	80043c4 <UART_SetConfig+0x260>
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <UART_SetConfig+0x2cc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437c:	d01a      	beq.n	80043b4 <UART_SetConfig+0x250>
 800437e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004382:	d81b      	bhi.n	80043bc <UART_SetConfig+0x258>
 8004384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004388:	d00c      	beq.n	80043a4 <UART_SetConfig+0x240>
 800438a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438e:	d815      	bhi.n	80043bc <UART_SetConfig+0x258>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <UART_SetConfig+0x238>
 8004394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004398:	d008      	beq.n	80043ac <UART_SetConfig+0x248>
 800439a:	e00f      	b.n	80043bc <UART_SetConfig+0x258>
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e052      	b.n	800444a <UART_SetConfig+0x2e6>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e04e      	b.n	800444a <UART_SetConfig+0x2e6>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e04a      	b.n	800444a <UART_SetConfig+0x2e6>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e046      	b.n	800444a <UART_SetConfig+0x2e6>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e042      	b.n	800444a <UART_SetConfig+0x2e6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <UART_SetConfig+0x2c4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d13a      	bne.n	8004444 <UART_SetConfig+0x2e0>
 80043ce:	4b18      	ldr	r3, [pc, #96]	; (8004430 <UART_SetConfig+0x2cc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043dc:	d01a      	beq.n	8004414 <UART_SetConfig+0x2b0>
 80043de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0x2b8>
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e8:	d00c      	beq.n	8004404 <UART_SetConfig+0x2a0>
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ee:	d815      	bhi.n	800441c <UART_SetConfig+0x2b8>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <UART_SetConfig+0x298>
 80043f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f8:	d008      	beq.n	800440c <UART_SetConfig+0x2a8>
 80043fa:	e00f      	b.n	800441c <UART_SetConfig+0x2b8>
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e022      	b.n	800444a <UART_SetConfig+0x2e6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e01e      	b.n	800444a <UART_SetConfig+0x2e6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e01a      	b.n	800444a <UART_SetConfig+0x2e6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e016      	b.n	800444a <UART_SetConfig+0x2e6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e012      	b.n	800444a <UART_SetConfig+0x2e6>
 8004424:	efff69f3 	.word	0xefff69f3
 8004428:	40008000 	.word	0x40008000
 800442c:	40013800 	.word	0x40013800
 8004430:	40021000 	.word	0x40021000
 8004434:	40004400 	.word	0x40004400
 8004438:	40004800 	.word	0x40004800
 800443c:	40004c00 	.word	0x40004c00
 8004440:	40005000 	.word	0x40005000
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a9f      	ldr	r2, [pc, #636]	; (80046cc <UART_SetConfig+0x568>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d17a      	bne.n	800454a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004458:	2b08      	cmp	r3, #8
 800445a:	d824      	bhi.n	80044a6 <UART_SetConfig+0x342>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x300>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004489 	.word	0x08004489
 8004468:	080044a7 	.word	0x080044a7
 800446c:	08004491 	.word	0x08004491
 8004470:	080044a7 	.word	0x080044a7
 8004474:	08004497 	.word	0x08004497
 8004478:	080044a7 	.word	0x080044a7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044a7 	.word	0x080044a7
 8004484:	0800449f 	.word	0x0800449f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004488:	f7ff f83c 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 800448c:	61f8      	str	r0, [r7, #28]
        break;
 800448e:	e010      	b.n	80044b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004490:	4b8f      	ldr	r3, [pc, #572]	; (80046d0 <UART_SetConfig+0x56c>)
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e00d      	b.n	80044b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004496:	f7fe ff9d 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800449a:	61f8      	str	r0, [r7, #28]
        break;
 800449c:	e009      	b.n	80044b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a2:	61fb      	str	r3, [r7, #28]
        break;
 80044a4:	e005      	b.n	80044b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80fb 	beq.w	80046b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	4413      	add	r3, r2
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d305      	bcc.n	80044d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d903      	bls.n	80044de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044dc:	e0e8      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2200      	movs	r2, #0
 80044e2:	461c      	mov	r4, r3
 80044e4:	4615      	mov	r5, r2
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	022b      	lsls	r3, r5, #8
 80044f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044f4:	0222      	lsls	r2, r4, #8
 80044f6:	68f9      	ldr	r1, [r7, #12]
 80044f8:	6849      	ldr	r1, [r1, #4]
 80044fa:	0849      	lsrs	r1, r1, #1
 80044fc:	2000      	movs	r0, #0
 80044fe:	4688      	mov	r8, r1
 8004500:	4681      	mov	r9, r0
 8004502:	eb12 0a08 	adds.w	sl, r2, r8
 8004506:	eb43 0b09 	adc.w	fp, r3, r9
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004518:	4650      	mov	r0, sl
 800451a:	4659      	mov	r1, fp
 800451c:	f7fc f88c 	bl	8000638 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800452e:	d308      	bcc.n	8004542 <UART_SetConfig+0x3de>
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004536:	d204      	bcs.n	8004542 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	60da      	str	r2, [r3, #12]
 8004540:	e0b6      	b.n	80046b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004548:	e0b2      	b.n	80046b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004552:	d15e      	bne.n	8004612 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004558:	2b08      	cmp	r3, #8
 800455a:	d828      	bhi.n	80045ae <UART_SetConfig+0x44a>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0x400>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004589 	.word	0x08004589
 8004568:	08004591 	.word	0x08004591
 800456c:	08004599 	.word	0x08004599
 8004570:	080045af 	.word	0x080045af
 8004574:	0800459f 	.word	0x0800459f
 8004578:	080045af 	.word	0x080045af
 800457c:	080045af 	.word	0x080045af
 8004580:	080045af 	.word	0x080045af
 8004584:	080045a7 	.word	0x080045a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7fe ffbc 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 800458c:	61f8      	str	r0, [r7, #28]
        break;
 800458e:	e014      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe ffce 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e010      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004598:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <UART_SetConfig+0x56c>)
 800459a:	61fb      	str	r3, [r7, #28]
        break;
 800459c:	e00d      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459e:	f7fe ff19 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80045a2:	61f8      	str	r0, [r7, #28]
        break;
 80045a4:	e009      	b.n	80045ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045aa:	61fb      	str	r3, [r7, #28]
        break;
 80045ac:	e005      	b.n	80045ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d077      	beq.n	80046b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005a      	lsls	r2, r3, #1
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	441a      	add	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d916      	bls.n	800460a <UART_SetConfig+0x4a6>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e2:	d212      	bcs.n	800460a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f023 030f 	bic.w	r3, r3, #15
 80045ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	8afb      	ldrh	r3, [r7, #22]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	8afa      	ldrh	r2, [r7, #22]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	e052      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004610:	e04e      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004616:	2b08      	cmp	r3, #8
 8004618:	d827      	bhi.n	800466a <UART_SetConfig+0x506>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <UART_SetConfig+0x4bc>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe ff5e 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8004648:	61f8      	str	r0, [r7, #28]
        break;
 800464a:	e014      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe ff70 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8004650:	61f8      	str	r0, [r7, #28]
        break;
 8004652:	e010      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <UART_SetConfig+0x56c>)
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e00d      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe febb 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800465e:	61f8      	str	r0, [r7, #28]
        break;
 8004660:	e009      	b.n	8004676 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004666:	61fb      	str	r3, [r7, #28]
        break;
 8004668:	e005      	b.n	8004676 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004674:	bf00      	nop
    }

    if (pclk != 0U)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d019      	beq.n	80046b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	085a      	lsrs	r2, r3, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d909      	bls.n	80046aa <UART_SetConfig+0x546>
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d205      	bcs.n	80046aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
 80046a8:	e002      	b.n	80046b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3728      	adds	r7, #40	; 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ca:	bf00      	nop
 80046cc:	40008000 	.word	0x40008000
 80046d0:	00f42400 	.word	0x00f42400

080046d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01a      	beq.n	80047ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d2:	d10a      	bne.n	80047ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b098      	sub	sp, #96	; 0x60
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004828:	f7fc fe84 	bl	8001534 <HAL_GetTick>
 800482c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d12e      	bne.n	800489a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f88c 	bl	8004968 <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d021      	beq.n	800489a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486a:	653b      	str	r3, [r7, #80]	; 0x50
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	647b      	str	r3, [r7, #68]	; 0x44
 8004876:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800487a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e6      	bne.n	8004856 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e062      	b.n	8004960 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d149      	bne.n	800493c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b0:	2200      	movs	r2, #0
 80048b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f856 	bl	8004968 <UART_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d03c      	beq.n	800493c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	623b      	str	r3, [r7, #32]
   return(result);
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
 80048e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e6      	bne.n	80048c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	60fb      	str	r3, [r7, #12]
   return(result);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004914:	61fa      	str	r2, [r7, #28]
 8004916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	617b      	str	r3, [r7, #20]
   return(result);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e011      	b.n	8004960 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3758      	adds	r7, #88	; 0x58
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004978:	e049      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d045      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004982:	f7fc fdd7 	bl	8001534 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <UART_WaitOnFlagUntilTimeout+0x30>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e048      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d031      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d110      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2208      	movs	r2, #8
 80049be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f838 	bl	8004a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2208      	movs	r2, #8
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e029      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e8:	d111      	bne.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f81e 	bl	8004a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00f      	b.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4013      	ands	r3, r2
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d0a6      	beq.n	800497a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b095      	sub	sp, #84	; 0x54
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e6      	bne.n	8004a3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d118      	bne.n	8004ade <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e6      	bne.n	8004aac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004af2:	bf00      	nop
 8004af4:	3754      	adds	r7, #84	; 0x54
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <sniprintf>:
 8004b00:	b40c      	push	{r2, r3}
 8004b02:	b530      	push	{r4, r5, lr}
 8004b04:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <sniprintf+0x64>)
 8004b06:	1e0c      	subs	r4, r1, #0
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	b09d      	sub	sp, #116	; 0x74
 8004b0c:	da08      	bge.n	8004b20 <sniprintf+0x20>
 8004b0e:	238b      	movs	r3, #139	; 0x8b
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	b01d      	add	sp, #116	; 0x74
 8004b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b1c:	b002      	add	sp, #8
 8004b1e:	4770      	bx	lr
 8004b20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b28:	bf14      	ite	ne
 8004b2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b2e:	4623      	moveq	r3, r4
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	9307      	str	r3, [sp, #28]
 8004b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b38:	9002      	str	r0, [sp, #8]
 8004b3a:	9006      	str	r0, [sp, #24]
 8004b3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b42:	ab21      	add	r3, sp, #132	; 0x84
 8004b44:	a902      	add	r1, sp, #8
 8004b46:	4628      	mov	r0, r5
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	f000 f993 	bl	8004e74 <_svfiprintf_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	bfbc      	itt	lt
 8004b52:	238b      	movlt	r3, #139	; 0x8b
 8004b54:	602b      	strlt	r3, [r5, #0]
 8004b56:	2c00      	cmp	r4, #0
 8004b58:	d0dd      	beq.n	8004b16 <sniprintf+0x16>
 8004b5a:	9b02      	ldr	r3, [sp, #8]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e7d9      	b.n	8004b16 <sniprintf+0x16>
 8004b62:	bf00      	nop
 8004b64:	200000fc 	.word	0x200000fc

08004b68 <memset>:
 8004b68:	4402      	add	r2, r0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <memset+0xa>
 8004b70:	4770      	bx	lr
 8004b72:	f803 1b01 	strb.w	r1, [r3], #1
 8004b76:	e7f9      	b.n	8004b6c <memset+0x4>

08004b78 <__errno>:
 8004b78:	4b01      	ldr	r3, [pc, #4]	; (8004b80 <__errno+0x8>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	200000fc 	.word	0x200000fc

08004b84 <__libc_init_array>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4d0d      	ldr	r5, [pc, #52]	; (8004bbc <__libc_init_array+0x38>)
 8004b88:	4c0d      	ldr	r4, [pc, #52]	; (8004bc0 <__libc_init_array+0x3c>)
 8004b8a:	1b64      	subs	r4, r4, r5
 8004b8c:	10a4      	asrs	r4, r4, #2
 8004b8e:	2600      	movs	r6, #0
 8004b90:	42a6      	cmp	r6, r4
 8004b92:	d109      	bne.n	8004ba8 <__libc_init_array+0x24>
 8004b94:	4d0b      	ldr	r5, [pc, #44]	; (8004bc4 <__libc_init_array+0x40>)
 8004b96:	4c0c      	ldr	r4, [pc, #48]	; (8004bc8 <__libc_init_array+0x44>)
 8004b98:	f000 fca4 	bl	80054e4 <_init>
 8004b9c:	1b64      	subs	r4, r4, r5
 8004b9e:	10a4      	asrs	r4, r4, #2
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	42a6      	cmp	r6, r4
 8004ba4:	d105      	bne.n	8004bb2 <__libc_init_array+0x2e>
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bac:	4798      	blx	r3
 8004bae:	3601      	adds	r6, #1
 8004bb0:	e7ee      	b.n	8004b90 <__libc_init_array+0xc>
 8004bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb6:	4798      	blx	r3
 8004bb8:	3601      	adds	r6, #1
 8004bba:	e7f2      	b.n	8004ba2 <__libc_init_array+0x1e>
 8004bbc:	08005598 	.word	0x08005598
 8004bc0:	08005598 	.word	0x08005598
 8004bc4:	08005598 	.word	0x08005598
 8004bc8:	0800559c 	.word	0x0800559c

08004bcc <__retarget_lock_acquire_recursive>:
 8004bcc:	4770      	bx	lr

08004bce <__retarget_lock_release_recursive>:
 8004bce:	4770      	bx	lr

08004bd0 <_free_r>:
 8004bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d044      	beq.n	8004c60 <_free_r+0x90>
 8004bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bda:	9001      	str	r0, [sp, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f1a1 0404 	sub.w	r4, r1, #4
 8004be2:	bfb8      	it	lt
 8004be4:	18e4      	addlt	r4, r4, r3
 8004be6:	f000 f8df 	bl	8004da8 <__malloc_lock>
 8004bea:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <_free_r+0x94>)
 8004bec:	9801      	ldr	r0, [sp, #4]
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	b933      	cbnz	r3, 8004c00 <_free_r+0x30>
 8004bf2:	6063      	str	r3, [r4, #4]
 8004bf4:	6014      	str	r4, [r2, #0]
 8004bf6:	b003      	add	sp, #12
 8004bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bfc:	f000 b8da 	b.w	8004db4 <__malloc_unlock>
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	d908      	bls.n	8004c16 <_free_r+0x46>
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1961      	adds	r1, r4, r5
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	bf01      	itttt	eq
 8004c0c:	6819      	ldreq	r1, [r3, #0]
 8004c0e:	685b      	ldreq	r3, [r3, #4]
 8004c10:	1949      	addeq	r1, r1, r5
 8004c12:	6021      	streq	r1, [r4, #0]
 8004c14:	e7ed      	b.n	8004bf2 <_free_r+0x22>
 8004c16:	461a      	mov	r2, r3
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	b10b      	cbz	r3, 8004c20 <_free_r+0x50>
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	d9fa      	bls.n	8004c16 <_free_r+0x46>
 8004c20:	6811      	ldr	r1, [r2, #0]
 8004c22:	1855      	adds	r5, r2, r1
 8004c24:	42a5      	cmp	r5, r4
 8004c26:	d10b      	bne.n	8004c40 <_free_r+0x70>
 8004c28:	6824      	ldr	r4, [r4, #0]
 8004c2a:	4421      	add	r1, r4
 8004c2c:	1854      	adds	r4, r2, r1
 8004c2e:	42a3      	cmp	r3, r4
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	d1e0      	bne.n	8004bf6 <_free_r+0x26>
 8004c34:	681c      	ldr	r4, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	6053      	str	r3, [r2, #4]
 8004c3a:	440c      	add	r4, r1
 8004c3c:	6014      	str	r4, [r2, #0]
 8004c3e:	e7da      	b.n	8004bf6 <_free_r+0x26>
 8004c40:	d902      	bls.n	8004c48 <_free_r+0x78>
 8004c42:	230c      	movs	r3, #12
 8004c44:	6003      	str	r3, [r0, #0]
 8004c46:	e7d6      	b.n	8004bf6 <_free_r+0x26>
 8004c48:	6825      	ldr	r5, [r4, #0]
 8004c4a:	1961      	adds	r1, r4, r5
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	bf04      	itt	eq
 8004c50:	6819      	ldreq	r1, [r3, #0]
 8004c52:	685b      	ldreq	r3, [r3, #4]
 8004c54:	6063      	str	r3, [r4, #4]
 8004c56:	bf04      	itt	eq
 8004c58:	1949      	addeq	r1, r1, r5
 8004c5a:	6021      	streq	r1, [r4, #0]
 8004c5c:	6054      	str	r4, [r2, #4]
 8004c5e:	e7ca      	b.n	8004bf6 <_free_r+0x26>
 8004c60:	b003      	add	sp, #12
 8004c62:	bd30      	pop	{r4, r5, pc}
 8004c64:	200003ac 	.word	0x200003ac

08004c68 <sbrk_aligned>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4e0e      	ldr	r6, [pc, #56]	; (8004ca4 <sbrk_aligned+0x3c>)
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	6831      	ldr	r1, [r6, #0]
 8004c70:	4605      	mov	r5, r0
 8004c72:	b911      	cbnz	r1, 8004c7a <sbrk_aligned+0x12>
 8004c74:	f000 fba6 	bl	80053c4 <_sbrk_r>
 8004c78:	6030      	str	r0, [r6, #0]
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f000 fba1 	bl	80053c4 <_sbrk_r>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d00a      	beq.n	8004c9c <sbrk_aligned+0x34>
 8004c86:	1cc4      	adds	r4, r0, #3
 8004c88:	f024 0403 	bic.w	r4, r4, #3
 8004c8c:	42a0      	cmp	r0, r4
 8004c8e:	d007      	beq.n	8004ca0 <sbrk_aligned+0x38>
 8004c90:	1a21      	subs	r1, r4, r0
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 fb96 	bl	80053c4 <_sbrk_r>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d101      	bne.n	8004ca0 <sbrk_aligned+0x38>
 8004c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	bd70      	pop	{r4, r5, r6, pc}
 8004ca4:	200003b0 	.word	0x200003b0

08004ca8 <_malloc_r>:
 8004ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cac:	1ccd      	adds	r5, r1, #3
 8004cae:	f025 0503 	bic.w	r5, r5, #3
 8004cb2:	3508      	adds	r5, #8
 8004cb4:	2d0c      	cmp	r5, #12
 8004cb6:	bf38      	it	cc
 8004cb8:	250c      	movcc	r5, #12
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	db01      	blt.n	8004cc4 <_malloc_r+0x1c>
 8004cc0:	42a9      	cmp	r1, r5
 8004cc2:	d905      	bls.n	8004cd0 <_malloc_r+0x28>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	2600      	movs	r6, #0
 8004cca:	4630      	mov	r0, r6
 8004ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004da4 <_malloc_r+0xfc>
 8004cd4:	f000 f868 	bl	8004da8 <__malloc_lock>
 8004cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cdc:	461c      	mov	r4, r3
 8004cde:	bb5c      	cbnz	r4, 8004d38 <_malloc_r+0x90>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	f7ff ffc0 	bl	8004c68 <sbrk_aligned>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	4604      	mov	r4, r0
 8004cec:	d155      	bne.n	8004d9a <_malloc_r+0xf2>
 8004cee:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf2:	4626      	mov	r6, r4
 8004cf4:	2e00      	cmp	r6, #0
 8004cf6:	d145      	bne.n	8004d84 <_malloc_r+0xdc>
 8004cf8:	2c00      	cmp	r4, #0
 8004cfa:	d048      	beq.n	8004d8e <_malloc_r+0xe6>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4638      	mov	r0, r7
 8004d02:	eb04 0903 	add.w	r9, r4, r3
 8004d06:	f000 fb5d 	bl	80053c4 <_sbrk_r>
 8004d0a:	4581      	cmp	r9, r0
 8004d0c:	d13f      	bne.n	8004d8e <_malloc_r+0xe6>
 8004d0e:	6821      	ldr	r1, [r4, #0]
 8004d10:	1a6d      	subs	r5, r5, r1
 8004d12:	4629      	mov	r1, r5
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff ffa7 	bl	8004c68 <sbrk_aligned>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	d037      	beq.n	8004d8e <_malloc_r+0xe6>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	442b      	add	r3, r5
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	f8d8 3000 	ldr.w	r3, [r8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d038      	beq.n	8004d9e <_malloc_r+0xf6>
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	42a2      	cmp	r2, r4
 8004d30:	d12b      	bne.n	8004d8a <_malloc_r+0xe2>
 8004d32:	2200      	movs	r2, #0
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	e00f      	b.n	8004d58 <_malloc_r+0xb0>
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	1b52      	subs	r2, r2, r5
 8004d3c:	d41f      	bmi.n	8004d7e <_malloc_r+0xd6>
 8004d3e:	2a0b      	cmp	r2, #11
 8004d40:	d917      	bls.n	8004d72 <_malloc_r+0xca>
 8004d42:	1961      	adds	r1, r4, r5
 8004d44:	42a3      	cmp	r3, r4
 8004d46:	6025      	str	r5, [r4, #0]
 8004d48:	bf18      	it	ne
 8004d4a:	6059      	strne	r1, [r3, #4]
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	bf08      	it	eq
 8004d50:	f8c8 1000 	streq.w	r1, [r8]
 8004d54:	5162      	str	r2, [r4, r5]
 8004d56:	604b      	str	r3, [r1, #4]
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f104 060b 	add.w	r6, r4, #11
 8004d5e:	f000 f829 	bl	8004db4 <__malloc_unlock>
 8004d62:	f026 0607 	bic.w	r6, r6, #7
 8004d66:	1d23      	adds	r3, r4, #4
 8004d68:	1af2      	subs	r2, r6, r3
 8004d6a:	d0ae      	beq.n	8004cca <_malloc_r+0x22>
 8004d6c:	1b9b      	subs	r3, r3, r6
 8004d6e:	50a3      	str	r3, [r4, r2]
 8004d70:	e7ab      	b.n	8004cca <_malloc_r+0x22>
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	6862      	ldr	r2, [r4, #4]
 8004d76:	d1dd      	bne.n	8004d34 <_malloc_r+0x8c>
 8004d78:	f8c8 2000 	str.w	r2, [r8]
 8004d7c:	e7ec      	b.n	8004d58 <_malloc_r+0xb0>
 8004d7e:	4623      	mov	r3, r4
 8004d80:	6864      	ldr	r4, [r4, #4]
 8004d82:	e7ac      	b.n	8004cde <_malloc_r+0x36>
 8004d84:	4634      	mov	r4, r6
 8004d86:	6876      	ldr	r6, [r6, #4]
 8004d88:	e7b4      	b.n	8004cf4 <_malloc_r+0x4c>
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	e7cc      	b.n	8004d28 <_malloc_r+0x80>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	4638      	mov	r0, r7
 8004d94:	f000 f80e 	bl	8004db4 <__malloc_unlock>
 8004d98:	e797      	b.n	8004cca <_malloc_r+0x22>
 8004d9a:	6025      	str	r5, [r4, #0]
 8004d9c:	e7dc      	b.n	8004d58 <_malloc_r+0xb0>
 8004d9e:	605b      	str	r3, [r3, #4]
 8004da0:	deff      	udf	#255	; 0xff
 8004da2:	bf00      	nop
 8004da4:	200003ac 	.word	0x200003ac

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	; (8004db0 <__malloc_lock+0x8>)
 8004daa:	f7ff bf0f 	b.w	8004bcc <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	200003a8 	.word	0x200003a8

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	; (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f7ff bf0a 	b.w	8004bce <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	200003a8 	.word	0x200003a8

08004dc0 <__ssputs_r>:
 8004dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc4:	688e      	ldr	r6, [r1, #8]
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	42be      	cmp	r6, r7
 8004dca:	680b      	ldr	r3, [r1, #0]
 8004dcc:	4682      	mov	sl, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4690      	mov	r8, r2
 8004dd2:	d82c      	bhi.n	8004e2e <__ssputs_r+0x6e>
 8004dd4:	898a      	ldrh	r2, [r1, #12]
 8004dd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dda:	d026      	beq.n	8004e2a <__ssputs_r+0x6a>
 8004ddc:	6965      	ldr	r5, [r4, #20]
 8004dde:	6909      	ldr	r1, [r1, #16]
 8004de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de4:	eba3 0901 	sub.w	r9, r3, r1
 8004de8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dec:	1c7b      	adds	r3, r7, #1
 8004dee:	444b      	add	r3, r9
 8004df0:	106d      	asrs	r5, r5, #1
 8004df2:	429d      	cmp	r5, r3
 8004df4:	bf38      	it	cc
 8004df6:	461d      	movcc	r5, r3
 8004df8:	0553      	lsls	r3, r2, #21
 8004dfa:	d527      	bpl.n	8004e4c <__ssputs_r+0x8c>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	f7ff ff53 	bl	8004ca8 <_malloc_r>
 8004e02:	4606      	mov	r6, r0
 8004e04:	b360      	cbz	r0, 8004e60 <__ssputs_r+0xa0>
 8004e06:	6921      	ldr	r1, [r4, #16]
 8004e08:	464a      	mov	r2, r9
 8004e0a:	f000 faeb 	bl	80053e4 <memcpy>
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	6126      	str	r6, [r4, #16]
 8004e1c:	6165      	str	r5, [r4, #20]
 8004e1e:	444e      	add	r6, r9
 8004e20:	eba5 0509 	sub.w	r5, r5, r9
 8004e24:	6026      	str	r6, [r4, #0]
 8004e26:	60a5      	str	r5, [r4, #8]
 8004e28:	463e      	mov	r6, r7
 8004e2a:	42be      	cmp	r6, r7
 8004e2c:	d900      	bls.n	8004e30 <__ssputs_r+0x70>
 8004e2e:	463e      	mov	r6, r7
 8004e30:	6820      	ldr	r0, [r4, #0]
 8004e32:	4632      	mov	r2, r6
 8004e34:	4641      	mov	r1, r8
 8004e36:	f000 faab 	bl	8005390 <memmove>
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	1b9b      	subs	r3, r3, r6
 8004e3e:	60a3      	str	r3, [r4, #8]
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	4433      	add	r3, r6
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	2000      	movs	r0, #0
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	462a      	mov	r2, r5
 8004e4e:	f000 fad7 	bl	8005400 <_realloc_r>
 8004e52:	4606      	mov	r6, r0
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d1e0      	bne.n	8004e1a <__ssputs_r+0x5a>
 8004e58:	6921      	ldr	r1, [r4, #16]
 8004e5a:	4650      	mov	r0, sl
 8004e5c:	f7ff feb8 	bl	8004bd0 <_free_r>
 8004e60:	230c      	movs	r3, #12
 8004e62:	f8ca 3000 	str.w	r3, [sl]
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	e7e9      	b.n	8004e48 <__ssputs_r+0x88>

08004e74 <_svfiprintf_r>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	4698      	mov	r8, r3
 8004e7a:	898b      	ldrh	r3, [r1, #12]
 8004e7c:	061b      	lsls	r3, r3, #24
 8004e7e:	b09d      	sub	sp, #116	; 0x74
 8004e80:	4607      	mov	r7, r0
 8004e82:	460d      	mov	r5, r1
 8004e84:	4614      	mov	r4, r2
 8004e86:	d50e      	bpl.n	8004ea6 <_svfiprintf_r+0x32>
 8004e88:	690b      	ldr	r3, [r1, #16]
 8004e8a:	b963      	cbnz	r3, 8004ea6 <_svfiprintf_r+0x32>
 8004e8c:	2140      	movs	r1, #64	; 0x40
 8004e8e:	f7ff ff0b 	bl	8004ca8 <_malloc_r>
 8004e92:	6028      	str	r0, [r5, #0]
 8004e94:	6128      	str	r0, [r5, #16]
 8004e96:	b920      	cbnz	r0, 8004ea2 <_svfiprintf_r+0x2e>
 8004e98:	230c      	movs	r3, #12
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e0d0      	b.n	8005044 <_svfiprintf_r+0x1d0>
 8004ea2:	2340      	movs	r3, #64	; 0x40
 8004ea4:	616b      	str	r3, [r5, #20]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eaa:	2320      	movs	r3, #32
 8004eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb4:	2330      	movs	r3, #48	; 0x30
 8004eb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800505c <_svfiprintf_r+0x1e8>
 8004eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ebe:	f04f 0901 	mov.w	r9, #1
 8004ec2:	4623      	mov	r3, r4
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eca:	b10a      	cbz	r2, 8004ed0 <_svfiprintf_r+0x5c>
 8004ecc:	2a25      	cmp	r2, #37	; 0x25
 8004ece:	d1f9      	bne.n	8004ec4 <_svfiprintf_r+0x50>
 8004ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed4:	d00b      	beq.n	8004eee <_svfiprintf_r+0x7a>
 8004ed6:	465b      	mov	r3, fp
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4629      	mov	r1, r5
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff ff6f 	bl	8004dc0 <__ssputs_r>
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	f000 80a9 	beq.w	800503a <_svfiprintf_r+0x1c6>
 8004ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eea:	445a      	add	r2, fp
 8004eec:	9209      	str	r2, [sp, #36]	; 0x24
 8004eee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80a1 	beq.w	800503a <_svfiprintf_r+0x1c6>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f02:	f10a 0a01 	add.w	sl, sl, #1
 8004f06:	9304      	str	r3, [sp, #16]
 8004f08:	9307      	str	r3, [sp, #28]
 8004f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f10:	4654      	mov	r4, sl
 8004f12:	2205      	movs	r2, #5
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	4850      	ldr	r0, [pc, #320]	; (800505c <_svfiprintf_r+0x1e8>)
 8004f1a:	f7fb f959 	bl	80001d0 <memchr>
 8004f1e:	9a04      	ldr	r2, [sp, #16]
 8004f20:	b9d8      	cbnz	r0, 8004f5a <_svfiprintf_r+0xe6>
 8004f22:	06d0      	lsls	r0, r2, #27
 8004f24:	bf44      	itt	mi
 8004f26:	2320      	movmi	r3, #32
 8004f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f2c:	0711      	lsls	r1, r2, #28
 8004f2e:	bf44      	itt	mi
 8004f30:	232b      	movmi	r3, #43	; 0x2b
 8004f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f36:	f89a 3000 	ldrb.w	r3, [sl]
 8004f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3c:	d015      	beq.n	8004f6a <_svfiprintf_r+0xf6>
 8004f3e:	9a07      	ldr	r2, [sp, #28]
 8004f40:	4654      	mov	r4, sl
 8004f42:	2000      	movs	r0, #0
 8004f44:	f04f 0c0a 	mov.w	ip, #10
 8004f48:	4621      	mov	r1, r4
 8004f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4e:	3b30      	subs	r3, #48	; 0x30
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d94d      	bls.n	8004ff0 <_svfiprintf_r+0x17c>
 8004f54:	b1b0      	cbz	r0, 8004f84 <_svfiprintf_r+0x110>
 8004f56:	9207      	str	r2, [sp, #28]
 8004f58:	e014      	b.n	8004f84 <_svfiprintf_r+0x110>
 8004f5a:	eba0 0308 	sub.w	r3, r0, r8
 8004f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f62:	4313      	orrs	r3, r2
 8004f64:	9304      	str	r3, [sp, #16]
 8004f66:	46a2      	mov	sl, r4
 8004f68:	e7d2      	b.n	8004f10 <_svfiprintf_r+0x9c>
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	1d19      	adds	r1, r3, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	9103      	str	r1, [sp, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfbb      	ittet	lt
 8004f76:	425b      	neglt	r3, r3
 8004f78:	f042 0202 	orrlt.w	r2, r2, #2
 8004f7c:	9307      	strge	r3, [sp, #28]
 8004f7e:	9307      	strlt	r3, [sp, #28]
 8004f80:	bfb8      	it	lt
 8004f82:	9204      	strlt	r2, [sp, #16]
 8004f84:	7823      	ldrb	r3, [r4, #0]
 8004f86:	2b2e      	cmp	r3, #46	; 0x2e
 8004f88:	d10c      	bne.n	8004fa4 <_svfiprintf_r+0x130>
 8004f8a:	7863      	ldrb	r3, [r4, #1]
 8004f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8e:	d134      	bne.n	8004ffa <_svfiprintf_r+0x186>
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	1d1a      	adds	r2, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	9203      	str	r2, [sp, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfb8      	it	lt
 8004f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fa0:	3402      	adds	r4, #2
 8004fa2:	9305      	str	r3, [sp, #20]
 8004fa4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800506c <_svfiprintf_r+0x1f8>
 8004fa8:	7821      	ldrb	r1, [r4, #0]
 8004faa:	2203      	movs	r2, #3
 8004fac:	4650      	mov	r0, sl
 8004fae:	f7fb f90f 	bl	80001d0 <memchr>
 8004fb2:	b138      	cbz	r0, 8004fc4 <_svfiprintf_r+0x150>
 8004fb4:	9b04      	ldr	r3, [sp, #16]
 8004fb6:	eba0 000a 	sub.w	r0, r0, sl
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	4082      	lsls	r2, r0
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	3401      	adds	r4, #1
 8004fc2:	9304      	str	r3, [sp, #16]
 8004fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc8:	4825      	ldr	r0, [pc, #148]	; (8005060 <_svfiprintf_r+0x1ec>)
 8004fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fce:	2206      	movs	r2, #6
 8004fd0:	f7fb f8fe 	bl	80001d0 <memchr>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d038      	beq.n	800504a <_svfiprintf_r+0x1d6>
 8004fd8:	4b22      	ldr	r3, [pc, #136]	; (8005064 <_svfiprintf_r+0x1f0>)
 8004fda:	bb1b      	cbnz	r3, 8005024 <_svfiprintf_r+0x1b0>
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	3307      	adds	r3, #7
 8004fe0:	f023 0307 	bic.w	r3, r3, #7
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fea:	4433      	add	r3, r6
 8004fec:	9309      	str	r3, [sp, #36]	; 0x24
 8004fee:	e768      	b.n	8004ec2 <_svfiprintf_r+0x4e>
 8004ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	e7a6      	b.n	8004f48 <_svfiprintf_r+0xd4>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	3401      	adds	r4, #1
 8004ffe:	9305      	str	r3, [sp, #20]
 8005000:	4619      	mov	r1, r3
 8005002:	f04f 0c0a 	mov.w	ip, #10
 8005006:	4620      	mov	r0, r4
 8005008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800500c:	3a30      	subs	r2, #48	; 0x30
 800500e:	2a09      	cmp	r2, #9
 8005010:	d903      	bls.n	800501a <_svfiprintf_r+0x1a6>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0c6      	beq.n	8004fa4 <_svfiprintf_r+0x130>
 8005016:	9105      	str	r1, [sp, #20]
 8005018:	e7c4      	b.n	8004fa4 <_svfiprintf_r+0x130>
 800501a:	fb0c 2101 	mla	r1, ip, r1, r2
 800501e:	4604      	mov	r4, r0
 8005020:	2301      	movs	r3, #1
 8005022:	e7f0      	b.n	8005006 <_svfiprintf_r+0x192>
 8005024:	ab03      	add	r3, sp, #12
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	462a      	mov	r2, r5
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <_svfiprintf_r+0x1f4>)
 800502c:	a904      	add	r1, sp, #16
 800502e:	4638      	mov	r0, r7
 8005030:	f3af 8000 	nop.w
 8005034:	1c42      	adds	r2, r0, #1
 8005036:	4606      	mov	r6, r0
 8005038:	d1d6      	bne.n	8004fe8 <_svfiprintf_r+0x174>
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	065b      	lsls	r3, r3, #25
 800503e:	f53f af2d 	bmi.w	8004e9c <_svfiprintf_r+0x28>
 8005042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005044:	b01d      	add	sp, #116	; 0x74
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	ab03      	add	r3, sp, #12
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	462a      	mov	r2, r5
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <_svfiprintf_r+0x1f4>)
 8005052:	a904      	add	r1, sp, #16
 8005054:	4638      	mov	r0, r7
 8005056:	f000 f879 	bl	800514c <_printf_i>
 800505a:	e7eb      	b.n	8005034 <_svfiprintf_r+0x1c0>
 800505c:	0800555c 	.word	0x0800555c
 8005060:	08005566 	.word	0x08005566
 8005064:	00000000 	.word	0x00000000
 8005068:	08004dc1 	.word	0x08004dc1
 800506c:	08005562 	.word	0x08005562

08005070 <_printf_common>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	4616      	mov	r6, r2
 8005076:	4699      	mov	r9, r3
 8005078:	688a      	ldr	r2, [r1, #8]
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005080:	4293      	cmp	r3, r2
 8005082:	bfb8      	it	lt
 8005084:	4613      	movlt	r3, r2
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800508c:	4607      	mov	r7, r0
 800508e:	460c      	mov	r4, r1
 8005090:	b10a      	cbz	r2, 8005096 <_printf_common+0x26>
 8005092:	3301      	adds	r3, #1
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	0699      	lsls	r1, r3, #26
 800509a:	bf42      	ittt	mi
 800509c:	6833      	ldrmi	r3, [r6, #0]
 800509e:	3302      	addmi	r3, #2
 80050a0:	6033      	strmi	r3, [r6, #0]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d106      	bne.n	80050b8 <_printf_common+0x48>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	6832      	ldr	r2, [r6, #0]
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	dc26      	bgt.n	8005106 <_printf_common+0x96>
 80050b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050bc:	1e13      	subs	r3, r2, #0
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	bf18      	it	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	0692      	lsls	r2, r2, #26
 80050c6:	d42b      	bmi.n	8005120 <_printf_common+0xb0>
 80050c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050cc:	4649      	mov	r1, r9
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d01e      	beq.n	8005114 <_printf_common+0xa4>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	6922      	ldr	r2, [r4, #16]
 80050da:	f003 0306 	and.w	r3, r3, #6
 80050de:	2b04      	cmp	r3, #4
 80050e0:	bf02      	ittt	eq
 80050e2:	68e5      	ldreq	r5, [r4, #12]
 80050e4:	6833      	ldreq	r3, [r6, #0]
 80050e6:	1aed      	subeq	r5, r5, r3
 80050e8:	68a3      	ldr	r3, [r4, #8]
 80050ea:	bf0c      	ite	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	2500      	movne	r5, #0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bfc4      	itt	gt
 80050f6:	1a9b      	subgt	r3, r3, r2
 80050f8:	18ed      	addgt	r5, r5, r3
 80050fa:	2600      	movs	r6, #0
 80050fc:	341a      	adds	r4, #26
 80050fe:	42b5      	cmp	r5, r6
 8005100:	d11a      	bne.n	8005138 <_printf_common+0xc8>
 8005102:	2000      	movs	r0, #0
 8005104:	e008      	b.n	8005118 <_printf_common+0xa8>
 8005106:	2301      	movs	r3, #1
 8005108:	4652      	mov	r2, sl
 800510a:	4649      	mov	r1, r9
 800510c:	4638      	mov	r0, r7
 800510e:	47c0      	blx	r8
 8005110:	3001      	adds	r0, #1
 8005112:	d103      	bne.n	800511c <_printf_common+0xac>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	3501      	adds	r5, #1
 800511e:	e7c6      	b.n	80050ae <_printf_common+0x3e>
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	2030      	movs	r0, #48	; 0x30
 8005126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800512a:	4422      	add	r2, r4
 800512c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005134:	3302      	adds	r3, #2
 8005136:	e7c7      	b.n	80050c8 <_printf_common+0x58>
 8005138:	2301      	movs	r3, #1
 800513a:	4622      	mov	r2, r4
 800513c:	4649      	mov	r1, r9
 800513e:	4638      	mov	r0, r7
 8005140:	47c0      	blx	r8
 8005142:	3001      	adds	r0, #1
 8005144:	d0e6      	beq.n	8005114 <_printf_common+0xa4>
 8005146:	3601      	adds	r6, #1
 8005148:	e7d9      	b.n	80050fe <_printf_common+0x8e>
	...

0800514c <_printf_i>:
 800514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	7e0f      	ldrb	r7, [r1, #24]
 8005152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005154:	2f78      	cmp	r7, #120	; 0x78
 8005156:	4691      	mov	r9, r2
 8005158:	4680      	mov	r8, r0
 800515a:	460c      	mov	r4, r1
 800515c:	469a      	mov	sl, r3
 800515e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005162:	d807      	bhi.n	8005174 <_printf_i+0x28>
 8005164:	2f62      	cmp	r7, #98	; 0x62
 8005166:	d80a      	bhi.n	800517e <_printf_i+0x32>
 8005168:	2f00      	cmp	r7, #0
 800516a:	f000 80d4 	beq.w	8005316 <_printf_i+0x1ca>
 800516e:	2f58      	cmp	r7, #88	; 0x58
 8005170:	f000 80c0 	beq.w	80052f4 <_printf_i+0x1a8>
 8005174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800517c:	e03a      	b.n	80051f4 <_printf_i+0xa8>
 800517e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005182:	2b15      	cmp	r3, #21
 8005184:	d8f6      	bhi.n	8005174 <_printf_i+0x28>
 8005186:	a101      	add	r1, pc, #4	; (adr r1, 800518c <_printf_i+0x40>)
 8005188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051f9 	.word	0x080051f9
 8005194:	08005175 	.word	0x08005175
 8005198:	08005175 	.word	0x08005175
 800519c:	08005175 	.word	0x08005175
 80051a0:	08005175 	.word	0x08005175
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	08005175 	.word	0x08005175
 80051ac:	08005175 	.word	0x08005175
 80051b0:	08005175 	.word	0x08005175
 80051b4:	08005175 	.word	0x08005175
 80051b8:	080052fd 	.word	0x080052fd
 80051bc:	08005225 	.word	0x08005225
 80051c0:	080052b7 	.word	0x080052b7
 80051c4:	08005175 	.word	0x08005175
 80051c8:	08005175 	.word	0x08005175
 80051cc:	0800531f 	.word	0x0800531f
 80051d0:	08005175 	.word	0x08005175
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005175 	.word	0x08005175
 80051dc:	08005175 	.word	0x08005175
 80051e0:	080052bf 	.word	0x080052bf
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e09f      	b.n	8005338 <_printf_i+0x1ec>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	0607      	lsls	r7, r0, #24
 80051fe:	f103 0104 	add.w	r1, r3, #4
 8005202:	6029      	str	r1, [r5, #0]
 8005204:	d501      	bpl.n	800520a <_printf_i+0xbe>
 8005206:	681e      	ldr	r6, [r3, #0]
 8005208:	e003      	b.n	8005212 <_printf_i+0xc6>
 800520a:	0646      	lsls	r6, r0, #25
 800520c:	d5fb      	bpl.n	8005206 <_printf_i+0xba>
 800520e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005212:	2e00      	cmp	r6, #0
 8005214:	da03      	bge.n	800521e <_printf_i+0xd2>
 8005216:	232d      	movs	r3, #45	; 0x2d
 8005218:	4276      	negs	r6, r6
 800521a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521e:	485a      	ldr	r0, [pc, #360]	; (8005388 <_printf_i+0x23c>)
 8005220:	230a      	movs	r3, #10
 8005222:	e012      	b.n	800524a <_printf_i+0xfe>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	6820      	ldr	r0, [r4, #0]
 8005228:	1d19      	adds	r1, r3, #4
 800522a:	6029      	str	r1, [r5, #0]
 800522c:	0605      	lsls	r5, r0, #24
 800522e:	d501      	bpl.n	8005234 <_printf_i+0xe8>
 8005230:	681e      	ldr	r6, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0xee>
 8005234:	0641      	lsls	r1, r0, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0xe4>
 8005238:	881e      	ldrh	r6, [r3, #0]
 800523a:	4853      	ldr	r0, [pc, #332]	; (8005388 <_printf_i+0x23c>)
 800523c:	2f6f      	cmp	r7, #111	; 0x6f
 800523e:	bf0c      	ite	eq
 8005240:	2308      	moveq	r3, #8
 8005242:	230a      	movne	r3, #10
 8005244:	2100      	movs	r1, #0
 8005246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524a:	6865      	ldr	r5, [r4, #4]
 800524c:	60a5      	str	r5, [r4, #8]
 800524e:	2d00      	cmp	r5, #0
 8005250:	bfa2      	ittt	ge
 8005252:	6821      	ldrge	r1, [r4, #0]
 8005254:	f021 0104 	bicge.w	r1, r1, #4
 8005258:	6021      	strge	r1, [r4, #0]
 800525a:	b90e      	cbnz	r6, 8005260 <_printf_i+0x114>
 800525c:	2d00      	cmp	r5, #0
 800525e:	d04b      	beq.n	80052f8 <_printf_i+0x1ac>
 8005260:	4615      	mov	r5, r2
 8005262:	fbb6 f1f3 	udiv	r1, r6, r3
 8005266:	fb03 6711 	mls	r7, r3, r1, r6
 800526a:	5dc7      	ldrb	r7, [r0, r7]
 800526c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005270:	4637      	mov	r7, r6
 8005272:	42bb      	cmp	r3, r7
 8005274:	460e      	mov	r6, r1
 8005276:	d9f4      	bls.n	8005262 <_printf_i+0x116>
 8005278:	2b08      	cmp	r3, #8
 800527a:	d10b      	bne.n	8005294 <_printf_i+0x148>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	07de      	lsls	r6, r3, #31
 8005280:	d508      	bpl.n	8005294 <_printf_i+0x148>
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	6861      	ldr	r1, [r4, #4]
 8005286:	4299      	cmp	r1, r3
 8005288:	bfde      	ittt	le
 800528a:	2330      	movle	r3, #48	; 0x30
 800528c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005294:	1b52      	subs	r2, r2, r5
 8005296:	6122      	str	r2, [r4, #16]
 8005298:	f8cd a000 	str.w	sl, [sp]
 800529c:	464b      	mov	r3, r9
 800529e:	aa03      	add	r2, sp, #12
 80052a0:	4621      	mov	r1, r4
 80052a2:	4640      	mov	r0, r8
 80052a4:	f7ff fee4 	bl	8005070 <_printf_common>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d14a      	bne.n	8005342 <_printf_i+0x1f6>
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	b004      	add	sp, #16
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f043 0320 	orr.w	r3, r3, #32
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	4833      	ldr	r0, [pc, #204]	; (800538c <_printf_i+0x240>)
 80052c0:	2778      	movs	r7, #120	; 0x78
 80052c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	6829      	ldr	r1, [r5, #0]
 80052ca:	061f      	lsls	r7, r3, #24
 80052cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80052d0:	d402      	bmi.n	80052d8 <_printf_i+0x18c>
 80052d2:	065f      	lsls	r7, r3, #25
 80052d4:	bf48      	it	mi
 80052d6:	b2b6      	uxthmi	r6, r6
 80052d8:	07df      	lsls	r7, r3, #31
 80052da:	bf48      	it	mi
 80052dc:	f043 0320 	orrmi.w	r3, r3, #32
 80052e0:	6029      	str	r1, [r5, #0]
 80052e2:	bf48      	it	mi
 80052e4:	6023      	strmi	r3, [r4, #0]
 80052e6:	b91e      	cbnz	r6, 80052f0 <_printf_i+0x1a4>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	2310      	movs	r3, #16
 80052f2:	e7a7      	b.n	8005244 <_printf_i+0xf8>
 80052f4:	4824      	ldr	r0, [pc, #144]	; (8005388 <_printf_i+0x23c>)
 80052f6:	e7e4      	b.n	80052c2 <_printf_i+0x176>
 80052f8:	4615      	mov	r5, r2
 80052fa:	e7bd      	b.n	8005278 <_printf_i+0x12c>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	6826      	ldr	r6, [r4, #0]
 8005300:	6961      	ldr	r1, [r4, #20]
 8005302:	1d18      	adds	r0, r3, #4
 8005304:	6028      	str	r0, [r5, #0]
 8005306:	0635      	lsls	r5, r6, #24
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	d501      	bpl.n	8005310 <_printf_i+0x1c4>
 800530c:	6019      	str	r1, [r3, #0]
 800530e:	e002      	b.n	8005316 <_printf_i+0x1ca>
 8005310:	0670      	lsls	r0, r6, #25
 8005312:	d5fb      	bpl.n	800530c <_printf_i+0x1c0>
 8005314:	8019      	strh	r1, [r3, #0]
 8005316:	2300      	movs	r3, #0
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	4615      	mov	r5, r2
 800531c:	e7bc      	b.n	8005298 <_printf_i+0x14c>
 800531e:	682b      	ldr	r3, [r5, #0]
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	602a      	str	r2, [r5, #0]
 8005324:	681d      	ldr	r5, [r3, #0]
 8005326:	6862      	ldr	r2, [r4, #4]
 8005328:	2100      	movs	r1, #0
 800532a:	4628      	mov	r0, r5
 800532c:	f7fa ff50 	bl	80001d0 <memchr>
 8005330:	b108      	cbz	r0, 8005336 <_printf_i+0x1ea>
 8005332:	1b40      	subs	r0, r0, r5
 8005334:	6060      	str	r0, [r4, #4]
 8005336:	6863      	ldr	r3, [r4, #4]
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	2300      	movs	r3, #0
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005340:	e7aa      	b.n	8005298 <_printf_i+0x14c>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	462a      	mov	r2, r5
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d0ad      	beq.n	80052ac <_printf_i+0x160>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	079b      	lsls	r3, r3, #30
 8005354:	d413      	bmi.n	800537e <_printf_i+0x232>
 8005356:	68e0      	ldr	r0, [r4, #12]
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	4298      	cmp	r0, r3
 800535c:	bfb8      	it	lt
 800535e:	4618      	movlt	r0, r3
 8005360:	e7a6      	b.n	80052b0 <_printf_i+0x164>
 8005362:	2301      	movs	r3, #1
 8005364:	4632      	mov	r2, r6
 8005366:	4649      	mov	r1, r9
 8005368:	4640      	mov	r0, r8
 800536a:	47d0      	blx	sl
 800536c:	3001      	adds	r0, #1
 800536e:	d09d      	beq.n	80052ac <_printf_i+0x160>
 8005370:	3501      	adds	r5, #1
 8005372:	68e3      	ldr	r3, [r4, #12]
 8005374:	9903      	ldr	r1, [sp, #12]
 8005376:	1a5b      	subs	r3, r3, r1
 8005378:	42ab      	cmp	r3, r5
 800537a:	dcf2      	bgt.n	8005362 <_printf_i+0x216>
 800537c:	e7eb      	b.n	8005356 <_printf_i+0x20a>
 800537e:	2500      	movs	r5, #0
 8005380:	f104 0619 	add.w	r6, r4, #25
 8005384:	e7f5      	b.n	8005372 <_printf_i+0x226>
 8005386:	bf00      	nop
 8005388:	0800556d 	.word	0x0800556d
 800538c:	0800557e 	.word	0x0800557e

08005390 <memmove>:
 8005390:	4288      	cmp	r0, r1
 8005392:	b510      	push	{r4, lr}
 8005394:	eb01 0402 	add.w	r4, r1, r2
 8005398:	d902      	bls.n	80053a0 <memmove+0x10>
 800539a:	4284      	cmp	r4, r0
 800539c:	4623      	mov	r3, r4
 800539e:	d807      	bhi.n	80053b0 <memmove+0x20>
 80053a0:	1e43      	subs	r3, r0, #1
 80053a2:	42a1      	cmp	r1, r4
 80053a4:	d008      	beq.n	80053b8 <memmove+0x28>
 80053a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ae:	e7f8      	b.n	80053a2 <memmove+0x12>
 80053b0:	4402      	add	r2, r0
 80053b2:	4601      	mov	r1, r0
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d100      	bne.n	80053ba <memmove+0x2a>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053c2:	e7f7      	b.n	80053b4 <memmove+0x24>

080053c4 <_sbrk_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d06      	ldr	r5, [pc, #24]	; (80053e0 <_sbrk_r+0x1c>)
 80053c8:	2300      	movs	r3, #0
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fb fda8 	bl	8000f24 <_sbrk>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_sbrk_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_sbrk_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	200003a4 	.word	0x200003a4

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <_realloc_r>:
 8005400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005404:	4680      	mov	r8, r0
 8005406:	4614      	mov	r4, r2
 8005408:	460e      	mov	r6, r1
 800540a:	b921      	cbnz	r1, 8005416 <_realloc_r+0x16>
 800540c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005410:	4611      	mov	r1, r2
 8005412:	f7ff bc49 	b.w	8004ca8 <_malloc_r>
 8005416:	b92a      	cbnz	r2, 8005424 <_realloc_r+0x24>
 8005418:	f7ff fbda 	bl	8004bd0 <_free_r>
 800541c:	4625      	mov	r5, r4
 800541e:	4628      	mov	r0, r5
 8005420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005424:	f000 f81b 	bl	800545e <_malloc_usable_size_r>
 8005428:	4284      	cmp	r4, r0
 800542a:	4607      	mov	r7, r0
 800542c:	d802      	bhi.n	8005434 <_realloc_r+0x34>
 800542e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005432:	d812      	bhi.n	800545a <_realloc_r+0x5a>
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f7ff fc36 	bl	8004ca8 <_malloc_r>
 800543c:	4605      	mov	r5, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	d0ed      	beq.n	800541e <_realloc_r+0x1e>
 8005442:	42bc      	cmp	r4, r7
 8005444:	4622      	mov	r2, r4
 8005446:	4631      	mov	r1, r6
 8005448:	bf28      	it	cs
 800544a:	463a      	movcs	r2, r7
 800544c:	f7ff ffca 	bl	80053e4 <memcpy>
 8005450:	4631      	mov	r1, r6
 8005452:	4640      	mov	r0, r8
 8005454:	f7ff fbbc 	bl	8004bd0 <_free_r>
 8005458:	e7e1      	b.n	800541e <_realloc_r+0x1e>
 800545a:	4635      	mov	r5, r6
 800545c:	e7df      	b.n	800541e <_realloc_r+0x1e>

0800545e <_malloc_usable_size_r>:
 800545e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005462:	1f18      	subs	r0, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfbc      	itt	lt
 8005468:	580b      	ldrlt	r3, [r1, r0]
 800546a:	18c0      	addlt	r0, r0, r3
 800546c:	4770      	bx	lr
	...

08005470 <trunc>:
 8005470:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8005474:	ec5c bb10 	vmov	fp, ip, d0
 8005478:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800547c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8005480:	2913      	cmp	r1, #19
 8005482:	4664      	mov	r4, ip
 8005484:	dc11      	bgt.n	80054aa <trunc+0x3a>
 8005486:	2900      	cmp	r1, #0
 8005488:	bfa7      	ittee	ge
 800548a:	4b15      	ldrge	r3, [pc, #84]	; (80054e0 <trunc+0x70>)
 800548c:	fa43 f101 	asrge.w	r1, r3, r1
 8005490:	2200      	movlt	r2, #0
 8005492:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8005496:	bfa4      	itt	ge
 8005498:	2200      	movge	r2, #0
 800549a:	ea01 030c 	andge.w	r3, r1, ip
 800549e:	4693      	mov	fp, r2
 80054a0:	469c      	mov	ip, r3
 80054a2:	ec4c bb10 	vmov	d0, fp, ip
 80054a6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80054aa:	2933      	cmp	r1, #51	; 0x33
 80054ac:	dd0d      	ble.n	80054ca <trunc+0x5a>
 80054ae:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80054b2:	d1f6      	bne.n	80054a2 <trunc+0x32>
 80054b4:	4663      	mov	r3, ip
 80054b6:	ee10 2a10 	vmov	r2, s0
 80054ba:	ee10 0a10 	vmov	r0, s0
 80054be:	4621      	mov	r1, r4
 80054c0:	f7fa fedc 	bl	800027c <__adddf3>
 80054c4:	4683      	mov	fp, r0
 80054c6:	468c      	mov	ip, r1
 80054c8:	e7eb      	b.n	80054a2 <trunc+0x32>
 80054ca:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	40c3      	lsrs	r3, r0
 80054d4:	ea2b 0603 	bic.w	r6, fp, r3
 80054d8:	46b3      	mov	fp, r6
 80054da:	46a4      	mov	ip, r4
 80054dc:	e7e1      	b.n	80054a2 <trunc+0x32>
 80054de:	bf00      	nop
 80054e0:	fff00000 	.word	0xfff00000

080054e4 <_init>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr

080054f0 <_fini>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr
